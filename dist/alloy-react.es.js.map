{"version":3,"file":"alloy-react.es.js","sources":["../src/utils/idHelper.js","../src/components/cell/AlloyIcon.jsx","../src/components/cell/AlloyLink.jsx","../src/components/cell/AlloyLinkIcon.jsx","../src/components/cell/AlloyLinkLogo.jsx","../src/components/cell/AlloyButton.jsx","../src/components/cell/AlloyButtonIcon.jsx","../src/components/cell/AlloyButtonSubmit.jsx","../src/components/cell/AlloyInput.jsx","../src/components/tissue/AlloyLinkBar.jsx","../src/components/tissue/AlloyButtonBar.jsx","../src/components/tissue/AlloyNavBar.jsx","../src/components/tissue/AlloyTable.jsx","../node_modules/@remix-run/router/dist/router.js","../node_modules/react-router/dist/index.js","../node_modules/react-router-dom/dist/index.js","../src/components/tissue/AlloyTableLink.jsx","../src/components/tissue/AlloyTableAction.jsx","../src/components/tissue/AlloyCard.jsx","../src/components/tissue/AlloyCardIcon.jsx","../src/components/tissue/AlloyCardImage.jsx","../src/components/tissue/AlloyCardAction.jsx","../src/components/tissue/AlloyCardIconAction.jsx","../src/components/tissue/AlloyCardImageAction.jsx","../src/components/tissue/AlloyForm.jsx"],"sourcesContent":["// src/utils/idHelper.js\n\n/**\n * Generate a unique ID string with a given prefix.\n *\n * Examples:\n *   generateId(\"link\")   -> \"link-1730145329012-x8f3k\"\n *   generateId(\"input\")  -> \"input-1730145329012-p2a9q\"\n *\n * - Timestamp gives us high uniqueness across runs / reloads / bundles.\n * - Random slug protects from two calls in the same millisecond.\n *\n * This is appropriate for DOM ids, React keys, etc.\n *\n * @param {string} prefix - semantic prefix like \"link\", \"btn\", \"row\", etc.\n * @returns {string} unique id\n */\nexport function generateId(prefix = \"id\") {\n  const ts = Date.now(); // ms since epoch\n  const rand = Math.random().toString(36).slice(2, 7); // short random token\n  return `${prefix}-${ts}-${rand}`;\n}\n\n/**\n * TagObject\n *\n * Lightweight label/title model reused across the library.\n *\n * Fields:\n *  - id?: string        DOM id. Auto-generated if not provided.\n *  - name?: string      Text to render. If falsy (\"\" / undefined / null), consumers should NOT render.\n *  - className?: string Classes to style that label wrapper.\n *\n * Rendering rule:\n *   If `name` is missing or empty, nothing should render.\n */\nexport class TagObject {\n  constructor(tag = {}) {\n    const { id, name, className } = tag;\n\n    this.id = id ?? generateId(\"tag\");\n    this.name = name ?? \"\";        // empty string = \"do not render\"\n    this.className = className ?? \"\";\n  }\n}","import React from \"react\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/**\n * @typedef {Object} IconConfig\n * @property {string} iconClass             - Required. Font Awesome class string\n *                                            e.g. \"fa-solid fa-user fa-2x\".\n * @property {string} [id]                  - Optional. If not provided, a unique\n *                                            id will be generated like\n *                                            \"icon-1730145329012-x8f3k\".\n */\n\nexport class IconObject {\n  /**\n   * Build a new IconObject.\n   *\n   * Consumers pass one config object (IconConfig). We normalize it\n   * and guarantee it has an id.\n   *\n   * @param {IconConfig} icon\n   */\n  constructor(icon = {}) {\n    if (!icon.iconClass) {\n      throw new Error(\"IconObject requires `iconClass`.\");\n    }\n\n    this.id = icon.id ?? generateId(\"icon\");\n    this.iconClass = icon.iconClass;\n  }\n}\n/**\n * AlloyIcon: accepts ONLY an `icon` prop (instance of Icon).\n * Renders an <i> with the provided id and classes.\n */\nexport function AlloyIcon({ icon }) {\n  if (!icon) throw new Error(\"AlloyIcon requires `icon` prop (Icon instance).\");\n  return <i id={icon.id} className={icon.iconClass} aria-hidden=\"true\" />;\n}\n\nexport default AlloyIcon;\n","import { useMemo, useRef, useState } from \"react\";\nimport { generateId } from \"../../utils/idHelper.js\"; \n\n/* -------------------------------------------\n * Hook: useActiveClass\n *\n * - Takes a base className and an \"active\" className.\n * - Tracks hover / press / focus.\n * - Returns:\n *    className => merged classes depending on state\n *    events    => mouse/keyboard handlers to drive the state\n * ----------------------------------------- */\nfunction useActiveClass(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => {\n        setHovered(false);\n        setPressed(false);\n      },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n/* -------------------------------------------\n * LinkObject\n *\n * Public shape for AlloyLink.\n * We do NOT destructure in the constructor anymore.\n * We validate required fields, normalize defaults,\n * and guarantee an id.\n * ----------------------------------------- */\n\n/**\n * @typedef {Object} LinkConfig\n * @property {string} href                - Required. Destination URL/path.\n * @property {string} name                - Required. Visible text label.\n * @property {string} [id]                - Optional. If not provided, a unique id is generated.\n * @property {string} [className]         - Optional. Base classes for <a>.\n * @property {string} [active]            - Optional. Classes added on hover/press/focus.\n * @property {string} [target]            - Optional. E.g. \"_blank\".\n * @property {string} [rel]               - Optional. E.g. \"nofollow\".\n * @property {(e:any)=>void} [onClick]    - Optional. Click handler (can navigate(), log, preventDefault, etc.).\n * @property {string} [title]             - Optional. Tooltip text. Defaults to `name`.\n */\nexport class LinkObject {\n  /**\n   * @param {LinkConfig} link\n   */\n  constructor(link = {}) {\n    if (!link.href) {\n      throw new Error(\"LinkObject requires `href`.\");\n    }\n    if (!link.name) {\n      throw new Error(\"LinkObject requires `name`.\");\n    }\n\n    this.id = link.id ?? generateId(\"link\");\n    this.name = link.name;\n    this.href = link.href;\n    this.className = link.className ?? \"nav-link\";\n    this.active = link.active ?? \"\";\n    this.target = link.target;\n    this.rel = link.rel;\n    this.onClick = link.onClick;\n    this.title = link.title ?? link.name; // fallback to visible label\n  }\n}\n\n/* -------------------------------------------\n * AlloyLink Component\n *\n * - Accepts a single prop: { link }\n * - `link` MUST be an instance of LinkObject.\n * - Renders an <a> with:\n *    - stable id via useRef\n *    - hover/active/focus styling from useActiveClass\n *    - safe rel handling for target=\"_blank\"\n *    - optional onClick (consumer logic, e.g. navigate())\n * ----------------------------------------- */\n\nexport function AlloyLink({ link }) {\n  // Validate prop contract\n  if (!link || !(link instanceof LinkObject)) {\n    throw new Error(\"AlloyLink requires `link` (LinkObject instance).\");\n  }\n\n  // Stabilize DOM id across re-renders so the <a id=\"...\"> doesn't change\n  const autoId = useRef(link.id);\n\n  // Merge base class and active class depending on hover/press/focus\n  const { className, events } = useActiveClass(link.className, link.active);\n\n  // Security: if opening a new tab, include noopener/noreferrer\n  const safeRel =\n    link.target === \"_blank\"\n      ? link.rel\n        ? `${link.rel} noopener noreferrer`\n        : \"noopener noreferrer\"\n      : link.rel;\n\n  return (\n    <a\n      id={autoId.current}\n      href={link.href}\n      className={className}\n      target={link.target}\n      rel={safeRel}\n      onClick={link.onClick}\n      title={link.title}\n      {...events}\n    >\n      <span>{link.name}</span>\n    </a>\n  );\n}\n\nexport default AlloyLink;\n","import React, { useMemo, useRef, useState } from \"react\";\nimport { AlloyIcon, IconObject } from \"./AlloyIcon\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* -------------------------------------------\n * Hook: useActiveClassIcon\n *\n * Same idea as useActiveClass in AlloyLink:\n * - Tracks hover / press / focus\n * - Returns merged className and the event handlers\n * ----------------------------------------- */\nfunction useActiveClassIcon(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => {\n        setHovered(false);\n        setPressed(false);\n      },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n/* -------------------------------------------\n * LinkIconObject\n *\n * This is the data model for AlloyLinkIcon.\n * It is the \"Link + Icon\" equivalent of LinkObject.\n *\n * We normalize config, validate required pieces,\n * generate an id if not provided,\n * and ensure `icon` is an IconObject instance.\n * ----------------------------------------- */\n\n/**\n * @typedef {Object} LinkIconConfig\n * @property {string} href                   - Required. Destination URL/path.\n * @property {IconObject|{iconClass:string,id?:string}} icon\n *                                            Required. Either an IconObject or plain\n *                                            { iconClass, id? } that can be turned into one.\n * @property {string} [name]                 - Optional. Visible label text next to the icon.\n * @property {string} [id]                   - Optional. Unique DOM id. Auto-generated if missing.\n * @property {string} [className]            - Optional. Base classes for <a>.\n * @property {string} [active]               - Optional. Classes applied on hover/press/focus.\n * @property {string} [target]               - Optional. e.g. \"_blank\".\n * @property {string} [rel]                  - Optional. e.g. \"nofollow\".\n * @property {(e:any)=>void} [onClick]       - Optional. Custom click handler\n *                                             (can preventDefault()+navigate(), analytics, etc.)\n * @property {string} [title]                - Optional. Tooltip/title. Defaults to `name`.\n */\nexport class LinkIconObject {\n  /**\n   * @param {LinkIconConfig} linkIcon\n   */\n  constructor(linkIcon = {}) {\n    // required checks\n    if (!linkIcon.href) {\n      throw new Error(\"LinkIconObject requires `href`.\");\n    }\n    if (!linkIcon.icon) {\n      throw new Error(\"LinkIconObject requires `icon`.\");\n    }\n\n    // normalize icon: if caller passed a plain object, wrap it; if it's already IconObject, keep it\n    const normalizedIcon =\n      linkIcon.icon instanceof IconObject\n        ? linkIcon.icon\n        : new IconObject(linkIcon.icon);\n\n    // finalize\n    this.id = linkIcon.id ?? generateId(\"link-icon\");\n    this.href = linkIcon.href;\n    this.icon = normalizedIcon;\n    this.name = linkIcon.name;\n    this.className = linkIcon.className ?? \"nav-link\";\n    this.active = linkIcon.active ?? \"\";\n    this.target = linkIcon.target;\n    this.rel = linkIcon.rel;\n    this.onClick = linkIcon.onClick;\n    this.title = linkIcon.title ?? linkIcon.name;\n  }\n}\n\n/* -------------------------------------------\n * AlloyLinkIcon\n *\n * Props:\n *   { linkIcon: LinkIconObject }\n *\n * Renders:\n *   <a>\n *     <i .../>\n *     optional text label\n *   </a>\n *\n * Behavior:\n * - Hover/press/focus styling via useActiveClassIcon.\n * - ID is stable across renders via useRef.\n * - Automatically injects \"noopener noreferrer\" for target=\"_blank\".\n * - Calls linkIcon.onClick when clicked (if provided).\n * ----------------------------------------- */\nexport function AlloyLinkIcon({ linkIcon }) {\n  // dev safety\n  if (!linkIcon || !(linkIcon instanceof LinkIconObject)) {\n    throw new Error(\"AlloyLinkIcon requires `linkIcon` (LinkIconObject instance).\");\n  }\n\n  // lock the id for stable DOM behavior across re-renders\n  const autoId = useRef(linkIcon.id);\n\n  // build active/hover className + mouse/focus handlers\n  const { className, events } = useActiveClassIcon(\n    linkIcon.className,\n    linkIcon.active\n  );\n\n  // sanitize rel for security if target is _blank\n  const safeRel =\n    linkIcon.target === \"_blank\"\n      ? linkIcon.rel\n        ? `${linkIcon.rel} noopener noreferrer`\n        : \"noopener noreferrer\"\n      : linkIcon.rel;\n\n  const hasLabel = Boolean(linkIcon.name);\n\n  return (\n    <a\n      id={autoId.current}\n      href={linkIcon.href}\n      className={className}\n      target={linkIcon.target}\n      rel={safeRel}\n      onClick={linkIcon.onClick}\n      title={linkIcon.title}\n      {...events}\n    >\n      <span className=\"d-inline-flex align-items-center\">\n        <AlloyIcon icon={linkIcon.icon} />\n        {hasLabel && <span className=\"px-1\">{linkIcon.name}</span>}\n      </span>\n    </a>\n  );\n}\n\nexport default AlloyLinkIcon;\n","import React, { useMemo, useRef, useState } from \"react\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* -------------------------------------------\n * Hook: useActiveClassLogo\n *\n * Same pattern as useActiveClass / useActiveClassIcon:\n * returns merged className and a bundle of event handlers\n * based on hover / press / focus.\n * ----------------------------------------- */\nfunction useActiveClassLogo(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => {\n        setHovered(false);\n        setPressed(false);\n      },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n/* -------------------------------------------\n * LinkLogoObject\n *\n * Data model for AlloyLinkLogo.\n * This is \"link + brand image (logo)\" instead of icon/font.\n *\n * It:\n *  - validates required fields (href, logo)\n *  - ensures it always has an id\n *  - normalizes defaults\n *  - provides fallback for title\n *\n * After construction, AlloyLinkLogo can trust it.\n * ----------------------------------------- */\n\n/**\n * @typedef {Object} LinkLogoConfig\n * @property {string} href                        - Required. Destination URL/path.\n * @property {string} logo                        - Required. <img src=\"...\"> URL.\n * @property {string} [id]                        - Optional. DOM id. Auto-generated if missing.\n * @property {string} [name]                      - Optional. Visible label text after the logo.\n * @property {number|string} [width]              - Optional. Logo width (px, number, etc.).\n * @property {number|string} [height]             - Optional. Logo height.\n * @property {string} [logoAlt]                   - Optional. alt text for the <img>. Defaults to name.\n * @property {string} [className]                 - Optional. Base classes for <a>.\n * @property {string} [active]                    - Optional. Classes applied on hover/press/focus.\n * @property {string} [target]                    - Optional. e.g. \"_blank\".\n * @property {string} [rel]                       - Optional. e.g. \"nofollow\".\n * @property {(e:any)=>void} [onClick]            - Optional. Custom click handler\n *                                                  (preventDefault()+navigate(), analytics, etc.).\n * @property {string} [title]                     - Optional. Tooltip text. Defaults to `name`.\n */\nexport class LinkLogoObject {\n  /**\n   * @param {LinkLogoConfig} linkLogo\n   */\n  constructor(linkLogo = {}) {\n    if (!linkLogo.href) {\n      throw new Error(\"LinkLogoObject requires `href`.\");\n    }\n    if (!linkLogo.logo) {\n      throw new Error(\"LinkLogoObject requires `logo`.\");\n    }\n\n    this.id = linkLogo.id ?? generateId(\"link-logo\");\n    this.name = linkLogo.name;\n    this.href = linkLogo.href;\n    this.logo = linkLogo.logo;\n    this.width = linkLogo.width;\n    this.height = linkLogo.height;\n    this.logoAlt = linkLogo.logoAlt ?? linkLogo.name ?? \"\";\n    this.className = linkLogo.className ?? \"nav-link\";\n    this.active = linkLogo.active ?? \"\";\n    this.target = linkLogo.target;\n    this.rel = linkLogo.rel;\n    this.onClick = linkLogo.onClick;\n    this.title = linkLogo.title ?? linkLogo.name;\n  }\n}\n\n/* -------------------------------------------\n * AlloyLinkLogo\n *\n * Props:\n *   { linkLogo: LinkLogoObject }\n *\n * Renders an <a> with:\n *   - a logo <img />\n *   - optional text label right after the logo\n *\n * Behavior:\n *   - className changes on hover/press/focus via useActiveClassLogo\n *   - \"noopener noreferrer\" is auto-added for target=\"_blank\"\n *   - onClick is passed through for custom logic (navigate(), analytics, etc.)\n * ----------------------------------------- */\nexport function AlloyLinkLogo({ linkLogo }) {\n  if (!linkLogo || !(linkLogo instanceof LinkLogoObject)) {\n    throw new Error(\n      \"AlloyLinkLogo requires `linkLogo` (LinkLogoObject instance).\"\n    );\n  }\n\n  // Keep the id stable across re-renders\n  const autoId = useRef(linkLogo.id);\n\n  // Build visual state classes + event handlers\n  const { className, events } = useActiveClassLogo(\n    linkLogo.className,\n    linkLogo.active\n  );\n\n  // Safe rel behavior for external targets\n  const safeRel =\n    linkLogo.target === \"_blank\"\n      ? linkLogo.rel\n        ? `${linkLogo.rel} noopener noreferrer`\n        : \"noopener noreferrer\"\n      : linkLogo.rel;\n\n  const hasLabel = Boolean(linkLogo.name);\n\n  return (\n    <a\n      id={autoId.current}\n      href={linkLogo.href}\n      className={className}\n      target={linkLogo.target}\n      rel={safeRel}\n      onClick={linkLogo.onClick}\n      title={linkLogo.title}\n      {...events}\n    >\n      <span className=\"d-inline-flex align-items-center\">\n        <img\n          src={linkLogo.logo}\n          alt={linkLogo.logoAlt || linkLogo.name || \"\"}\n          width={linkLogo.width}\n          height={linkLogo.height}\n          style={{ display: \"inline-block\" }}\n        />\n        {hasLabel && <span className=\"px-1\">{linkLogo.name}</span>}\n      </span>\n    </a>\n  );\n}\n\nexport default AlloyLinkLogo;\n","// AlloyButton.jsx\nimport React, {\n  useMemo,\n  useRef,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* -------------------------------------------\n * useActiveClass\n *\n * Same pattern as AlloyLink / AlloyLinkIcon / AlloyLinkLogo:\n * track hover / press / focus and return:\n *  - merged className (base + active if \"on\")\n *  - event handlers to control that state\n * ----------------------------------------- */\nfunction useActiveClass(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => {\n        setHovered(false);\n        setPressed(false);\n      },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n/* -------------------------------------------\n * ButtonObject\n *\n * This is the normalized model for AlloyButton.\n * It guarantees:\n *   - required `name`\n *   - stable unique `id`\n *   - safe defaults for all other fields\n *   - event handlers carried along on the instance\n *\n * We ALSO expose optional per-event callbacks:\n *   onClick, onKeyDown, onKeyUp, onFocus, onBlur,\n *   onMouseEnter, onMouseLeave\n *\n * And AlloyButton will call them in addition to a\n * parent-level `output` callback prop.\n * ----------------------------------------- */\n\n/**\n * @typedef {Object} ButtonConfig\n * @property {string} name                  - Required. Visible label text.\n * @property {string} [id]                  - Optional. DOM id. Auto-generated if missing.\n * @property {string} [className]           - Optional. Base classes for <button>.\n * @property {string} [active]              - Optional. Classes added on hover/press/focus.\n * @property {boolean} [disabled]           - Optional. Defaults to false.\n * @property {string} [title]               - Optional. Tooltip/title. Defaults to `name`.\n * @property {string} [ariaLabel]           - Optional. Accessible name. Defaults to `name`.\n * @property {number} [tabIndex]            - Optional. Tab index override.\n *\n * @property {(e:any, self:ButtonObject)=>void} [onClick]\n * @property {(e:any, self:ButtonObject)=>void} [onKeyDown]\n * @property {(e:any, self:ButtonObject)=>void} [onKeyUp]\n * @property {(e:any, self:ButtonObject)=>void} [onFocus]\n * @property {(e:any, self:ButtonObject)=>void} [onBlur]\n * @property {(e:any, self:ButtonObject)=>void} [onMouseEnter]\n * @property {(e:any, self:ButtonObject)=>void} [onMouseLeave]\n */\nexport class ButtonObject {\n  /**\n   * @param {ButtonConfig} button\n   */\n  constructor(button = {}) {\n    if (!button.name) {\n      throw new Error(\"ButtonObject requires `name`.\");\n    }\n\n    this.id = button.id ?? generateId(\"btn\");\n    this.name = button.name;\n\n    this.className = button.className ?? \"\";\n    this.active = button.active ?? \"btn btn-primary\";\n    this.disabled = !!button.disabled;\n    this.title = button.title ?? button.name;\n    this.ariaLabel = button.ariaLabel ?? button.name;\n    this.tabIndex = button.tabIndex;\n\n    // optional per-event callbacks\n    this.onClick = button.onClick;\n    this.onKeyDown = button.onKeyDown;\n    this.onKeyUp = button.onKeyUp;\n    this.onFocus = button.onFocus;\n    this.onBlur = button.onBlur;\n    this.onMouseEnter = button.onMouseEnter;\n    this.onMouseLeave = button.onMouseLeave;\n  }\n}\n\n/* -------------------------------------------\n * AlloyButton\n *\n * Props:\n *   - button: ButtonObject   (required)\n *   - output?: (self: ButtonObject, e?: any) => void\n *        Global event tap. Called for all supported events.\n *\n * Ref:\n *   ref.current = {\n *     el,        // underlying <button> element\n *     model,     // the same ButtonObject you passed\n *     focus(),   // focus the button\n *     click(),   // click() the button\n *   }\n *\n * Behavior:\n *   - Uses hover/press/focus state to apply button.active classes.\n *   - Wires events so they call:\n *       1. output(self, event)         // if provided\n *       2. per-event handler on model  // e.g. button.onClick(event, model)\n *   - Keeps DOM id stable via useRef(button.id).\n * ----------------------------------------- */\nexport const AlloyButton = forwardRef(function AlloyButton(\n  { button, output },\n  ref\n) {\n  if (!button || !(button instanceof ButtonObject)) {\n    throw new Error(\"AlloyButton requires `button` (ButtonObject instance).\");\n  }\n\n  const elRef = useRef(null);\n  const autoId = useRef(button.id);\n  const isDisabled = button.disabled;\n\n  const { className, events } = useActiveClass(\n    button.className,\n    button.active\n  );\n\n  // expose focus() / click() / element / model via ref\n  useImperativeHandle(\n    ref,\n    () => ({\n      el: elRef.current,\n      model: button,\n      focus: () => elRef.current?.focus(),\n      click: () => elRef.current?.click(),\n    }),\n    [button]\n  );\n\n  // Helper builder:\n  // emitThen(handler, alsoCallInternal?) returns an event listener.\n  //\n  // Order:\n  //   alsoCallInternal(e)   -> keeps internal hover/press/focus state in sync\n  //   output(button, e)     -> global listener from parent\n  //   handler(e, button)    -> specific handler from this ButtonObject\n  const emitThen = (handler, alsoCallInternal) => (e) => {\n    alsoCallInternal?.(e);\n    output?.(button, e);\n    handler?.(e, button);\n  };\n\n  const mergedEvents = {\n    onClick: emitThen(button.onClick),\n    onKeyDown: emitThen(button.onKeyDown, events.onFocus),\n    onKeyUp: emitThen(button.onKeyUp),\n    onFocus: emitThen(button.onFocus, events.onFocus),\n    onBlur: emitThen(button.onBlur, events.onBlur),\n    onMouseEnter: emitThen(button.onMouseEnter, events.onMouseEnter),\n    onMouseLeave: emitThen(button.onMouseLeave, events.onMouseLeave),\n    onMouseDown: emitThen(undefined, events.onMouseDown),\n    onMouseUp: emitThen(undefined, events.onMouseUp),\n  };\n\n  return (\n    <button\n      id={autoId.current}\n      ref={elRef}\n      type=\"button\"\n      className={className}\n      title={button.title}\n      aria-label={button.ariaLabel}\n      aria-disabled={isDisabled || undefined}\n      disabled={isDisabled}\n      tabIndex={button.tabIndex}\n      {...mergedEvents}\n    >\n      <span className=\"px-2 align-middle\">{button.name}</span>\n    </button>\n  );\n});\n\nexport default AlloyButton;\n","// AlloyButtonIcon.jsx\nimport React, {\n  useMemo,\n  useRef,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport AlloyIcon, { IconObject } from \"./AlloyIcon.jsx\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* -------------------------------------------\n * useActiveClass\n *\n * Same hover/press/focus state pattern as:\n * - AlloyButton\n * - AlloyLinkIcon\n * - AlloyLinkLogo\n *\n * Returns:\n *  - className: base + active if hovered/pressed/focused\n *  - events: handlers to maintain that state\n * ----------------------------------------- */\nfunction useActiveClass(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => {\n        setHovered(false);\n        setPressed(false);\n      },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n/* -------------------------------------------\n * ButtonIconObject\n *\n * Data model for AlloyButtonIcon.\n *\n * This is just like ButtonObject, but:\n * - `icon` is required\n * - `name` is optional (so you can have icon-only buttons)\n *\n * Responsibilities:\n *  - validate `icon`\n *  - normalize defaults\n *  - attach per-event callbacks\n *  - guarantee a stable `id`\n * ----------------------------------------- */\n\n/**\n * @typedef {Object} ButtonIconConfig\n * @property {string} [id]                      - Optional. DOM id. Auto-generated if missing.\n * @property {string} [name]                    - Optional. Visible text label after the icon.\n * @property {IconObject|{iconClass:string}} icon\n *                                              - Required. Either an IconObject or a plain object\n *                                                like { iconClass: \"fa-solid fa-star\" }.\n * @property {string} [className]               - Optional. Base classes for <button>.\n * @property {string} [active]                  - Optional. Classes added during hover/press/focus.\n * @property {boolean} [disabled]               - Optional. Defaults to false.\n * @property {string} [title]                   - Optional. Tooltip/title. Defaults to `name` or \"icon button\".\n * @property {string} [ariaLabel]               - Optional. Accessible label for <button>. Defaults to `name` or \"icon button\".\n * @property {number} [tabIndex]                - Optional. Tab index override.\n *\n * @property {(e:any, self:ButtonIconObject)=>void} [onClick]\n * @property {(e:any, self:ButtonIconObject)=>void} [onKeyDown]\n * @property {(e:any, self:ButtonIconObject)=>void} [onKeyUp]\n * @property {(e:any, self:ButtonIconObject)=>void} [onFocus]\n * @property {(e:any, self:ButtonIconObject)=>void} [onBlur]\n * @property {(e:any, self:ButtonIconObject)=>void} [onMouseEnter]\n * @property {(e:any, self:ButtonIconObject)=>void} [onMouseLeave]\n */\nexport class ButtonIconObject {\n  /**\n   * @param {ButtonIconConfig} buttonIcon\n   */\n  constructor(buttonIcon = {}) {\n    if (!buttonIcon.icon) {\n      throw new Error(\"ButtonIconObject requires `icon`.\");\n    }\n\n    // normalize icon: accept IconObject instance or plain { iconClass: \"...\" }\n    const normalizedIcon =\n      buttonIcon.icon instanceof IconObject\n        ? buttonIcon.icon\n        : new IconObject(buttonIcon.icon);\n\n    this.id = buttonIcon.id ?? generateId(\"btn-icon\");\n    this.name = buttonIcon.name; // may be undefined for icon-only button\n    this.icon = normalizedIcon;\n\n    this.className = buttonIcon.className ?? \"btn btn-primary\";\n    this.active = buttonIcon.active ?? \"\";\n    this.disabled = !!buttonIcon.disabled;\n\n    // tooltip/title defaults to name or \"icon button\"\n    this.title =\n      buttonIcon.title ??\n      buttonIcon.name ??\n      \"icon button\";\n\n    // aria-label defaults to ariaLabel -> name -> \"icon button\"\n    this.ariaLabel =\n      buttonIcon.ariaLabel ??\n      buttonIcon.name ??\n      \"icon button\";\n\n    this.tabIndex = buttonIcon.tabIndex;\n\n    // optional per-event callbacks\n    this.onClick = buttonIcon.onClick;\n    this.onKeyDown = buttonIcon.onKeyDown;\n    this.onKeyUp = buttonIcon.onKeyUp;\n    this.onFocus = buttonIcon.onFocus;\n    this.onBlur = buttonIcon.onBlur;\n    this.onMouseEnter = buttonIcon.onMouseEnter;\n    this.onMouseLeave = buttonIcon.onMouseLeave;\n  }\n}\n\n/* -------------------------------------------\n * AlloyButtonIcon\n *\n * Props:\n *   - buttonIcon: ButtonIconObject (required)\n *   - output?: (self: ButtonIconObject, e?: any) => void\n *        A global \"event tap\" that fires on all events.\n *\n * Ref:\n *   ref.current = {\n *     el,      // <button> element\n *     model,   // the ButtonIconObject instance you passed in\n *     focus(), // programmatically focus the button\n *     click(), // programmatically click the button\n *   }\n *\n * Behavior:\n *   - Applies hover/press/focus styling via useActiveClass\n *   - Handles disabled\n *   - Emits events in order:\n *        1. alsoCallInternal(e)  -> keeps hover/press/focus state\n *        2. output(model, e)     -> parent-level listener\n *        3. handler(e, model)    -> model's specific handler, e.g. onClick\n * ----------------------------------------- */\nexport const AlloyButtonIcon = forwardRef(function AlloyButtonIcon(\n  { buttonIcon, output },\n  ref\n) {\n  if (!buttonIcon || !(buttonIcon instanceof ButtonIconObject)) {\n    throw new Error(\n      \"AlloyButtonIcon requires `buttonIcon` (ButtonIconObject instance).\"\n    );\n  }\n\n  const elRef = useRef(null);\n  const autoId = useRef(buttonIcon.id);\n  const isDisabled = buttonIcon.disabled;\n\n  const { className, events } = useActiveClass(\n    buttonIcon.className,\n    buttonIcon.active\n  );\n\n  // Expose imperative API via ref\n  useImperativeHandle(\n    ref,\n    () => ({\n      el: elRef.current,\n      model: buttonIcon,\n      focus: () => elRef.current?.focus(),\n      click: () => elRef.current?.click(),\n    }),\n    [buttonIcon]\n  );\n\n  // Same emit ordering we standardized in AlloyButton\n  const emitThen = (handler, alsoCallInternal) => (e) => {\n    alsoCallInternal?.(e);\n    output?.(buttonIcon, e);\n    handler?.(e, buttonIcon);\n  };\n\n  const mergedEvents = {\n    onClick: emitThen(buttonIcon.onClick),\n    onKeyDown: emitThen(buttonIcon.onKeyDown, events.onFocus),\n    onKeyUp: emitThen(buttonIcon.onKeyUp),\n    onFocus: emitThen(buttonIcon.onFocus, events.onFocus),\n    onBlur: emitThen(buttonIcon.onBlur, events.onBlur),\n    onMouseEnter: emitThen(buttonIcon.onMouseEnter, events.onMouseEnter),\n    onMouseLeave: emitThen(buttonIcon.onMouseLeave, events.onMouseLeave),\n    onMouseDown: emitThen(undefined, events.onMouseDown),\n    onMouseUp: emitThen(undefined, events.onMouseUp),\n  };\n\n  return (\n    <button\n      id={autoId.current}\n      ref={elRef}\n      type=\"button\"\n      className={className}\n      title={buttonIcon.title}\n      aria-label={buttonIcon.ariaLabel}\n      aria-disabled={isDisabled || undefined}\n      disabled={isDisabled}\n      tabIndex={buttonIcon.tabIndex}\n      {...mergedEvents}\n    >\n      <span className=\"d-inline-flex align-middle\">\n        <AlloyIcon icon={buttonIcon.icon} />\n      </span>\n      {buttonIcon.name ? (\n        <span className=\"px-2 align-middle\">{buttonIcon.name}</span>\n      ) : null}\n    </button>\n  );\n});\n\nexport default AlloyButtonIcon;\n","import React, {\n  useRef,\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport AlloyIcon, { IconObject } from \"./AlloyIcon.jsx\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/**\n * @typedef {Object} ButtonSubmitConfig\n * @property {string} name\n * @property {IconObject|{iconClass:string}} icon\n * @property {string} [id]\n * @property {string} [className]\n * @property {boolean} [disabled]\n * @property {boolean} [loading]\n * @property {string} [title]\n * @property {string} [ariaLabel]\n * @property {number} [tabIndex]\n * @property {(e:any,self:ButtonSubmitObject)=>void} [onClick]\n * @property {(e:any,self:ButtonSubmitObject)=>void} [onMouseDown]\n * @property {(e:any,self:ButtonSubmitObject)=>void} [onKeyDown]\n */\nexport class ButtonSubmitObject {\n  /**\n   * @param {ButtonSubmitConfig} buttonSubmit\n   */\n  constructor(buttonSubmit = {}) {\n    if (!buttonSubmit.name) {\n      throw new Error(\"ButtonSubmitObject requires `name`.\");\n    }\n    if (!buttonSubmit.icon) {\n      throw new Error(\"ButtonSubmitObject requires `icon`.\");\n    }\n\n    const normalizedIcon =\n      buttonSubmit.icon instanceof IconObject\n        ? buttonSubmit.icon\n        : new IconObject(buttonSubmit.icon);\n\n    this.id = buttonSubmit.id ?? generateId(\"btn-submit\");\n    this.name = buttonSubmit.name;\n    this.icon = normalizedIcon;\n\n    this.className = buttonSubmit.className ?? \"\";\n    this.disabled = !!buttonSubmit.disabled;\n    this.loading = !!buttonSubmit.loading;\n\n    this.title = buttonSubmit.title ?? buttonSubmit.name;\n    this.ariaLabel = buttonSubmit.ariaLabel ?? buttonSubmit.name;\n    this.tabIndex = buttonSubmit.tabIndex;\n\n    this.onClick = buttonSubmit.onClick;\n    this.onMouseDown = buttonSubmit.onMouseDown;\n    this.onKeyDown = buttonSubmit.onKeyDown;\n  }\n}\n\nexport const AlloyButtonSubmit = forwardRef(function AlloyButtonSubmit(\n  { buttonSubmit, output },\n  ref\n) {\n  if (!buttonSubmit || !(buttonSubmit instanceof ButtonSubmitObject)) {\n    throw new Error(\n      \"AlloyButtonSubmit requires `buttonSubmit` (ButtonSubmitObject instance).\"\n    );\n  }\n\n  const elRef = useRef(null);\n  const autoId = useRef(buttonSubmit.id);\n\n  // internal loading mirror, always synced from props\n  const [loading, setLoading] = useState(!!buttonSubmit.loading);\n\n  // firedRef prevents double-trigger while \"in flight\"\n  const firedRef = useRef(false);\n\n  // Sync internal loading with parent model every render when prop changes.\n  // ALSO: if parent sends loading=false, clear firedRef so the button is reusable.\n  useEffect(() => {\n    const nextLoading = !!buttonSubmit.loading;\n    setLoading(nextLoading);\n    if (!nextLoading) {\n      firedRef.current = false;\n    }\n  }, [buttonSubmit.loading]);\n\n  // compute disabled for the rendered <button>\n  const isDisabled = buttonSubmit.disabled || loading;\n\n  // Expose ref API\n  useImperativeHandle(\n    ref,\n    () => ({\n      el: elRef.current,\n      model: buttonSubmit,\n      focus: () => elRef.current?.focus(),\n      click: () => elRef.current?.click(),\n    }),\n    [buttonSubmit]\n  );\n\n  // arm() tries to move us into \"loading\". It returns true if we armed.\n  // This DOES mutate the model instance so output() sees loading:true,\n  // but actual rendering will still ultimately follow parent props.\n  // Parent is expected to flip loading:false later.\n  const arm = () => {\n    if (firedRef.current || isDisabled) return false;\n\n    firedRef.current = true;\n\n    // reflect \"in-flight\" on the current model snapshot\n    buttonSubmit.loading = true;\n    buttonSubmit.disabled = true;\n\n    // update our local mirror right away so UI shows spinner instantly,\n    // without waiting for parent to re-render with updated props.\n    setLoading(true);\n\n    return true;\n  };\n\n  // emit helper: fire parent output and model handler\n  const emit = (e, handler) => {\n    output?.(buttonSubmit, e);\n    handler?.(e, buttonSubmit);\n  };\n\n  const handleClick = (e) => {\n    if (arm()) emit(e, buttonSubmit.onClick);\n  };\n\n  const handleMouseDown = (e) => {\n    if (arm()) emit(e, buttonSubmit.onMouseDown);\n  };\n\n  const handleKeyDown = (e) => {\n    const key = e.key;\n    if (key === \"Enter\" || key === \" \") {\n      if (arm()) emit(e, buttonSubmit.onKeyDown);\n    }\n  };\n\n  // spinner shows while loading === true (either internal arm() OR parent prop)\n  const showIcon = loading;\n\n  return (\n    <button\n      id={autoId.current}\n      ref={elRef}\n      type=\"submit\"\n      className={buttonSubmit.className}\n      title={buttonSubmit.title}\n      aria-label={buttonSubmit.ariaLabel}\n      aria-busy={loading || undefined}\n      aria-disabled={isDisabled || undefined}\n      disabled={isDisabled}\n      tabIndex={buttonSubmit.tabIndex}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      onKeyDown={handleKeyDown}\n    >\n      {showIcon && (\n        <span className=\"d-inline-flex align-middle\">\n          <AlloyIcon icon={buttonSubmit.icon} />\n        </span>\n      )}\n\n      <span className={showIcon ? \"px-2 align-middle\" : \"align-middle\"}>\n        {buttonSubmit.name}\n      </span>\n\n      {loading ? (\n        <span className=\"ms-2 visually-hidden\" aria-live=\"polite\">\n          Loading…\n        </span>\n      ) : null}\n    </button>\n  );\n});\n","// AlloyInput.jsx\nimport React, { useState, useEffect } from \"react\";\nimport AlloyIcon, { IconObject } from \"./AlloyIcon.jsx\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/**\n * @typedef {Object} InputOption\n * @property {string} value   - submitted value\n * @property {string} label   - visible label\n */\n\n/**\n * @typedef {Object} InputConfig\n *\n * @property {string} name                   - REQUIRED. Field name / group name.\n * @property {string} [id]                   - Optional. DOM id. Auto-generated if missing.\n *\n * @property {string} [type]                 - Input type.\n *                                            Supported:\n *                                              \"text\" (default),\n *                                              \"email\",\n *                                              \"password\",\n *                                              \"number\",\n *                                              \"date\",\n *                                              \"textarea\",\n *                                              \"select\",\n *                                              \"radio\",\n *                                              \"checkbox\"\n *\n * @property {string} [label]                - Human label for the field or group\n * @property {string|string[]} [value]       - Initial value.\n *                                            For checkbox group: an array of checked values.\n *                                            Defaults to \"\" (or [] for checkbox).\n *\n * @property {string} [layout]               - Visual layout style:\n *                                              \"text\" (default),\n *                                              \"icon\" (icon adornment on the left),\n *                                              \"floating\" (Bootstrap floating label).\n *                                            If \"icon\" or \"floating\", an icon is required.\n *\n * @property {IconObject|{iconClass:string}} [icon]\n *                                            For \"icon\" or \"floating\" layout.\n *\n * @property {string} [placeholder]          - Placeholder text\n *\n * @property {boolean} [required]            - Mark as required. Default false.\n * @property {number}  [minLength]           - Minimum string length\n * @property {number}  [maxLength]           - Maximum string length\n * @property {number|string} [min]           - Minimum numeric/date\n * @property {number|string} [max]           - Maximum numeric/date\n * @property {string} [pattern]              - Regex pattern string (ex: \"^[0-9]+$\")\n *\n * @property {boolean} [passwordStrength]    - simple strong password rule:\n *                                            >=8 chars, upper+lower+digit.\n *\n * @property {string} [matchWith]            - (reserved for future cross-field validation)\n *\n * @property {string} [className]            - CSS classes to apply to the actual\n *                                            input/select/textarea control(s).\n *                                            Default:\n *                                              - \"form-control\" for most text-ish things\n *                                              - \"form-select\" for selects\n *                                              - \"form-check-input\" for radios/checkboxes\n *                                            We'll still append \" is-invalid\" if needed.\n *\n * @property {InputOption[]} [options]       - For select, radio, checkbox group.\n * @property {Array<Function>} [validators]  - (reserved for custom validators)\n *\n * @property {any} [rest]                    - Any other props the user wants to stash.\n */\nexport class InputObject {\n  /**\n   * @param {InputConfig} config\n   */\n  constructor(config = {}) {\n    const {\n      id,\n      name,\n      type = \"text\",\n      label = \"\",\n      value,\n      layout = \"text\",\n      icon,\n      placeholder = \"\",\n      required = false,\n      minLength,\n      maxLength,\n      min,\n      max,\n      pattern,\n      matchWith,\n      passwordStrength,\n      className, // NEW\n      options = [],\n      validators = [],\n      ...rest\n    } = config;\n\n    if (!name) {\n      throw new Error(\"InputObject requires `name`.\");\n    }\n\n    // If layout needs an icon, enforce icon presence\n    if ((layout === \"icon\" || layout === \"floating\") && !icon) {\n      throw new Error(\n        \"InputObject with layout='icon' or 'floating' requires `icon`.\"\n      );\n    }\n\n    // default starting value:\n    // - checkbox group => []\n    // - everything else => \"\"\n    let initialValue;\n    if (typeof value !== \"undefined\") {\n      initialValue = value;\n    } else if (type === \"checkbox\") {\n      initialValue = [];\n    } else {\n      initialValue = \"\";\n    }\n\n    // normalize icon into IconObject if provided\n    const normalizedIcon =\n      icon instanceof IconObject\n        ? icon\n        : icon\n        ? new IconObject(icon)\n        : undefined;\n\n    this.id = id ?? generateId(\"input\");\n    this.name = name;\n    this.type = type;\n    this.label = label;\n    this.value = initialValue;\n    this.layout = layout;\n    this.icon = normalizedIcon;\n    this.placeholder = placeholder;\n\n    // validation-ish config\n    this.required = !!required;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    this.min = min;\n    this.max = max;\n    this.pattern = pattern;\n    this.matchWith = matchWith;\n    this.passwordStrength = passwordStrength;\n\n    // classes for the control itself\n    // we do NOT include \"is-invalid\" here; the renderer appends that at runtime\n    if (typeof className === \"string\" && className.trim() !== \"\") {\n      this.className = className.trim();\n    } else {\n      // pick sensible bootstrap default per type\n      if (type === \"select\") {\n        this.className = \"form-select\";\n      } else if (type === \"radio\" || type === \"checkbox\") {\n        this.className = \"form-check-input\";\n      } else {\n        // text, textarea, password, number, date, etc.\n        this.className = \"form-control\";\n      }\n    }\n\n    this.options = options;\n    this.validators = validators;\n\n    // stash any additional props\n    Object.assign(this, rest);\n  }\n}\n\n/**\n * AlloyInput\n *\n * Renders based on a single InputObject.\n *\n * Props:\n *   - input: InputObject (required)\n *   - output?: (payload: {\n *        id: string,\n *        name: string,\n *        value: any,\n *        valid: boolean,\n *        error: boolean,\n *        errors: string[]\n *     }) => void\n *\n * Behavior:\n *   - Tracks local state `val`\n *   - On every change, runs validation and calls `output`\n *   - Shows inline error messages after the field has been blurred once\n *   - Supports:\n *        text-ish inputs,\n *        textarea,\n *        select,\n *        radio group,\n *        checkbox group,\n *        layout=icon,\n *        layout=floating\n *\n * Reactivity:\n *   - If parent changes validation rules (required, minLength, etc.) OR\n *     default value, we resync local state via useEffect instead of forcing\n *     a remount.\n *\n * Accessibility:\n *   - Adds aria-invalid on inputs with error after blur\n *   - Adds aria-live=\"polite\" to the error block\n */\nexport function AlloyInput({ input, output }) {\n  const [val, setVal] = useState(input.value);\n  const [touched, setTouched] = useState(false);\n\n  // whenever validation-relevant props or default value change,\n  // reset local state and clear touched/errors\n  useEffect(() => {\n    setVal(input.value);\n    setTouched(false);\n  }, [\n    input.value,\n    input.required,\n    input.minLength,\n    input.maxLength,\n    input.min,\n    input.max,\n    input.pattern,\n    input.passwordStrength,\n    input.matchWith,\n    input.type,\n    input.layout,\n    input.options\n  ]);\n\n  // ----- Validation -----\n  const validate = (candidate) => {\n    const errs = [];\n    const trimmed =\n      typeof candidate === \"string\" ? candidate.trim() : candidate;\n\n    // required\n    if (input.required) {\n      const isEmptyArray =\n        Array.isArray(trimmed) && trimmed.length === 0;\n      const isEmptyScalar =\n        !Array.isArray(trimmed) &&\n        (trimmed === \"\" || trimmed === false || trimmed == null);\n\n      if (isEmptyArray || isEmptyScalar) {\n        errs.push(\"This field is required.\");\n      }\n    }\n\n    // length rules (strings only)\n    if (\n      typeof trimmed === \"string\" &&\n      input.minLength != null &&\n      trimmed.length < input.minLength\n    ) {\n      errs.push(`Minimum length is ${input.minLength}`);\n    }\n    if (\n      typeof trimmed === \"string\" &&\n      input.maxLength != null &&\n      trimmed.length > input.maxLength\n    ) {\n      errs.push(`Maximum length is ${input.maxLength}`);\n    }\n\n    // pattern (regex)\n    if (\n      typeof trimmed === \"string\" &&\n      input.pattern &&\n      input.pattern !== \"\"\n    ) {\n      const re = new RegExp(input.pattern);\n      if (!re.test(trimmed)) {\n        errs.push(\"Invalid format.\");\n      }\n    }\n\n    // password strength\n    if (input.passwordStrength && typeof trimmed === \"string\") {\n      // >=8 chars, 1 lower, 1 upper, 1 digit\n      const strongEnough = /(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}/.test(\n        trimmed\n      );\n      if (!strongEnough) {\n        errs.push(\"Password is too weak.\");\n      }\n    }\n\n    // NOTE:\n    // - matchWith isn't enforced here (needs cross-field context)\n    // - validators[] is not invoked here yet (extensibility hook)\n\n    return errs;\n  };\n\n  const currentErrors = validate(val);\n  const showError = touched && currentErrors.length > 0;\n\n  // inline error block under the control\n  const errorBlock =\n    showError &&\n    currentErrors.length > 0 && (\n      <div className=\"mt-2\" aria-live=\"polite\">\n        {currentErrors.map((msg, i) => (\n          <div\n            key={i}\n            className=\"alert alert-danger py-2 mb-2\"\n            role=\"alert\"\n          >\n            {msg}\n          </div>\n        ))}\n      </div>\n    );\n\n  // Tell parent about changes\n  const emit = (nextVal) => {\n    const errs = validate(nextVal);\n    output?.({\n      id: input.id,\n      name: input.name,\n      value: nextVal,\n      valid: errs.length === 0,\n      error: errs.length > 0,\n      errors: errs\n    });\n  };\n\n  // shared onChange for most controls\n  const handleChange = (e) => {\n    const v = e.target.value;\n\n    if (input.type === \"checkbox\") {\n      // checkbox group → toggle array membership\n      const prev = Array.isArray(val) ? [...val] : [];\n      const idx = prev.indexOf(v);\n      if (idx > -1) {\n        prev.splice(idx, 1);\n      } else {\n        prev.push(v);\n      }\n      setVal(prev);\n      emit(prev);\n    } else if (input.type === \"radio\") {\n      setVal(v);\n      emit(v);\n    } else {\n      // text-ish, select, textarea, etc.\n      setVal(v);\n      emit(v);\n    }\n  };\n\n  // common props for single \"control\" element\n  const commonControlProps = {\n    id: input.id,\n    name: input.name,\n    placeholder: input.placeholder,\n    onBlur: () => setTouched(true),\n    \"aria-invalid\": showError || undefined\n  };\n\n  // utility: builds className with \" is-invalid\" when needed\n  const withInvalid = (base) =>\n    base + (showError ? \" is-invalid\" : \"\");\n\n  /* ---------------- RENDERERS ---------------- */\n\n  // textarea\n  const renderTextarea = () => (\n    <textarea\n      {...commonControlProps}\n      value={val}\n      onChange={handleChange}\n      className={withInvalid(input.className)}\n    />\n  );\n\n  // select dropdown\n  const renderSelect = () => (\n    <select\n      {...commonControlProps}\n      value={val}\n      onChange={handleChange}\n      className={withInvalid(input.className)}\n    >\n      {input.options.map((o) => (\n        <option key={o.value} value={o.value}>\n          {o.label}\n        </option>\n      ))}\n    </select>\n  );\n\n  // radio group\n  const renderRadioGroup = () => (\n    <div>\n      {input.label && (\n        <label className=\"form-label d-block mb-2\">{input.label}</label>\n      )}\n      {input.options.map((o, i) => (\n        <div className=\"form-check\" key={i}>\n          <input\n            type=\"radio\"\n            id={`${input.id}_${i}`}\n            className={withInvalid(input.className)}\n            name={input.name}\n            value={o.value}\n            checked={val === o.value}\n            onChange={handleChange}\n            onBlur={() => setTouched(true)}\n            aria-invalid={showError || undefined}\n          />\n          <label\n            className=\"form-check-label\"\n            htmlFor={`${input.id}_${i}`}\n          >\n            {o.label}\n          </label>\n        </div>\n      ))}\n      {errorBlock}\n    </div>\n  );\n\n  // checkbox group\n  const renderCheckboxGroup = () => (\n    <div>\n      {input.label && (\n        <label className=\"form-label d-block mb-2\">{input.label}</label>\n      )}\n      {input.options.map((o, i) => (\n        <div className=\"form-check\" key={i}>\n          <input\n            type=\"checkbox\"\n            id={`${input.id}_${i}`}\n            className={withInvalid(input.className)}\n            name={input.name}\n            value={o.value}\n            checked={Array.isArray(val) && val.includes(o.value)}\n            onChange={handleChange}\n            onBlur={() => setTouched(true)}\n            aria-invalid={showError || undefined}\n          />\n          <label\n            className=\"form-check-label\"\n            htmlFor={`${input.id}_${i}`}\n          >\n            {o.label}\n          </label>\n        </div>\n      ))}\n      {errorBlock}\n    </div>\n  );\n\n  // default text-ish input (text, email, password, number, date, etc.)\n  const renderTextLike = () => (\n    <input\n      {...commonControlProps}\n      type={input.type}\n      value={val}\n      onChange={handleChange}\n      className={withInvalid(input.className)}\n    />\n  );\n\n  // pick correct control renderer\n  const renderControl = () => {\n    switch (input.type) {\n      case \"textarea\":\n        return renderTextarea();\n      case \"select\":\n        return renderSelect();\n      case \"radio\":\n        return renderRadioGroup();\n      case \"checkbox\":\n        return renderCheckboxGroup();\n      default:\n        return renderTextLike();\n    }\n  };\n\n  /* ---------------- LAYOUT VARIANTS ---------------- */\n\n  // layout: \"floating\"\n  if (input.layout === \"floating\") {\n    return (\n      <div className=\"mb-3\">\n        <div className=\"form-floating\">\n          {renderControl()}\n          <label htmlFor={input.id}>\n            {input.icon && <AlloyIcon icon={input.icon} />}\n            {input.icon && \"\\u00A0\"}\n            {input.label}\n          </label>\n        </div>\n        {/* error should appear below for floating */}\n        {!(input.type === \"radio\" || input.type === \"checkbox\") &&\n          errorBlock}\n      </div>\n    );\n  }\n\n  // layout: \"icon\" (input-group with left icon)\n  if (input.layout === \"icon\") {\n    return (\n      <div className=\"mb-3\">\n        {input.label && (\n          <label htmlFor={input.id} className=\"form-label\">\n            {input.label}\n          </label>\n        )}\n\n        <div className=\"input-group\">\n          <span className=\"input-group-text\">\n            <AlloyIcon icon={input.icon} />\n          </span>\n\n          {/* we only want to override the control's className inside\n             * input-group for non-group types; for radios/checkboxes,\n             * we already render groups differently.\n             */}\n          {[\"radio\", \"checkbox\"].includes(input.type) ? (\n            renderControl()\n          ) : (\n            <input\n              {...commonControlProps}\n              type={input.type}\n              value={val}\n              onChange={handleChange}\n              className={withInvalid(input.className)}\n            />\n          )}\n        </div>\n\n        {/* radio/checkbox already append errorBlock internally */}\n        {!(input.type === \"radio\" || input.type === \"checkbox\") &&\n          errorBlock}\n      </div>\n    );\n  }\n\n  // layout: default \"text\"\n  return (\n    <div className=\"mb-3\">\n      {[\"text\", \"textarea\", \"number\", \"email\", \"password\", \"date\"].includes(\n        input.type\n      ) &&\n        input.label && (\n          <label htmlFor={input.id} className=\"form-label\">\n            {input.label}\n          </label>\n        )}\n\n      {renderControl()}\n\n      {/* radio/checkbox already handled errorBlock */}\n      {!(input.type === \"radio\" || input.type === \"checkbox\") &&\n        errorBlock}\n    </div>\n  );\n}\n\nexport default AlloyInput;\n","// src/components/tissue/AlloyLinkBar.jsx\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport AlloyLink, { LinkObject } from \"../cell/AlloyLink.jsx\";\nimport AlloyLinkIcon, { LinkIconObject } from \"../cell/AlloyLinkIcon.jsx\";\nimport AlloyLinkLogo, { LinkLogoObject } from \"../cell/AlloyLinkLogo.jsx\";\n\nimport { generateId, TagObject } from \"../../utils/idHelper.js\";\n\n/**\n * @typedef {Object} LinkBarConfig\n * @property {string} [id]                - Optional DOM id for the <ul>. Auto-generated if missing.\n * @property {string} [className]         - Optional. Classes for the <ul> container.\n *                                          Defaults to \"d-flex justify-content-center\".\n * @property {TagObject|Object} [title]   - Optional. Bar heading.\n *                                          Can be:\n *                                            - instance of TagObject\n *                                            - plain object { id?, name?, className? }\n *                                            - or undefined\n *                                          We'll always store a TagObject instance.\n *                                          If title.name is \"\", AlloyLinkBar will not render it.\n * @property {string} [type]              - Which link flavor this bar renders.\n *                                          \"AlloyLink\" | \"AlloyLinkIcon\" | \"AlloyLinkLogo\"\n *                                          Defaults to \"AlloyLink\".\n * @property {string} [linkClass]         - Class name applied to each <li>.\n *                                          Defaults to \"nav-item\".\n * @property {Array<any>} [links]         - Array of link models or link-like configs.\n *                                          For each element:\n *                                            - If already the correct instance, keep it.\n *                                            - Else we'll wrap it with new LinkObject / LinkIconObject / LinkLogoObject.\n * @property {string} [selected]          - Class string applied to the active/selected item.\n *                                          Defaults to \"active\".\n */\n\n/**\n * LinkBarObject\n *\n * This is the data model for AlloyLinkBar.\n *\n * Responsibilities:\n *  - Validate / default its OWN fields (id, className, type, linkClass, selected).\n *  - Normalize `title` so it's ALWAYS a TagObject instance.\n *  - Normalize `links` so they're ALWAYS instances of the correct link model\n *    based on `this.type`.\n *\n * It does NOT do UI work (no selection state, no onClick wrapping).\n * AlloyLinkBar (the component) handles interaction.\n */\nexport class LinkBarObject {\n  /**\n   * @param {LinkBarConfig} bar\n   */\n  constructor(bar = {}) {\n    // --- basic fields for THIS object ---\n    this.id = bar.id ?? generateId(\"linkBar\");\n    this.className = bar.className ?? \"d-flex justify-content-center\";\n    this.type = bar.type ?? \"AlloyLink\";\n    this.linkClass = bar.linkClass ?? \"nav-item\";\n    this.selected = bar.selected ?? \"active\";\n\n    // --- normalize title into a TagObject instance ---\n    // If caller passed:\n    //   - TagObject → keep it\n    //   - plain object → wrap it\n    //   - nothing → make empty TagObject { name:\"\" } so render logic can safely read .name\n    if (bar.title instanceof TagObject) {\n      this.title = bar.title;\n    } else if (bar.title) {\n      this.title = new TagObject(bar.title);\n    } else {\n      this.title = new TagObject({}); // name defaults to \"\" inside TagObject\n    }\n\n    // --- normalize links into the proper link model instances ---\n    const rawLinks = Array.isArray(bar.links) ? bar.links : [];\n\n    if (this.type === \"AlloyLinkIcon\") {\n      // Expect LinkIconObject or plain config usable by new LinkIconObject\n      this.links = rawLinks.map((item) =>\n        item instanceof LinkIconObject ? item : new LinkIconObject(item)\n      );\n    } else if (this.type === \"AlloyLinkLogo\") {\n      // Expect LinkLogoObject or plain config usable by new LinkLogoObject\n      this.links = rawLinks.map((item) =>\n        item instanceof LinkLogoObject ? item : new LinkLogoObject(item)\n      );\n    } else {\n      // Default \"AlloyLink\"\n      this.links = rawLinks.map((item) =>\n        item instanceof LinkObject ? item : new LinkObject(item)\n      );\n    }\n  }\n}\n\n/**\n * cloneWithActiveAndClick\n *\n * We never mutate the user's original link model.\n * We instead create a *new* model instance of the SAME CLASS with:\n *   - updated `active` (only if this item is selected)\n *   - wrapped `onClick` so we update local selection, then call user's original handler\n */\nfunction cloneWithActiveAndClick(item, injectedActiveClass, isSelected, wrapClickFn) {\n  const activeClass = isSelected ? injectedActiveClass : \"\";\n\n  if (item instanceof LinkObject) {\n    return new LinkObject({\n      id: item.id,\n      name: item.name,\n      href: item.href,\n      className: item.className,\n      active: activeClass,\n      target: item.target,\n      rel: item.rel,\n      onClick: wrapClickFn,\n      title: item.title\n    });\n  }\n\n  if (item instanceof LinkIconObject) {\n    return new LinkIconObject({\n      id: item.id,\n      href: item.href,\n      icon: item.icon,\n      name: item.name,\n      className: item.className,\n      active: activeClass,\n      target: item.target,\n      rel: item.rel,\n      onClick: wrapClickFn,\n      title: item.title\n    });\n  }\n\n  if (item instanceof LinkLogoObject) {\n    return new LinkLogoObject({\n      id: item.id,\n      name: item.name,\n      href: item.href,\n      logo: item.logo,\n      width: item.width,\n      height: item.height,\n      logoAlt: item.logoAlt,\n      className: item.className,\n      active: activeClass,\n      target: item.target,\n      rel: item.rel,\n      onClick: wrapClickFn,\n      title: item.title\n    });\n  }\n\n  // If it's some unknown thing, just return it as-is.\n  return item;\n}\n\n/**\n * AlloyLinkBar\n *\n * Props:\n *   - linkBar: LinkBarObject (required)\n *\n * Renders:\n *   [optional heading if linkBar.title.name is truthy]\n *   <ul id={linkBar.id} className={linkBar.className}>\n *     <li className={linkBar.linkClass}>\n *       <AlloyLink / AlloyLinkIcon / AlloyLinkLogo />\n *     </li>\n *   </ul>\n *\n * Behavior:\n *   - Tracks which link is \"selected\"\n *   - Injects linkBar.selected into just that one cloned link as `active`\n *   - Wraps each link's onClick to update selectedId first, then call the original handler\n */\nexport function AlloyLinkBar({ linkBar }) {\n  if (!linkBar || !(linkBar instanceof LinkBarObject)) {\n    throw new Error(\"AlloyLinkBar requires `linkBar` (LinkBarObject instance).\");\n  }\n\n  // Stable UL id, so React doesn't reassign DOM ids on rerender\n  const ulIdRef = useRef(linkBar.id);\n\n  // Track which link is currently \"active\"\n  const [selectedId, setSelectedId] = useState(\"\");\n\n  // Reset selection when a whole new LinkBarObject is passed in\n  useEffect(() => {\n    setSelectedId(\"\");\n  }, [linkBar]);\n\n  // Optional title. We render ONLY if there's a non-empty .name\n  const Title = () =>\n    linkBar.title && linkBar.title.name ? (\n      <div\n        id={linkBar.title.id}\n        className={linkBar.title.className}\n      >\n        {linkBar.title.name}\n      </div>\n    ) : null;\n\n  // wrap user's onClick:\n  // 1. mark as selected\n  // 2. call original onClick if present\n  function wrapClick(item) {\n    const original = item.onClick;\n    return (e) => {\n      const nextId = item.id || `${item.href || \"\"}-${item.name || \"\"}`;\n      setSelectedId(nextId);\n      original?.(e);\n    };\n  }\n\n  function renderLinks() {\n    return (\n      <ul id={ulIdRef.current} className={linkBar.className}>\n        {linkBar.links.map((item, idx) => {\n          const isSelected = (item?.id ?? \"\") === selectedId;\n\n          // clone the model so we can inject active + wrapped onClick\n          const cloned = cloneWithActiveAndClick(\n            item,\n            linkBar.selected,\n            isSelected,\n            wrapClick(item)\n          );\n\n          switch (linkBar.type) {\n            case \"AlloyLink\":\n              if (!(cloned instanceof LinkObject)) {\n                throw new Error(\n                  \"AlloyLinkBar (type='AlloyLink') expects each link to be a LinkObject instance.\"\n                );\n              }\n              return (\n                <li\n                  key={(item?.id ?? idx) + \"-li\"}\n                  className={linkBar.linkClass}\n                >\n                  <AlloyLink link={cloned} />\n                </li>\n              );\n\n            case \"AlloyLinkIcon\":\n              if (!(cloned instanceof LinkIconObject)) {\n                throw new Error(\n                  \"AlloyLinkBar (type='AlloyLinkIcon') expects each link to be a LinkIconObject instance.\"\n                );\n              }\n              return (\n                <li\n                  key={(item?.id ?? idx) + \"-li\"}\n                  className={linkBar.linkClass}\n                >\n                  <AlloyLinkIcon linkIcon={cloned} />\n                </li>\n              );\n\n            case \"AlloyLinkLogo\":\n              if (!(cloned instanceof LinkLogoObject)) {\n                throw new Error(\n                  \"AlloyLinkBar (type='AlloyLinkLogo') expects each link to be a LinkLogoObject instance.\"\n                );\n              }\n              return (\n                <li\n                  key={(item?.id ?? idx) + \"-li\"}\n                  className={linkBar.linkClass}\n                >\n                  <AlloyLinkLogo linkLogo={cloned} />\n                </li>\n              );\n\n            default:\n              throw new Error(\n                `Unsupported linkBar.type \"${linkBar.type}\".`\n              );\n          }\n        })}\n      </ul>\n    );\n  }\n\n  return (\n    <nav data-type={linkBar.type}>\n      <Title />\n      {renderLinks()}\n    </nav>\n  );\n}\n\nexport default AlloyLinkBar;\n","// src/components/tissue/AlloyButtonBar.jsx\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport AlloyButton, { ButtonObject } from \"../cell/AlloyButton.jsx\";\nimport AlloyButtonIcon, { ButtonIconObject } from \"../cell/AlloyButtonIcon.jsx\";\n\nimport { generateId, TagObject } from \"../../utils/idHelper.js\";\n\n/**\n * @typedef {Object} ButtonBarConfig\n * @property {string} [id]                   - Optional DOM id for the <ul>. Auto-generated if missing.\n * @property {string} [className]            - Class names for the <ul> wrapper of the bar.\n *                                             Defaults to \"d-flex justify-content-center\".\n * @property {TagObject|Object} [title]      - Optional heading object for the bar.\n *                                             Can be:\n *                                               - instance of TagObject\n *                                               - plain { id?, name?, className? }\n *                                               - or undefined\n *                                             We will ALWAYS store a TagObject.\n *                                             If its `.name` is \"\", UI won't render it.\n * @property {string} [type]                 - Which flavor of buttons we render:\n *                                             \"AlloyButton\" | \"AlloyButtonIcon\"\n *                                             Defaults to \"AlloyButton\".\n * @property {string} [buttonClass]          - Class applied to each <li>.\n *                                             Defaults to \"nav-item\".\n * @property {Array<any>} [buttons]          - Array of button configs or already-constructed button objects.\n *                                             We will ensure each entry becomes the right model:\n *                                               - ButtonObject      (for AlloyButton)\n *                                               - ButtonIconObject  (for AlloyButtonIcon)\n * @property {string} [selected]             - CSS class to inject into the active/selected button's `active`.\n *                                             Defaults to \"active\".\n */\n\n/**\n * ButtonBarObject\n *\n * Normalizes config for AlloyButtonBar.\n * Responsibilities:\n *  - generate id and apply defaults for its own scalar fields\n *  - normalize `title` into a TagObject\n *  - normalize `buttons` array into ButtonObject / ButtonIconObject instances\n *    based on this.type\n *\n * No UI logic lives here.\n */\nexport class ButtonBarObject {\n  /**\n   * @param {ButtonBarConfig} bar\n   */\n  constructor(bar = {}) {\n    // Unique id for the <ul> container\n    this.id = bar.id ?? generateId(\"buttonBar\");\n\n    // ClassName for the <ul> container\n    this.className = bar.className ?? \"d-flex justify-content-center\";\n\n    // Which \"flavor\" of button row we are:\n    //   \"AlloyButton\" | \"AlloyButtonIcon\"\n    this.type = bar.type ?? \"AlloyButton\";\n\n    // Class to apply to each <li>\n    this.buttonClass = bar.buttonClass ?? \"nav-item\";\n\n    // Class to inject on the active/selected button (into its .active field)\n    this.selected = bar.selected ?? \"active\";\n\n    // Normalize title into TagObject\n    if (bar.title instanceof TagObject) {\n        this.title = bar.title;\n    } else if (bar.title) {\n        this.title = new TagObject(bar.title);\n    } else {\n        this.title = new TagObject({}); // defaults to name:\"\" so UI can safely check .name\n    }\n\n    // Normalize buttons\n    const rawButtons = Array.isArray(bar.buttons) ? bar.buttons : [];\n\n    if (this.type === \"AlloyButtonIcon\") {\n      // We expect each button to become a ButtonIconObject\n      this.buttons = rawButtons.map((b) =>\n        b instanceof ButtonIconObject ? b : new ButtonIconObject(b)\n      );\n    } else {\n      // Default \"AlloyButton\"\n      this.buttons = rawButtons.map((b) =>\n        b instanceof ButtonObject ? b : new ButtonObject(b)\n      );\n    }\n  }\n}\n\n/**\n * cloneWithActiveAndWrapOutput\n *\n * We don't mutate the original button model. We create a *new* instance\n * of the same class (ButtonObject or ButtonIconObject), but with:\n *  - updated `active` (only if selected)\n *  - wrapped handlers so we can emit up (`output`) AND maintain selection\n *\n * We return:\n *   { model: <newBtnInstance>, onAnyEvent: <event forwarder> }\n *\n * The calling component then wires that handler into the rendered component's\n * `output` prop.\n */\nfunction cloneWithActiveAndWrapOutput(\n  btnModel,\n  injectedActiveClass,\n  isSelected,\n  setSelectedId,\n  parentOutput\n) {\n  const activeClass = isSelected ? injectedActiveClass : \"\";\n\n  // We'll wrap all events going out of the child component.\n  // parentOutput(self, e) mirrors what AlloyButtonBar previously did.\n  function passUp(self, e) {\n    // If it's a click, mark this button selected\n    if (e?.type === \"click\") {\n      const nextId = self?.id ?? \"\";\n      setSelectedId(nextId);\n    }\n    parentOutput?.(self, e);\n  }\n\n  // Rebuild the model with the same fields, but replaced `active`.\n  // NOTE: We do NOT copy runtime-only stuff like \"internal hover state\".\n  //       We DO copy the user's callbacks like onClick, onKeyDown, etc.\n  if (btnModel instanceof ButtonObject) {\n    const cloned = new ButtonObject({\n      id: btnModel.id,\n      name: btnModel.name,\n      className: btnModel.className,\n      active: activeClass,\n      disabled: btnModel.disabled,\n      title: btnModel.title,\n      ariaLabel: btnModel.ariaLabel,\n      tabIndex: btnModel.tabIndex,\n      onClick: btnModel.onClick,\n      onKeyDown: btnModel.onKeyDown,\n      onKeyUp: btnModel.onKeyUp,\n      onFocus: btnModel.onFocus,\n      onBlur: btnModel.onBlur,\n      onMouseEnter: btnModel.onMouseEnter,\n      onMouseLeave: btnModel.onMouseLeave,\n    });\n\n    return { model: cloned, onAnyEvent: passUp };\n  }\n\n  if (btnModel instanceof ButtonIconObject) {\n    const cloned = new ButtonIconObject({\n      id: btnModel.id,\n      name: btnModel.name,\n      icon: btnModel.icon, // already an IconObject (normalized in ButtonIconObject)\n      className: btnModel.className,\n      active: activeClass,\n      disabled: btnModel.disabled,\n      title: btnModel.title,\n      ariaLabel: btnModel.ariaLabel,\n      tabIndex: btnModel.tabIndex,\n      onClick: btnModel.onClick,\n      onKeyDown: btnModel.onKeyDown,\n      onKeyUp: btnModel.onKeyUp,\n      onFocus: btnModel.onFocus,\n      onBlur: btnModel.onBlur,\n      onMouseEnter: btnModel.onMouseEnter,\n      onMouseLeave: btnModel.onMouseLeave,\n    });\n\n    return { model: cloned, onAnyEvent: passUp };\n  }\n\n  // Fallback (shouldn't happen in normal usage)\n  return { model: btnModel, onAnyEvent: passUp };\n}\n\n/**\n * AlloyButtonBar\n *\n * Props:\n *  - buttonBar: ButtonBarObject (required)\n *  - output?: (self: ButtonObject|ButtonIconObject, e?: any) => void\n *\n * Behavior:\n *  - Renders optional title if buttonBar.title.name is truthy\n *  - Renders a <ul> of buttons (AlloyButton or AlloyButtonIcon depending on buttonBar.type)\n *  - Tracks which button is \"selected\" in local state\n *  - Injects `buttonBar.selected` class name into that selected button's `active`\n *    via a cloned model\n *  - Forwards all child events through `output`, and updates the selectedId\n *    on click\n */\nexport function AlloyButtonBar({ buttonBar, output }) {\n  if (!buttonBar || !(buttonBar instanceof ButtonBarObject)) {\n    throw new Error(\n      \"AlloyButtonBar requires `buttonBar` (ButtonBarObject instance).\"\n    );\n  }\n\n  // Stable <ul> id\n  const ulIdRef = useRef(buttonBar.id);\n\n  // Track which button is selected (visually \"active\")\n  const [selectedId, setSelectedId] = useState(\"\");\n\n  // Whenever an entirely new ButtonBarObject is passed in,\n  // reset local selection state.\n  useEffect(() => {\n    setSelectedId(\"\");\n  }, [buttonBar]);\n\n  // Optional title heading:\n  // Only render if buttonBar.title.name is truthy.\n  const Title = () =>\n    buttonBar.title && buttonBar.title.name ? (\n      <div id={buttonBar.title.id} className={buttonBar.title.className}>\n        {buttonBar.title.name}\n      </div>\n    ) : null;\n\n  // Render helpers for the 2 variants.\n  function renderAlloyButtonList() {\n    return (\n      <ul id={ulIdRef.current} className={buttonBar.className}>\n        {buttonBar.buttons.map((btnModel, idx) => {\n          if (!(btnModel instanceof ButtonObject)) {\n            throw new Error(\n              \"AlloyButtonBar (type='AlloyButton') expects ButtonObject items.\"\n            );\n          }\n\n          const isSelected = (btnModel?.id ?? \"\") === selectedId;\n\n          // clone model with active class and wrapped output\n          const { model: clonedBtn, onAnyEvent } = cloneWithActiveAndWrapOutput(\n            btnModel,\n            buttonBar.selected,\n            isSelected,\n            setSelectedId,\n            output\n          );\n\n          return (\n            <li\n              key={(btnModel?.id ?? idx) + \"-li\"}\n              className={buttonBar.buttonClass}\n            >\n              <AlloyButton button={clonedBtn} output={onAnyEvent} />\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  function renderAlloyButtonIconList() {\n    return (\n      <ul id={ulIdRef.current} className={buttonBar.className}>\n        {buttonBar.buttons.map((btnModel, idx) => {\n          if (!(btnModel instanceof ButtonIconObject)) {\n            throw new Error(\n              \"AlloyButtonBar (type='AlloyButtonIcon') expects ButtonIconObject items.\"\n            );\n          }\n\n          const isSelected = (btnModel?.id ?? \"\") === selectedId;\n\n          const { model: clonedBtn, onAnyEvent } = cloneWithActiveAndWrapOutput(\n            btnModel,\n            buttonBar.selected,\n            isSelected,\n            setSelectedId,\n            output\n          );\n\n          return (\n            <li\n              key={(btnModel?.id ?? idx) + \"-li\"}\n              className={buttonBar.buttonClass}\n            >\n              <AlloyButtonIcon buttonIcon={clonedBtn} output={onAnyEvent} />\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  // Decide which list to render based on buttonBar.type\n  function renderBody() {\n    switch (buttonBar.type) {\n      case \"AlloyButtonIcon\":\n        return renderAlloyButtonIconList();\n      case \"AlloyButton\":\n      default:\n        return renderAlloyButtonList();\n    }\n  }\n\n  return (\n    <nav data-type={buttonBar.type}>\n      <Title />\n      {renderBody()}\n    </nav>\n  );\n}\n\nexport default AlloyButtonBar;\n","// src/components/tissue/AlloyNavBar.jsx\n\nimport React, { useRef } from \"react\";\n\nimport AlloyLinkLogo, { LinkLogoObject } from \"../cell/AlloyLinkLogo.jsx\";\nimport AlloyLinkBar, { LinkBarObject } from \"./AlloyLinkBar.jsx\";\n\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/**\n * @typedef {Object} NavBarConfig\n *\n * @property {string} [id]\n *    Optional DOM id for the <nav>. Will be auto-generated if missing.\n *\n * @property {string} [className]\n *    Optional className for the outer <nav>.\n *    Defaults to Bootstrap-ish navbar styling.\n *\n * @property {LinkLogoObject|Object} [logo]\n *    Brand / home link at the left.\n *    Must ultimately become a LinkLogoObject.\n *    Callers can pass either:\n *      - new LinkLogoObject({...})\n *      - plain { href, logo, name, ... } and we'll wrap it.\n *\n * @property {LinkBarObject|Object} [linkBar]\n *    The right-side nav links.\n *    Must become a LinkBarObject.\n *    Callers can pass either:\n *      - new LinkBarObject({...})\n *      - plain config:\n *          {\n *            type: \"AlloyLink\" | \"AlloyLinkIcon\" | \"AlloyLinkLogo\",\n *            className,\n *            linkClass,\n *            selected,\n *            title,\n *            links: [...]\n *          }\n *    We'll wrap it with new LinkBarObject(...) which will handle hydration\n *    of links, normalize `title` into TagObject, etc.\n */\n\n/**\n * NavBarObject\n *\n * This is the data model for AlloyNavBar.\n * Responsibilities:\n *  - normalize config\n *  - generate stable id\n *  - ensure `logo` is a LinkLogoObject\n *  - ensure `linkBar` is a LinkBarObject\n *\n * After this constructor runs, AlloyNavBar can trust:\n *   navBar.id is a string\n *   navBar.className is a string\n *   navBar.logo is a LinkLogoObject\n *   navBar.linkBar is a LinkBarObject\n */\nexport class NavBarObject {\n  /**\n   * @param {NavBarConfig} nav = {}\n   */\n  constructor(nav = {}) {\n    // 1. id for the <nav> element\n    this.id = nav.id ?? generateId(\"navbar\");\n\n    // 2. className for the outer navbar\n    this.className =\n      nav.className ?? \"navbar navbar-expand-lg navbar-light bg-light\";\n\n    // 3. normalize logo into LinkLogoObject\n    //    If caller passed an instance, keep it. Otherwise wrap the plain object.\n    //    We provide a sane default if nothing was passed at all so the navbar\n    //    is renderable even with an empty config.\n    if (nav.logo instanceof LinkLogoObject) {\n      this.logo = nav.logo;\n    } else {\n      const fallbackLogoConfig = nav.logo ?? {\n        href: \"/\",\n        logo: \"/logos/alloy.svg\",\n        name: \"Alloy\",\n        width: 110,\n        height: 28,\n        logoAlt: \"Alloy\",\n        className: \"navbar-brand d-flex align-items-center gap-2\",\n      };\n      this.logo = new LinkLogoObject(fallbackLogoConfig);\n    }\n\n    // 4. normalize linkBar into LinkBarObject\n    //    If caller passed an instance, keep it.\n    //    Otherwise wrap the plain config in new LinkBarObject(...).\n    //\n    //    IMPORTANT:\n    //    LinkBarObject itself:\n    //      - generates its own id\n    //      - ensures `title` is TagObject\n    //      - ensures `links[]` are hydrated into LinkObject/LinkIconObject/LinkLogoObject\n    //\n    //    So we just pass through whatever plain config we were given, with\n    //    some defaults for navbar layout.\n    if (nav.linkBar instanceof LinkBarObject) {\n      this.linkBar = nav.linkBar;\n    } else {\n      const rawLinkBar = nav.linkBar ?? {};\n\n      this.linkBar = new LinkBarObject({\n        // let LinkBarObject generate its own id if missing\n        id: rawLinkBar.id,\n        className:\n          rawLinkBar.className ??\n          \"navbar-nav ms-auto mb-2 mb-lg-0 gap-2\",\n\n        // Nav bar headings are usually not shown, but we still pass something\n        // valid for `title`. If name is \"\", AlloyLinkBar won't render it.\n        title: rawLinkBar.title ?? {\n          name: \"\",\n          className: \"text-center fw-semibold mb-2\",\n        },\n\n        type: rawLinkBar.type ?? \"AlloyLink\",\n\n        linkClass: rawLinkBar.linkClass ?? \"nav-item\",\n\n        selected: rawLinkBar.selected ?? \"active\",\n\n        // Let LinkBarObject do the heavy lifting:\n        links: Array.isArray(rawLinkBar.links) ? rawLinkBar.links : [],\n      });\n    }\n  }\n}\n\n/**\n * AlloyNavBar\n *\n * Renders a responsive Bootstrap-like navbar with:\n *   - brand/logo on the left (AlloyLinkLogo)\n *   - a collapse toggler\n *   - a collapsible area on the right that renders AlloyLinkBar\n *\n * Props:\n *   - navBar: NavBarObject (required)\n *\n * Behavior:\n *   - Uses navBar.id as the base id\n *   - Builds a derived collapse id (for aria-controls/data-bs-target)\n */\nexport function AlloyNavBar({ navBar }) {\n  if (!navBar || !(navBar instanceof NavBarObject)) {\n    throw new Error(\"AlloyNavBar requires `navBar` (NavBarObject instance).\");\n    // We assume upstream ALWAYS constructs new NavBarObject(navConfig)\n    // so React component never has to repair anything.\n  }\n\n  const navIdRef = useRef(navBar.id);\n  const collapseId = `${navIdRef.current}-collapse`;\n\n  return (\n    <nav id={navIdRef.current} className={navBar.className}>\n      <div className=\"container-fluid\">\n        {/* Brand / Logo */}\n        <AlloyLinkLogo linkLogo={navBar.logo} />\n\n        {/* Mobile toggler */}\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target={`#${collapseId}`}\n          aria-controls={collapseId}\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n\n        {/* Collapsible nav links */}\n        <div\n          className=\"position-relative navbar-collapse collapse justify-content-end\"\n          id={collapseId}\n        >\n          <AlloyLinkBar linkBar={navBar.linkBar} />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default AlloyNavBar;\n","// src/components/tissue/AlloyTable.jsx\nimport React, { useMemo, useRef, useState } from \"react\";\nimport AlloyIcon, { IconObject } from \"../cell/AlloyIcon.jsx\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* -------------------------------------------\n * Small util: capitalize column header labels\n * ----------------------------------------- */\nfunction capitalize(s) {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/* -------------------------------------------\n * @typedef {Object} TableRow\n * @property {string|number} [id]\n *    Row identifier. Emitted in output() when this row is clicked.\n *    All other keys on the row will be rendered as <td> cells.\n *\n * Example row:\n * { id: \"u1\", name: \"Alice\", email: \"a@example.com\" }\n *\n * -------------------------------------------\n * @typedef {Object} TableConfig\n *\n * @property {string}        [id]\n *    Optional. DOM id for <table>. If missing, we'll generate via generateId(\"table\").\n *\n * @property {string}        [className]\n *    Optional. Class for the <table>.\n *    Defaults to \"table\".\n *\n * @property {string}        [name]\n *    Optional. Name/label for the table, rendered in <caption>.\n *    Defaults to \"table\".\n *\n * @property {TableRow[]}    [rows]\n *    Optional. Array of plain row objects. We don't transform them;\n *    we just render keys from the first row as columns.\n *\n * @property {IconObject|{iconClass:string,id?:string}} [icon]\n *    Optional. IconObject (or plain { iconClass }) rendered in the first column\n *    of every row. Defaults to a \"user\" icon.\n *\n * @property {IconObject|{iconClass:string,id?:string}} [sort]\n *    Optional. IconObject (or plain { iconClass }) used to show sort direction\n *    in the column headers. Defaults to a \"arrow-down\" icon.\n *\n * After construction, AlloyTable can trust:\n *  - table.id is a string\n *  - table.className is string\n *  - table.name is string\n *  - table.rows is an array\n *  - table.icon is an IconObject\n *  - table.sort is an IconObject\n * ----------------------------------------- */\n\n/**\n * TableObject\n *\n * Data model for AlloyTable.\n * Owns:\n *  - id generation\n *  - default className\n *  - default icons\n *  - shallow copy of rows\n *\n * Does NOT:\n *  - sort/filter rows\n *  - emit events\n *  - keep UI sort state\n */\nexport class TableObject {\n  /**\n   * @param {TableConfig} table\n   */\n  constructor(table = {}) {\n    // 1. id\n    this.id = table.id ?? generateId(\"table\");\n\n    // 2. table styling + label\n    this.className = table.className ?? \"table\";\n    this.name = table.name ?? \"table\";\n\n    // 3. rows (shallow copy to avoid accidental external mutation refs)\n    this.rows = Array.isArray(table.rows) ? table.rows.slice() : [];\n\n    // 4. icons\n    // default row icon\n    const fallbackRowIcon = { iconClass: \"fa-solid fa-user\" };\n    // default sort icon\n    const fallbackSortIcon = { iconClass: \"fa-solid fa-arrow-down\" };\n\n    const normalizedIcon =\n      table.icon instanceof IconObject\n        ? table.icon\n        : new IconObject(table.icon || fallbackRowIcon);\n\n    const normalizedSortIcon =\n      table.sort instanceof IconObject\n        ? table.sort\n        : new IconObject(table.sort || fallbackSortIcon);\n\n    this.icon = normalizedIcon;\n    this.sort = normalizedSortIcon;\n  }\n}\n\n/* -------------------------------------------\n * Internal helper: derive table headers\n * We treat keys of the first row as the canonical column order.\n * We intentionally skip \"id\" so \"id\" isn't rendered as a normal column.\n * ----------------------------------------- */\nfunction getHeaderKeys(rows) {\n  if (!rows || rows.length === 0) return [];\n  return Object.keys(rows[0]).filter((k) => k !== \"id\");\n}\n\n/* -------------------------------------------\n * AlloyTable\n *\n * Renders:\n *  <table>\n *    <caption>\n *    <thead> clickable headers (sort hint only; parent does real sorting)\n *    <tbody> rows (clickable rows)\n *\n * Props:\n *  - table: TableObject (required)\n *  - output?: (payload: {\n *        type: \"column\",\n *        name: string,   // column key clicked\n *        dir: \"asc\"|\"desc\"\n *     } | {\n *        type: \"row\",\n *        id: string|number|undefined\n *     }) => void\n *\n * Behavior:\n *  - Clicking a header toggles local sort state {col,dir} and emits {type:\"column\"...}\n *    so parent/server can fetch real sorted data.\n *  - Clicking a row emits {type:\"row\", id: row.id}\n *  - We do NOT mutate table.rows or reorder them ourselves.\n *  - We do NOT transform table.icon / table.sort here. That's the model's job.\n * ----------------------------------------- */\nexport function AlloyTable({ table, output }) {\n  if (!table || !(table instanceof TableObject)) {\n    throw new Error(\"AlloyTable requires `table` (TableObject instance).\");\n  }\n\n  const tableIdRef = useRef(table.id);\n\n  // local-only UI state for current \"sort hint\"\n  const [sort, setSort] = useState({ col: \"\", dir: \"asc\" });\n\n  // figure out which keys to render as columns\n  const headerKeys = useMemo(\n    () => getHeaderKeys(table.rows),\n    [table.rows]\n  );\n\n  // user clicked a column header\n  const handleHeaderClick = (colName) => {\n    if (!colName) return;\n\n    // flip direction if clicking same col\n    const nextDir =\n      sort.col === colName && sort.dir === \"asc\" ? \"desc\" : \"asc\";\n\n    setSort({ col: colName, dir: nextDir });\n\n    // tell parent so it can (re)fetch or sort externally\n    output?.({\n      type: \"column\",\n      name: colName,\n      dir: nextDir,\n    });\n  };\n\n  // user clicked a row\n  const handleRowClick = (rowId) => {\n    output?.({\n      type: \"row\",\n      id: rowId,\n    });\n  };\n\n  return (\n    <table id={tableIdRef.current} className={table.className}>\n      {/* Table name / caption */}\n      <caption className=\"caption-top text-center\">{table.name}</caption>\n\n      {/* Header row */}\n      <thead>\n        <tr>\n          {/* Icon column label */}\n          <th scope=\"col\">Type</th>\n\n          {headerKeys.map((key) => {\n            const isActive = sort.col === key;\n            const isDesc = isActive && sort.dir === \"desc\";\n\n            return (\n              <th key={key} scope=\"col\">\n                <span\n                  onClick={() => handleHeaderClick(key)}\n                  style={{ userSelect: \"none\", cursor: \"pointer\" }}\n                >\n                  {capitalize(key)}\n\n                  {isActive && (\n                    <span\n                      className=\"ms-1 d-inline-flex align-middle\"\n                      aria-hidden=\"true\"\n                      title={\n                        isDesc\n                          ? \"Sorted descending\"\n                          : \"Sorted ascending\"\n                      }\n                      style={{\n                        transform: isDesc ? \"rotate(180deg)\" : \"none\",\n                        transition: \"transform 120ms\",\n                      }}\n                    >\n                      <AlloyIcon icon={table.sort} />\n                    </span>\n                  )}\n                </span>\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n\n      {/* Body rows */}\n      <tbody>\n        {table.rows.length > 0 ? (\n          table.rows.map((row, idx) => (\n            <tr\n              key={row?.id ?? idx}\n              onClick={() => handleRowClick(row?.id)}\n              style={{ cursor: \"pointer\" }}\n            >\n              {/* icon col */}\n              <td>\n                <AlloyIcon icon={table.icon} />\n              </td>\n\n              {/* data cols */}\n              {headerKeys.map((key) => (\n                <td key={`${row?.id ?? idx}-${key}`}>\n                  <span>{row?.[key]}</span>\n                </td>\n              ))}\n            </tr>\n          ))\n        ) : (\n          <tr>\n            <td\n              colSpan={Math.max(1, headerKeys.length) + 1}\n              className=\"text-center text-secondary\"\n            >\n              No rows\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport default AlloyTable;\n","/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_decodePath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/v6/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/v6/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, UNSAFE_decodePath(pathname)), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/v6/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/v6/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/v6/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/v6/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/v6/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _future;\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned$1 = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned$1[key]) {\n    alreadyWarned$1[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\nconst alreadyWarned = {};\nfunction warnOnce(key, message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[message]) {\n    alreadyWarned[message] = true;\n    console.warn(message);\n  }\n}\nconst logDeprecation = (flag, msg, link) => warnOnce(flag, \"\\u26A0\\uFE0F React Router Future Flag Warning: \" + msg + \". \" + (\"You can use the `\" + flag + \"` future flag to opt-in early. \") + (\"For more information, see \" + link + \".\"));\nfunction logV6DeprecationWarnings(renderFuture, routerFuture) {\n  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) {\n    logDeprecation(\"v7_startTransition\", \"React Router will begin wrapping state updates in `React.startTransition` in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_starttransition\");\n  }\n  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) {\n    logDeprecation(\"v7_relativeSplatPath\", \"Relative route resolution within Splat routes is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath\");\n  }\n  if (routerFuture) {\n    if (routerFuture.v7_fetcherPersist === undefined) {\n      logDeprecation(\"v7_fetcherPersist\", \"The persistence behavior of fetchers is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist\");\n    }\n    if (routerFuture.v7_normalizeFormMethod === undefined) {\n      logDeprecation(\"v7_normalizeFormMethod\", \"Casing of `formMethod` fields is being normalized to uppercase in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod\");\n    }\n    if (routerFuture.v7_partialHydration === undefined) {\n      logDeprecation(\"v7_partialHydration\", \"`RouterProvider` hydration behavior is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_partialhydration\");\n    }\n    if (routerFuture.v7_skipActionErrorRevalidation === undefined) {\n      logDeprecation(\"v7_skipActionErrorRevalidation\", \"The revalidation behavior after 4xx/5xx `action` responses is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation\");\n    }\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  React.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/v6/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/v6/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/v6/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/v6/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/v6/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/v6/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = \"_error\" in promise ? AwaitRenderStatus.error : \"_data\" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/v6/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, logV6DeprecationWarnings as UNSAFE_logV6DeprecationWarnings, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_logV6DeprecationWarnings, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, replace, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\nexport { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      flushSync: flushSync,\n      viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  let routerFuture = React.useMemo(() => ({\n    v7_relativeSplatPath: router.future.v7_relativeSplatPath\n  }), [router.future.v7_relativeSplatPath]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future, router.future), [future, router.future]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: routerFuture\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(MemoizedDataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = /*#__PURE__*/React.memo(DataRoutes);\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    viewTransition: viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        flushSync: options.flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        flushSync: options.flushSync,\n        viewTransition: options.viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some(v => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit, useViewTransitionState };\n//# sourceMappingURL=index.js.map\n","// src/components/tissue/AlloyTableLink.jsx\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AlloyIcon, { IconObject } from \"../cell/AlloyIcon.jsx\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* -------------------------------------------\n * Small util: capitalize column header labels\n * ----------------------------------------- */\nfunction capitalize(s) {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/* -------------------------------------------\n * @typedef {Object} TableLinkRow\n * @property {string|number} [id]\n *    Row identifier; used in the generated link `${baseLink}/${id}`.\n *    All other keys on the row are rendered as data cells.\n *\n * Example row:\n * { id: 42, name: \"Ada Lovelace\", role: \"Admin\" }\n *\n * -------------------------------------------\n * @typedef {Object} TableLinkConfig\n *\n * @property {string} link\n *    REQUIRED. Base route for link generation. e.g. \"/users\"\n *    Each row will link to `${link}/${row.id}`.\n *\n * @property {string} [id]\n *    Optional. DOM id for <table>. If not provided,\n *    we'll generate one with generateId(\"table-link\").\n *\n * @property {string} [className]\n *    Optional. Class for the <table>.\n *    Default: \"table\"\n *\n * @property {string} [name]\n *    Optional. Caption text (table title).\n *    Default: \"table\"\n *\n * @property {TableLinkRow[]} [rows]\n *    Optional. Array of row objects. We do not transform them;\n *    we just render columns from the first row’s keys.\n *\n * @property {IconObject|{iconClass:string,id?:string}} [icon]\n *    Optional. Icon shown in the first \"Type\" column for each row.\n *    Defaults to a user icon.\n *\n * @property {IconObject|{iconClass:string,id?:string}} [sort]\n *    Optional. Icon used in headers to indicate sort direction.\n *    Defaults to a down arrow icon.\n *\n * After construction, AlloyTableLink can trust:\n *  - tableLink.id is string\n *  - tableLink.className is string\n *  - tableLink.name is string\n *  - tableLink.rows is an array\n *  - tableLink.link is string\n *  - tableLink.icon is IconObject\n *  - tableLink.sort is IconObject\n * ----------------------------------------- */\n\n/**\n * TableLinkObject\n *\n * Data model for AlloyTableLink.\n * It:\n *  - enforces that `link` is provided\n *  - copies or defaults everything else\n *  - wraps `icon` and `sort` with IconObject\n *  - generates a stable id if missing\n *\n * It does NOT:\n *  - manage sorting state\n *  - emit events\n *  - alter rows\n *  - do navigation\n */\nexport class TableLinkObject {\n  /**\n   * @param {TableLinkConfig} tableLink\n   */\n  constructor(tableLink = {}) {\n    // required prop\n    if (!tableLink.link) {\n      throw new Error(\"TableLinkObject requires `link` (base route).\");\n    }\n\n    // id\n    this.id = tableLink.id ?? generateId(\"table-link\");\n\n    // presentation bits\n    this.className = tableLink.className ?? \"table\";\n    this.name = tableLink.name ?? \"table\";\n\n    // row data (shallow copied for safety)\n    this.rows = Array.isArray(tableLink.rows)\n      ? tableLink.rows.slice()\n      : [];\n\n    // base route for row links\n    this.link = tableLink.link;\n\n    // icon defaults\n    const fallbackRowIcon = { iconClass: \"fa-solid fa-user\" };\n    const fallbackSortIcon = { iconClass: \"fa-solid fa-arrow-down\" };\n\n    // normalize icons\n    this.icon =\n      tableLink.icon instanceof IconObject\n        ? tableLink.icon\n        : new IconObject(tableLink.icon || fallbackRowIcon);\n\n    this.sort =\n      tableLink.sort instanceof IconObject\n        ? tableLink.sort\n        : new IconObject(tableLink.sort || fallbackSortIcon);\n  }\n}\n\n/* -------------------------------------------\n * Internal helper:\n * Pick column order from first row's keys,\n * skipping \"id\" because that's used for linking.\n * ----------------------------------------- */\nfunction getHeaderKeys(rows) {\n  if (!rows || rows.length === 0) return [];\n  return Object.keys(rows[0]).filter((k) => k !== \"id\");\n}\n\n/* -------------------------------------------\n * AlloyTableLink\n *\n * Renders:\n *   <table>\n *     <caption />\n *     <thead> clickable column headers for sort intent\n *     <tbody> rows where each cell (besides icon) is a <Link>\n *\n * Props:\n *   - tableLink: TableLinkObject (required)\n *   - output?: (payload) => void\n *\n * Payload on column header click:\n *   {\n *     type: \"column\",\n *     name: \"<colName>\",\n *     dir: \"asc\" | \"desc\"\n *   }\n *\n * Payload on row cell click (navigation intent):\n *   {\n *     type: \"navigate\",\n *     to: \"/base/<row.id>\",\n *     id: <row.id>\n *   }\n *\n * Notes:\n *  - We don't actually navigate manually; <Link> handles navigation.\n *    We just emit the intent in case the parent wants analytics, etc.\n *  - We keep a local \"sort\" state (col + dir) for arrow rotation,\n *    but we do NOT reorder the data. Server/parent handles that.\n * ----------------------------------------- */\nexport function AlloyTableLink({ tableLink, output }) {\n  if (!tableLink || !(tableLink instanceof TableLinkObject)) {\n    throw new Error(\n      \"AlloyTableLink requires `tableLink` (TableLinkObject instance).\"\n    );\n  }\n\n  const tableIdRef = useRef(tableLink.id);\n\n  // purely visual sort hint\n  const [sort, setSort] = useState({ col: \"\", dir: \"asc\" });\n\n  // column keys from the first row\n  const headerKeys = useMemo(\n    () => getHeaderKeys(tableLink.rows),\n    [tableLink.rows]\n  );\n\n  // click on column header -> toggle local arrow + emit intent\n  const handleHeaderClick = (name) => {\n    if (!name) return;\n\n    const nextDir =\n      sort.col === name && sort.dir === \"asc\" ? \"desc\" : \"asc\";\n\n    setSort({ col: name, dir: nextDir });\n\n    output?.({\n      type: \"column\",\n      name,\n      dir: nextDir,\n    });\n  };\n\n  return (\n    <table id={tableIdRef.current} className={tableLink.className}>\n      {/* Caption/title */}\n      <caption className=\"caption-top text-center\">\n        {tableLink.name}\n      </caption>\n\n      {/* Header */}\n      <thead>\n        <tr>\n          <th scope=\"col\">Type</th>\n          {headerKeys.map((key) => {\n            const isActive = sort.col === key;\n            const isDesc = isActive && sort.dir === \"desc\";\n\n            return (\n              <th key={key} scope=\"col\">\n                <span\n                  onClick={() => handleHeaderClick(key)}\n                  style={{ userSelect: \"none\", cursor: \"pointer\" }}\n                >\n                  {capitalize(key)}\n\n                  {isActive && (\n                    <span\n                      className=\"ms-1 d-inline-flex align-middle\"\n                      aria-hidden=\"true\"\n                      title={\n                        isDesc\n                          ? \"Sorted descending\"\n                          : \"Sorted ascending\"\n                      }\n                      style={{\n                        transform: isDesc ? \"rotate(180deg)\" : \"none\",\n                        transition: \"transform 120ms\",\n                      }}\n                    >\n                      <AlloyIcon icon={tableLink.sort} />\n                    </span>\n                  )}\n                </span>\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n\n      {/* Body */}\n      <tbody>\n        {tableLink.rows.length > 0 ? (\n          tableLink.rows.map((row, idx) => {\n            const rowId = row?.id ?? idx;\n\n            // normalize `to` so we don't end up with double slashes\n            const base = tableLink.link.endsWith(\"/\")\n              ? tableLink.link.slice(0, -1)\n              : tableLink.link;\n            const to = `${base}/${rowId}`;\n\n            return (\n              <tr key={rowId}>\n                {/* leading icon cell */}\n                <td>\n                  <AlloyIcon icon={tableLink.icon} />\n                </td>\n\n                {/* data cells, each wrapped in a Link to /base/<rowId> */}\n                {headerKeys.map((key) => (\n                  <td key={`${rowId}-${key}`}>\n                    <Link\n                      to={to}\n                      className=\"text-decoration-none\"\n                      onClick={() =>\n                        output?.({\n                          type: \"navigate\",\n                          to,\n                          id: rowId,\n                        })\n                      }\n                    >\n                      <span>{row?.[key]}</span>\n                    </Link>\n                  </td>\n                ))}\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td\n              colSpan={Math.max(1, headerKeys.length) + 1}\n              className=\"text-center text-secondary\"\n            >\n              No rows\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport default AlloyTableLink;\n","// src/components/tissue/AlloyTableAction.jsx\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AlloyIcon, { IconObject } from \"../cell/AlloyIcon.jsx\";\nimport AlloyButtonBar, { ButtonBarObject } from \"./AlloyButtonBar.jsx\";\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* ---------------------- helpers ---------------------- */\nfunction capitalize(s) {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n// Preserve original object-key order from the first row,\n// but always exclude \"id\" from headers and cells.\nfunction getHeaderKeys(rows) {\n  if (!Array.isArray(rows) || rows.length === 0) return [];\n  const first = rows[0] ?? {};\n  return Object.keys(first).filter((k) => k !== \"id\");\n}\n\n/* ---------------------- Model ---------------------- */\n/**\n * TableActionObject\n *\n * Shape:\n *  - id?: string\n *  - className?: string                (table classes)\n *  - name?: string                     (caption)\n *  - rows?: Array<object>              (each row should contain unique `id`)\n *  - icon?: IconObject|object          (left \"Type\" column icon)\n *  - sort?: IconObject|object          (column-sort indicator arrow icon)\n *  - actions?: ButtonBarObject|object  (OPTIONAL; if present, rendered in last column)\n *  - link?: string                     (OPTIONAL base route; if set, cells become <Link> to `${link}/${row.id}`)\n */\nexport class TableActionObject {\n  /**\n   * @param {Object} cfg\n   */\n  constructor(cfg = {}) {\n    // required? no. actions is now optional.\n    // validate nothing except shape.\n\n    // unique id for this table instance\n    this.id = cfg.id ?? generateId(\"table-action\");\n\n    // table basics\n    this.className = cfg.className ?? \"table\";\n    this.name = cfg.name ?? \"table\";\n\n    // rows\n    this.rows = Array.isArray(cfg.rows) ? cfg.rows.slice() : [];\n\n    // base route for navigation links\n    this.link = typeof cfg.link === \"string\" ? cfg.link : \"\";\n\n    // default icons for icon/sort\n    const defaultIcon = new IconObject({ iconClass: \"fa-solid fa-user\" });\n    const defaultSort = new IconObject({ iconClass: \"fa-solid fa-arrow-down\" });\n\n    // normalize icon into IconObject\n    this.icon =\n      cfg.icon instanceof IconObject\n        ? cfg.icon\n        : new IconObject(cfg.icon || defaultIcon);\n\n    // normalize sort icon into IconObject\n    this.sort =\n      cfg.sort instanceof IconObject\n        ? cfg.sort\n        : new IconObject(cfg.sort || defaultSort);\n\n    // normalize actions -> ButtonBarObject (OPTIONAL)\n    // If user didn't pass actions, leave undefined.\n    this.actions = cfg.actions\n      ? cfg.actions instanceof ButtonBarObject\n        ? cfg.actions\n        : new ButtonBarObject(cfg.actions)\n      : undefined;\n  }\n}\n\n/* ---------------------- Component ---------------------- */\n/**\n * AlloyTableAction\n *\n * Props:\n *  - tableAction: TableActionObject (required)\n *  - output?: (payload: any) => void\n *\n * Emits to `output`:\n *  • { type: \"column\", name, dir }\n *      when a header is clicked. You then fetch sorted data server-side.\n *\n *  • { type: \"action\", action, row }\n *      when an action button is clicked (if actions bar exists).\n *      `action` is a snapshot of the button model that was clicked.\n *\n *  • { type: \"navigate\", to, id, row }\n *      when a data cell link is clicked (only if link is set).\n */\nexport function AlloyTableAction({ tableAction, output }) {\n  if (!tableAction || !(tableAction instanceof TableActionObject)) {\n    throw new Error(\n      \"AlloyTableAction requires `tableAction` (TableActionObject instance).\"\n    );\n  }\n\n  const tblIdRef = useRef(tableAction.id);\n\n  // derive headers (once per data change)\n  const headerKeys = useMemo(\n    () => getHeaderKeys(tableAction.rows),\n    [tableAction.rows]\n  );\n\n  // purely visual sort state (server decides actual row order)\n  const [sort, setSort] = useState({ col: \"\", dir: \"asc\" });\n\n  function handleHeaderClick(colName) {\n    const nextDir =\n      sort.col === colName && sort.dir === \"asc\" ? \"desc\" : \"asc\";\n    setSort({ col: colName, dir: nextDir });\n\n    output?.({\n      type: \"column\",\n      name: colName,\n      dir: nextDir,\n    });\n  }\n\n  // When a row's action button is clicked, we forward row data too\n  function makeRowActionEmitter(row) {\n    return (self, e) => {\n      output?.({\n        type: \"action\",\n        action: {\n          id: self?.id,\n          name: self?.name,\n          className: self?.className,\n          active: self?.active,\n          disabled: !!self?.disabled,\n          title: self?.title,\n          ariaLabel: self?.ariaLabel,\n          tabIndex: self?.tabIndex,\n          iconClass: self?.icon?.iconClass,\n        },\n        row,\n      });\n    };\n  }\n\n  // Do we have an actions bar at all?\n  const hasActionsBar = !!tableAction.actions;\n\n  return (\n    <table id={tblIdRef.current} className={tableAction.className}>\n      <caption className=\"caption-top text-center\">{tableAction.name}</caption>\n\n      <thead>\n        <tr>\n          {/* first column: icon */}\n          <th scope=\"col\">Type</th>\n\n          {/* data-driven headers */}\n          {headerKeys.map((key) => {\n            const isActive = sort.col === key;\n            const isDesc = isActive && sort.dir === \"desc\";\n\n            return (\n              <th key={`h-${key}`} scope=\"col\">\n                <span\n                  onClick={() => handleHeaderClick(key)}\n                  style={{ userSelect: \"none\" }}\n                >\n                  {capitalize(key)}\n                  {isActive && (\n                    <span\n                      className=\"ms-1 d-inline-flex align-middle\"\n                      aria-hidden=\"true\"\n                      title={isDesc ? \"Sorted descending\" : \"Sorted ascending\"}\n                      style={{\n                        transform: isDesc ? \"rotate(180deg)\" : \"none\",\n                        transition: \"transform 120ms\",\n                      }}\n                    >\n                      <AlloyIcon icon={tableAction.sort} />\n                    </span>\n                  )}\n                </span>\n              </th>\n            );\n          })}\n\n          {/* actions column header (optional) */}\n          {hasActionsBar && (\n            <th scope=\"col\" className=\"text-end\">\n              Actions\n            </th>\n          )}\n        </tr>\n      </thead>\n\n      <tbody>\n        {tableAction.rows.length > 0 ? (\n          tableAction.rows.map((row, idx) => {\n            const rowId = row?.id ?? idx;\n\n            // We'll reuse the SAME actions bar instance for each row.\n            // The bar itself will emit back to us through makeRowActionEmitter.\n            const rowBar = tableAction.actions;\n\n            return (\n              <tr key={rowId}>\n                {/* icon cell */}\n                <td>\n                  <AlloyIcon icon={tableAction.icon} />\n                </td>\n\n                {/* data cells */}\n                {headerKeys.map((key) => {\n                  const base = tableAction.link || \"\";\n                  const cleanedBase = base.endsWith(\"/\")\n                    ? base.slice(0, -1)\n                    : base;\n                  const to = cleanedBase ? `${cleanedBase}/${rowId}` : \"\";\n\n                  return (\n                    <td key={`${rowId}-${key}`}>\n                      {cleanedBase ? (\n                        <Link\n                          to={to}\n                          onClick={() =>\n                            output?.({\n                              type: \"navigate\",\n                              to,\n                              id: rowId,\n                              row,\n                            })\n                          }\n                          className=\"text-decoration-none\"\n                        >\n                          <span>{row?.[key]}</span>\n                        </Link>\n                      ) : (\n                        <span>{row?.[key]}</span>\n                      )}\n                    </td>\n                  );\n                })}\n\n                {/* actions cell (optional) */}\n                {hasActionsBar && (\n                  <td className=\"text-end\">\n                    <AlloyButtonBar\n                      buttonBar={rowBar}\n                      output={makeRowActionEmitter(row)}\n                    />\n                  </td>\n                )}\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td\n              colSpan={\n                // icon col + data cols (+ actions col if present)\n                1 + headerKeys.length + (hasActionsBar ? 1 : 0)\n              }\n              className=\"text-center text-secondary\"\n            >\n              No rows\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport default AlloyTableAction;\n","// src/components/tissue/AlloyCard.jsx\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { generateId, TagObject } from \"../../utils/idHelper.js\";\n\n/**\n * CardObject\n *\n * The base data model for AlloyCard.\n *\n * Rules:\n * - `body` is REQUIRED.\n * - `header` and `footer` are OPTIONAL.\n * - `fields` is OPTIONAL (array of TagObject to render inside body).\n * - `link` is OPTIONAL. If present, ONLY the body becomes clickable.\n *\n * This model does NOT try to interpret or mutate nested configs\n * beyond wrapping them in TagObject. If you pass a plain object for\n * header/body/footer/fields[i], we wrap it. If you pass instances,\n * we use them as-is.\n */\nexport class CardObject {\n  /**\n   * @param {Object} card\n   * @param {string} [card.id]                - DOM id for the card wrapper\n   * @param {string} [card.className]         - wrapper classes (outer .card)\n   * @param {string} [card.link]              - optional href/route; used to wrap ONLY the body\n   * @param {TagObject|Object} [card.header]  - optional top section (className defaults \"card-header\")\n   * @param {TagObject|Object} card.body      - REQUIRED main content section (className defaults \"card-body\")\n   * @param {TagObject|Object} [card.footer]  - optional bottom section (className defaults \"card-footer\")\n   * @param {Array<TagObject|Object>} [card.fields] - optional array of content blocks inside body\n   */\n  constructor(card = {}) {\n    // required: body\n    if (!card.body) {\n      throw new Error(\"CardObject requires `body`.\");\n    }\n\n    // id / wrapper classes / link\n    this.id = card.id ?? generateId(\"card\");\n    this.className = card.className ?? \"card border m-2 shadow\";\n    this.link = typeof card.link === \"string\" ? card.link : \"\";\n\n    // normalize header/body/footer to TagObject instances\n    // header is optional\n    if (card.header instanceof TagObject) {\n      this.header = card.header;\n    } else if (card.header) {\n      const tmp = new TagObject(card.header);\n      // default header class if caller didn't provide one\n      tmp.className = tmp.className || \"card-header\";\n      this.header = tmp;\n    } else {\n      this.header = undefined;\n    }\n\n    // body is required\n    if (card.body instanceof TagObject) {\n      this.body = card.body;\n    } else {\n      const tmp = new TagObject(card.body);\n      tmp.className = tmp.className || \"card-body\";\n      this.body = tmp;\n    }\n\n    // footer is optional\n    if (card.footer instanceof TagObject) {\n      this.footer = card.footer;\n    } else if (card.footer) {\n      const tmp = new TagObject(card.footer);\n      tmp.className = tmp.className || \"card-footer\";\n      this.footer = tmp;\n    } else {\n      this.footer = undefined;\n    }\n\n    // fields: optional array of TagObject\n    const rawFields = Array.isArray(card.fields) ? card.fields : [];\n    this.fields = rawFields.map((blk) => {\n      if (blk instanceof TagObject) {\n        return blk;\n      }\n      const tmp = new TagObject(blk || {});\n      // no default className here beyond empty; caller controls layout inside body\n      return tmp;\n    });\n  }\n}\n\n/**\n * AlloyCard\n *\n * Props:\n *  - card: CardObject (required)\n *\n * Behavior:\n *  - Renders optional header/footer.\n *  - Renders body, then each field inside body.\n *  - If `card.link` truthy, ONLY the body section is wrapped in <Link>.\n *    The header and footer are never clickable.\n */\nexport function AlloyCard({ card }) {\n  if (!card || !(card instanceof CardObject)) {\n    throw new Error(\"AlloyCard requires `card` (CardObject instance).\");\n  }\n\n  // --- header section (render only if provided and has a name or class) ---\n  const headerSection = card.header ? (\n    <div\n      id={card.header.id}\n      className={card.header.className || \"card-header\"}\n      aria-label={card.header.name}\n    >\n      {card.header.name}\n    </div>\n  ) : null;\n\n  // --- body content WITHOUT link wrapping yet ---\n  const bodyInner = (\n    <div\n      id={card.body.id}\n      className={card.body.className || \"card-body\"}\n      aria-label={card.body.name}\n    >\n      {/* Body main label/content */}\n      {card.body.name && <div className=\"mb-2\">{card.body.name}</div>}\n\n      {/* Body extra fields (if any) */}\n      {card.fields.map((field) => (\n        <div\n          key={field.id}\n          id={field.id}\n          className={field.className}\n          aria-label={field.name}\n        >\n          {field.name}\n        </div>\n      ))}\n    </div>\n  );\n\n  // --- bodySection (ONLY this can become a <Link>) ---\n  const bodySection = card.link ? (\n    <Link\n      to={card.link}\n      className=\"text-decoration-none d-block\"\n      aria-label={card.body?.name}\n    >\n      {bodyInner}\n    </Link>\n  ) : (\n    bodyInner\n  );\n\n  // --- footer section (render only if provided) ---\n  const footerSection = card.footer ? (\n    <div\n      id={card.footer.id}\n      className={card.footer.className || \"card-footer\"}\n      aria-label={card.footer.name}\n    >\n      {card.footer.name}\n    </div>\n  ) : null;\n\n  // --- final card layout ---\n  // IMPORTANT:\n  // We NEVER wrap the whole card in <Link>.\n  // The outer shell is always a <div>.\n  // Only the bodySection is link-wrapped if link exists.\n  return (\n    <div id={card.id} className={card.className}>\n      {headerSection}\n      {bodySection}\n      {footerSection}\n    </div>\n  );\n}\n\nexport default AlloyCard;\n","// src/components/tissue/AlloyCardIcon.jsx\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AlloyIcon, { IconObject } from \"../cell/AlloyIcon.jsx\";\nimport { CardObject } from \"./AlloyCard.jsx\";\n\n/**\n * CardIconObject\n *\n * Extends CardObject by adding:\n *  - icon (REQUIRED)\n *  - iconClass (styling for the icon column)\n *  - textClass (styling for the text column)\n */\nexport class CardIconObject extends CardObject {\n  constructor(cardIcon = {}) {\n    super(cardIcon); // CardObject handles id, className, link, header/body/footer/etc.\n\n    if (!cardIcon.icon) {\n      throw new Error(\"CardIconObject requires `icon`.\");\n    }\n\n    // normalize icon to IconObject\n    this.icon =\n      cardIcon.icon instanceof IconObject\n        ? cardIcon.icon\n        : new IconObject(cardIcon.icon);\n\n    // layout classes for the two body columns\n    this.iconClass =\n      cardIcon.iconClass ??\n      \"col-4 d-flex align-items-start justify-content-center text-warning fs-2\";\n\n    this.textClass = cardIcon.textClass ?? \"col-8\";\n  }\n}\n\nexport function AlloyCardIcon({ cardIcon }) {\n  if (!cardIcon || !(cardIcon instanceof CardIconObject)) {\n    throw new Error(\n      \"AlloyCardIcon requires `cardIcon` (CardIconObject instance).\"\n    );\n  }\n\n  /* ---------- header (never linkable) ---------- */\n  const headerBlock = cardIcon.header?.name ? (\n    <div\n      id={cardIcon.header.id}\n      className={cardIcon.header.className}\n    >\n      {cardIcon.header.name}\n    </div>\n  ) : null;\n\n  /* ---------- bodyInner (visual body content only) ---------- */\n  const bodyInner = (\n    <div\n      id={cardIcon.body.id}\n      className={cardIcon.body.className}\n      aria-label={cardIcon.body.name}\n    >\n      <div className=\"row m-0\">\n        {/* Icon column */}\n        <div className={cardIcon.iconClass}>\n          <AlloyIcon icon={cardIcon.icon} />\n        </div>\n\n        {/* Text column */}\n        <div className={cardIcon.textClass}>\n          {/* main body heading */}\n          {cardIcon.body?.name ? (\n            <div className=\"mb-1 fw-semibold\">{cardIcon.body.name}</div>\n          ) : null}\n\n          {/* extra fields */}\n          {cardIcon.fields.map((field) =>\n            field?.name ? (\n              <div\n                key={field.id}\n                id={field.id}\n                className={field.className}\n              >\n                {field.name}\n              </div>\n            ) : null\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  /* ---------- bodyBlock (ONLY this may be wrapped in <Link>) ---------- */\n  const bodyBlock = cardIcon.link ? (\n    <Link\n      to={cardIcon.link}\n      className=\"text-decoration-none d-block\"\n      aria-label={cardIcon.body?.name}\n    >\n      {bodyInner}\n    </Link>\n  ) : (\n    bodyInner\n  );\n\n  /* ---------- footer (never linkable) ---------- */\n  const footerBlock = cardIcon.footer?.name ? (\n    <div\n      id={cardIcon.footer.id}\n      className={cardIcon.footer.className}\n    >\n      {cardIcon.footer.name}\n    </div>\n  ) : null;\n\n  /* ---------- final card shell ---------- */\n  // IMPORTANT:\n  // We do NOT wrap the entire card in <Link>. The card root is always a <div>.\n  // Only the bodyBlock can be clickable.\n  return (\n    <div\n      id={cardIcon.id}\n      className={cardIcon.className}\n    >\n      {headerBlock}\n      {bodyBlock}\n      {footerBlock}\n    </div>\n  );\n}\n\nexport default AlloyCardIcon;\n","// src/components/tissue/AlloyCardImage.jsx\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { generateId, TagObject } from \"../../utils/idHelper.js\";\n\n/**\n * LogoObject\n */\nexport class LogoObject {\n  constructor(logo = {}) {\n    this.id = logo.id ?? generateId(\"logo\");\n\n    // safe defaults\n    this.imageUrl =\n      logo.imageUrl ??\n      \"https://alloymobile.blob.core.windows.net/alloymobile/alloymobile.png\";\n\n    this.alt = logo.alt ?? \"Alloymobile\";\n    this.width = logo.width ?? \"72px\";\n    this.height = logo.height ?? \"auto\";\n  }\n}\n\n/**\n * CardImageObject\n *\n * Matches our standard card contract:\n *  - id, className\n *  - link?: string  (ONLY body becomes clickable if present)\n *  - header?: TagObject\n *  - body:   TagObject (required-ish; we normalize even if empty)\n *  - footer?: TagObject\n *  - fields?: TagObject[]\n *\n * Plus:\n *  - logo: LogoObject (required for this variant)\n *  - logoClass, textClass for body layout columns\n */\nexport class CardImageObject {\n  constructor(cfg = {}) {\n    // outer card shell\n    this.id = cfg.id ?? generateId(\"card\");\n    this.className = cfg.className ?? \"card border m-2 shadow\";\n\n    // IMPORTANT: link now only applies to body, not the full card\n    this.link = typeof cfg.link === \"string\" ? cfg.link : \"\";\n\n    // normalize header/body/footer to TagObject\n    this.header =\n      cfg.header instanceof TagObject\n        ? cfg.header\n        : new TagObject(cfg.header || {});\n\n    this.body =\n      cfg.body instanceof TagObject\n        ? cfg.body\n        : new TagObject(cfg.body || {});\n\n    this.footer =\n      cfg.footer instanceof TagObject\n        ? cfg.footer\n        : new TagObject(cfg.footer || {});\n\n    // fields[] -> TagObject[]\n    const rawFields = Array.isArray(cfg.fields) ? cfg.fields : [];\n    this.fields = rawFields.map((f) =>\n      f instanceof TagObject ? f : new TagObject(f || {})\n    );\n\n    // required visual block\n    this.logo =\n      cfg.logo instanceof LogoObject\n        ? cfg.logo\n        : new LogoObject(cfg.logo || {});\n\n    // body row column classes\n    this.logoClass =\n      cfg.logoClass ??\n      \"col-4 d-flex align-items-center justify-content-center bg-light rounded mb-0\";\n\n    this.textClass = cfg.textClass ?? \"col-8\";\n  }\n}\n\n/**\n * AlloyCardImage\n *\n * Props:\n *   - cardImage: CardImageObject (required)\n *\n * Behavior:\n *   - Outer wrapper is ALWAYS <div className=\"card ...\">.\n *   - Header is never wrapped in <Link>.\n *   - Footer is never wrapped in <Link>.\n *   - ONLY the body block is wrapped in <Link> if cardImage.link is provided.\n */\nexport function AlloyCardImage({ cardImage }) {\n  if (!(cardImage instanceof CardImageObject)) {\n    throw new Error(\n      \"AlloyCardImage requires `cardImage` (CardImageObject instance).\"\n    );\n  }\n\n  /* ----- header (optional if .name is non-empty) ----- */\n  const headerBlock =\n    cardImage.header?.name ? (\n      <div\n        id={cardImage.header.id}\n        className={\n          cardImage.header.className || \"card-header py-2 fw-semibold\"\n        }\n        aria-label={cardImage.header.name}\n      >\n        {cardImage.header.name}\n      </div>\n    ) : null;\n\n  /* ----- bodyInner (visual content, no link wrapping yet) ----- */\n  const bodyInner = (\n    <div\n      id={cardImage.body.id}\n      className={cardImage.body.className || \"card-body py-3\"}\n      aria-label={cardImage.body.name}\n    >\n      <div className=\"row m-0\">\n        {/* LEFT: logo / image */}\n        <div className={cardImage.logoClass}>\n          <img\n            src={cardImage.logo.imageUrl}\n            alt={cardImage.logo.alt}\n            style={{\n              width: cardImage.logo.width,\n              height: cardImage.logo.height,\n              maxWidth: \"100%\",\n              objectFit: \"contain\",\n            }}\n          />\n        </div>\n\n        {/* RIGHT: text content */}\n        <div className={cardImage.textClass}>\n          <div className=\"row p-1\">\n            {/* body.name as \"headline\"/title line */}\n            {cardImage.body?.name ? (\n              <div className=\"fw-semibold mb-1\">\n                {cardImage.body.name}\n              </div>\n            ) : null}\n\n            {/* additional rows from fields[] */}\n            {cardImage.fields.map((fieldObj) =>\n              fieldObj?.name ? (\n                <div\n                  key={fieldObj.id ?? generateId(\"card-image-field\")}\n                  id={fieldObj.id}\n                  className={fieldObj.className || \"\"}\n                >\n                  {fieldObj.name}\n                </div>\n              ) : null\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  /* ----- bodySection (ONLY this becomes clickable) ----- */\n  const bodySection = cardImage.link ? (\n    <Link\n      to={cardImage.link}\n      className=\"text-decoration-none d-block\"\n      aria-label={cardImage.body?.name}\n    >\n      {bodyInner}\n    </Link>\n  ) : (\n    bodyInner\n  );\n\n  /* ----- footer (optional if .name is non-empty) ----- */\n  const footerBlock =\n    cardImage.footer?.name ? (\n      <div\n        id={cardImage.footer.id}\n        className={\n          cardImage.footer.className ||\n          \"card-footer small text-muted py-2\"\n        }\n        aria-label={cardImage.footer.name}\n      >\n        {cardImage.footer.name}\n      </div>\n    ) : null;\n\n  /* ----- final outer shell ----- */\n  // We NEVER wrap the entire card in <Link>.\n  // We ALWAYS render <div className=\"card ...\"> as the root.\n  return (\n    <div\n      id={cardImage.id}\n      className={cardImage.className}\n    >\n      {headerBlock}\n      {bodySection}\n      {footerBlock}\n    </div>\n  );\n}\n\nexport default AlloyCardImage;\n","// src/components/tissue/AlloyCardAction.jsx\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { TagObject, generateId } from \"../../utils/idHelper.js\";\nimport AlloyButtonBar, { ButtonBarObject } from \"./AlloyButtonBar.jsx\";\nimport AlloyLinkBar, { LinkBarObject } from \"./AlloyLinkBar.jsx\";\n\n/* ------------------ Model ------------------ */\n\nexport class CardActionObject {\n  constructor(cardAction = {}) {\n    // outer card shell props\n    this.id = cardAction.id ?? generateId(\"card-action\");\n    this.className = cardAction.className ?? \"card border m-2 shadow\";\n\n    // NOTE: link is allowed but now ONLY applies to the BODY block\n    this.link = cardAction.link ?? \"\";\n\n    // header (optional TagObject)\n    const rawHeader = cardAction.header ?? {};\n    this.header =\n      rawHeader instanceof TagObject ? rawHeader : new TagObject(rawHeader);\n\n    // body (required-ish; fallback to empty TagObject for safety)\n    const rawBody = cardAction.body ?? {};\n    this.body =\n      rawBody instanceof TagObject ? rawBody : new TagObject(rawBody);\n\n    // fields[]\n    const rawFields = Array.isArray(cardAction.fields)\n      ? cardAction.fields\n      : [];\n    this.fields = rawFields.map((f) =>\n      f instanceof TagObject ? f : new TagObject(f || {})\n    );\n\n    // footer (required-ish; we always create one so layout is predictable)\n    const rawFooter = cardAction.footer ?? {};\n    this.footer =\n      rawFooter instanceof TagObject ? rawFooter : new TagObject(rawFooter);\n\n    // action bar config\n    this.type = cardAction.type ?? \"AlloyButtonBar\";\n\n    const rawAction = cardAction.action;\n    if (this.type === \"AlloyLinkBar\") {\n      this.action =\n        rawAction instanceof LinkBarObject\n          ? rawAction\n          : rawAction\n          ? new LinkBarObject(rawAction)\n          : undefined;\n    } else {\n      this.action =\n        rawAction instanceof ButtonBarObject\n          ? rawAction\n          : rawAction\n          ? new ButtonBarObject(rawAction)\n          : undefined;\n    }\n  }\n}\n\n/* ------------------ View ------------------ */\n\nexport function AlloyCardAction({ cardAction, output }) {\n  if (!cardAction || !(cardAction instanceof CardActionObject)) {\n    throw new Error(\n      \"AlloyCardAction requires `cardAction` (CardActionObject instance).\"\n    );\n  }\n\n  // bubble up footer button/link clicks\n  function handleBarOutput(self, e) {\n    output?.({\n      type: \"action\",\n      action: {\n        id: self?.id,\n        name: self?.name,\n        className: self?.className,\n        active: self?.active,\n        disabled: self?.disabled ?? false,\n        title: self?.title,\n        ariaLabel: self?.ariaLabel,\n        tabIndex: self?.tabIndex,\n        iconClass: self?.icon?.iconClass,\n        href: self?.href,\n      },\n      card: {\n        id: cardAction.id,\n      },\n    });\n  }\n\n  /* ------- header block (NEVER link) ------- */\n  // Only render if header.name is non-empty\n  const headerBlock = cardAction.header?.name ? (\n    <div\n      id={cardAction.header.id}\n      className={\n        cardAction.header.className ?? \"card-header py-2 fw-semibold\"\n      }\n    >\n      {cardAction.header.name}\n    </div>\n  ) : null;\n\n  /* ------- body content core ------- */\n  // This is the visual body markup WITHOUT link wrapping yet.\n  const bodyInner = (\n    <div\n      id={cardAction.body.id}\n      className={cardAction.body.className ?? \"card-body\"}\n    >\n      {cardAction.body.name ? (\n        <div className=\"fw-semibold mb-1\">{cardAction.body.name}</div>\n      ) : null}\n\n      {cardAction.fields.map((field) =>\n        field?.name ? (\n          <div\n            key={field.id ?? generateId(\"card-field\")}\n            id={field.id}\n            className={field.className ?? \"\"}\n          >\n            {field.name}\n          </div>\n        ) : null\n      )}\n    </div>\n  );\n\n  /* ------- bodyBlock (ONLY this can be <Link>) ------- */\n  // If cardAction.link is provided, wrap ONLY bodyInner with <Link>.\n  // Otherwise, render bodyInner as-is.\n  const bodyBlock = cardAction.link ? (\n    <Link\n      to={cardAction.link}\n      className=\"text-decoration-none d-block\"\n      // we do NOT forward cardAction.className here; that stays on the outer .card\n      aria-label={cardAction.body?.name}\n    >\n      {bodyInner}\n    </Link>\n  ) : (\n    bodyInner\n  );\n\n  /* ------- footer block (NEVER link) ------- */\n  const footerBlock = (\n    <div\n      id={cardAction.footer.id}\n      className={\n        cardAction.footer.className ??\n        \"card-footer d-flex align-items-center gap-2 py-2\"\n      }\n    >\n      {cardAction.footer.name ? (\n        <div className=\"me-auto small text-muted\">{cardAction.footer.name}</div>\n      ) : null}\n\n      {cardAction.action ? (\n        cardAction.type === \"AlloyLinkBar\" ? (\n          <AlloyLinkBar linkBar={cardAction.action} output={handleBarOutput} />\n        ) : (\n          <AlloyButtonBar\n            buttonBar={cardAction.action}\n            output={handleBarOutput}\n          />\n        )\n      ) : null}\n    </div>\n  );\n\n  /* ------- final card layout ------- */\n  // OUTER is always a plain <div class=\"card ...\"> now.\n  // Inside order: header (if any) → body (link-wrapped or not) → footer.\n  return (\n    <div\n      id={cardAction.id}\n      className={cardAction.className ?? \"card border m-2 shadow\"}\n    >\n      {headerBlock}\n      {bodyBlock}\n      {footerBlock}\n    </div>\n  );\n}\n\nexport default AlloyCardAction;\n","// src/components/tissue/AlloyCardIconAction.jsx\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AlloyIcon, IconObject } from \"../cell/AlloyIcon.jsx\";\nimport { generateId, TagObject } from \"../../utils/idHelper.js\";\n\nimport AlloyButtonBar, { ButtonBarObject } from \"./AlloyButtonBar.jsx\";\nimport AlloyLinkBar, { LinkBarObject } from \"./AlloyLinkBar.jsx\";\n\n/* ------------------------------------------------------------------\n * CardIconActionObject\n *\n * Card with:\n *   - optional header TagObject\n *   - required body TagObject\n *   - fields[] of TagObject (text rows on the right side)\n *   - required footer TagObject\n *\n *   layout in body:\n *     [icon | text-block]\n *\n *   footer includes an action bar (button bar OR link bar)\n *\n * PLUS:\n *   - link?: string\n *     If present, ONLY the body section becomes clickable (<Link>).\n *     Header and footer never become part of the link.\n *\n *   - icon:       IconObject (avatar / glyph on the left side)\n *   - iconClass:  string (classes for the left column)\n *   - textClass:  string (classes for the right column)\n *\n *   - type:   \"AlloyButtonBar\" | \"AlloyLinkBar\"\n *   - action: ButtonBarObject | LinkBarObject\n * ------------------------------------------------------------------ */\n\n/**\n * @typedef {Object} CardIconActionConfig\n * @property {string} [id]\n * @property {string} [className]\n * @property {string} [link]   // NEW: optional. If set, body becomes clickable.\n *\n * @property {TagObject|{id?:string,className?:string,name?:string}} [header]\n *           Optional. Rendered only if it has a non-empty `name`.\n *\n * @property {TagObject|{id?:string,className?:string,name?:string}} body\n *           Required. Used for the main body wrapper/div.\n *\n * @property {Array<TagObject|{id?:string,className?:string,name?:string}>} [fields]\n *           Optional. Rendered in order, in the right column of the body layout.\n *\n * @property {TagObject|{id?:string,className?:string,name?:string}} footer\n *           Required. Footer container. Its `name` renders left side text in footer.\n *\n * @property {IconObject|{iconClass?:string,id?:string}} [icon]\n *           Required-ish visual avatar on the left column. Defaults provided.\n *\n * @property {string} [iconClass]\n *           Class for the left icon column wrapper.\n *\n * @property {string} [textClass]\n *           Class for the right text column wrapper.\n *\n * @property {\"AlloyButtonBar\"|\"AlloyLinkBar\"} [type]\n *           Which bar the footer should render on the right.\n *\n * @property {ButtonBarObject|LinkBarObject|object} [action]\n *           Bar config. ButtonBarObject or LinkBarObject will be hydrated.\n */\nexport class CardIconActionObject {\n  /**\n   * @param {CardIconActionConfig} card = {}\n   */\n  constructor(card = {}) {\n    // id / className / link\n    this.id = card.id ?? generateId(\"card-icon-action\");\n    this.className = card.className ?? \"card border m-2 shadow\";\n    this.link = typeof card.link === \"string\" ? card.link : \"\";\n\n    // header: optional\n    const rawHeader = card.header ?? {};\n    this.header =\n      rawHeader instanceof TagObject ? rawHeader : new TagObject(rawHeader);\n\n    // body: required TagObject (fallback to empty object so render won't explode)\n    const rawBody = card.body ?? {};\n    this.body =\n      rawBody instanceof TagObject ? rawBody : new TagObject(rawBody);\n\n    // fields: array<TagObject>\n    const rawFields = Array.isArray(card.fields) ? card.fields : [];\n    this.fields = rawFields.map((f) =>\n      f instanceof TagObject ? f : new TagObject(f || {})\n    );\n\n    // footer: required TagObject (again we normalize to avoid undefined)\n    const rawFooter = card.footer ?? {};\n    this.footer =\n      rawFooter instanceof TagObject ? rawFooter : new TagObject(rawFooter);\n\n    // icon: ensure IconObject\n    const defaultIcon = new IconObject({ iconClass: \"fa-solid fa-user fa-2xl\" });\n    this.icon =\n      card.icon instanceof IconObject\n        ? card.icon\n        : new IconObject(card.icon || { iconClass: defaultIcon.iconClass });\n\n    // column classes in body\n    this.iconClass =\n      card.iconClass ??\n      \"col-3 d-flex align-items-center justify-content-center rounded-circle bg-warning text-white mb-0\";\n    this.textClass = card.textClass ?? \"col-9\";\n\n    // action bar\n    this.type = card.type ?? \"AlloyButtonBar\";\n\n    if (this.type === \"AlloyLinkBar\") {\n      this.action =\n        card.action instanceof LinkBarObject\n          ? card.action\n          : new LinkBarObject(card.action || {});\n    } else {\n      // default AlloyButtonBar\n      this.action =\n        card.action instanceof ButtonBarObject\n          ? card.action\n          : new ButtonBarObject(card.action || {});\n    }\n  }\n}\n\n/* ------------------------------------------------------------------\n * AlloyCardIconAction\n *\n * Props:\n *   - cardIconAction: CardIconActionObject (required)\n *   - output?: (payload:any) => void\n *\n * Behavior:\n *   - Outer wrapper is ALWAYS a <div className=\"card ...\">.\n *   - Header is never wrapped in a link.\n *   - Footer is never wrapped in a link.\n *   - ONLY the body becomes a <Link> if cardIconAction.link is set.\n *\n * Footer still emits actions through `output`.\n * ------------------------------------------------------------------ */\nexport function AlloyCardIconAction({ cardIconAction, output }) {\n  if (!cardIconAction || !(cardIconAction instanceof CardIconActionObject)) {\n    throw new Error(\n      \"AlloyCardIconAction requires `cardIconAction` (CardIconActionObject instance).\"\n    );\n  }\n\n  // bridge footer bar's click -> parent output\n  function makeActionEmitter() {\n    return (self, e) => {\n      output?.({\n        type: \"action\",\n        action: {\n          id: self?.id,\n          name: self?.name,\n          title: self?.title,\n          href: self?.href,\n          className: self?.className,\n          iconClass: self?.icon?.iconClass,\n          active: self?.active,\n          disabled: !!self?.disabled,\n          ariaLabel: self?.ariaLabel,\n          tabIndex: self?.tabIndex,\n        },\n        card: {\n          id: cardIconAction.id,\n        },\n      });\n    };\n  }\n\n  /* ----- header (optional by .name) ----- */\n  const headerSection =\n    cardIconAction.header?.name ? (\n      <div\n        id={cardIconAction.header.id}\n        className={\n          cardIconAction.header.className ||\n          \"card-header py-2 fw-semibold\"\n        }\n        aria-label={cardIconAction.header.name}\n      >\n        {cardIconAction.header.name}\n      </div>\n    ) : null;\n\n  /* ----- bodyInner (visual body content, no link yet) ----- */\n  const bodyInner = (\n    <div\n      id={cardIconAction.body.id}\n      className={cardIconAction.body.className || \"card-body\"}\n      aria-label={cardIconAction.body.name}\n    >\n      <div className=\"row m-0\">\n        {/* left icon column */}\n        <div className={cardIconAction.iconClass}>\n          <AlloyIcon icon={cardIconAction.icon} />\n        </div>\n\n        {/* right text column */}\n        <div className={cardIconAction.textClass}>\n          <div className=\"row p-1\">\n            {cardIconAction.fields.map((field) =>\n              field?.name ? (\n                <div\n                  key={field.id ?? generateId(\"card-icon-action-field\")}\n                  id={field.id}\n                  className={field.className}\n                >\n                  {field.name}\n                </div>\n              ) : null\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  /* ----- bodySection (ONLY this may be wrapped in <Link>) ----- */\n  const bodySection = cardIconAction.link ? (\n    <Link\n      to={cardIconAction.link}\n      className=\"text-decoration-none d-block\"\n      aria-label={cardIconAction.body?.name}\n    >\n      {bodyInner}\n    </Link>\n  ) : (\n    bodyInner\n  );\n\n  /* ----- footer (required) ----- */\n  const footerBar =\n    cardIconAction.type === \"AlloyLinkBar\" ? (\n      <AlloyLinkBar\n        linkBar={cardIconAction.action}\n        output={makeActionEmitter()}\n      />\n    ) : (\n      <AlloyButtonBar\n        buttonBar={cardIconAction.action}\n        output={makeActionEmitter()}\n      />\n    );\n\n  const footerSection = (\n    <div\n      id={cardIconAction.footer.id}\n      className={\n        cardIconAction.footer.className ||\n        \"card-footer d-flex align-items-center justify-content-between flex-wrap gap-2 py-2\"\n      }\n      aria-label={cardIconAction.footer.name}\n    >\n      {/* footer text (left) */}\n      <div className=\"me-auto\">\n        {cardIconAction.footer.name ? cardIconAction.footer.name : null}\n      </div>\n\n      {/* footer actions (right) */}\n      <div role=\"group\">{footerBar}</div>\n    </div>\n  );\n\n  /* ----- final card layout ----- */\n  // We ALWAYS return a <div className=\"card ...\">.\n  // We NEVER wrap the whole card in <Link>.\n  // Only bodySection is link-wrapped if link is provided.\n  return (\n    <div\n      id={cardIconAction.id}\n      className={cardIconAction.className}\n    >\n      {headerSection}\n      {bodySection}\n      {footerSection}\n    </div>\n  );\n}\n\nexport default AlloyCardIconAction;\n","// src/components/tissue/AlloyCardImageAction.jsx\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CardImageObject } from \"./AlloyCardImage.jsx\";\n\nimport AlloyButtonBar, { ButtonBarObject } from \"./AlloyButtonBar.jsx\";\nimport AlloyLinkBar, { LinkBarObject } from \"./AlloyLinkBar.jsx\";\nimport { TagObject } from \"../../utils/idHelper.js\";\n\n/* ------------------------------------------------------------------\n * CardImageActionObject\n *\n * Extends CardImageObject and standardizes the \"action card\" contract.\n *\n * Keeps from CardImageObject:\n *   - id\n *   - className\n *   - link                // IMPORTANT: same semantics as the other cards;\n *                         // ONLY the body is allowed to be clickable.\n *   - logo, logoClass, textClass\n *\n * Re-normalizes:\n *   - header: TagObject        (optional, render only if .name)\n *   - body:   TagObject        (REQUIRED-ish; we normalize)\n *   - fields: TagObject[]      (text rows in body right column)\n *   - footer: TagObject        (REQUIRED-ish; always rendered)\n *\n * Adds footer action bar:\n *   - type:   \"AlloyButtonBar\" | \"AlloyLinkBar\"\n *   - action: ButtonBarObject  | LinkBarObject\n * ------------------------------------------------------------------ */\nexport class CardImageActionObject extends CardImageObject {\n  /**\n   * @param {{\n   *   id?: string,\n   *   className?: string,\n   *\n   *   link?: string,               // we keep it in the model - only body clickable\n   *\n   *   header?: TagObject|object,\n   *   body?: TagObject|object,     // required-ish\n   *   fields?: Array<TagObject|object>,\n   *   footer?: TagObject|object,   // required-ish\n   *\n   *   logo?: object,\n   *   logoClass?: string,\n   *   textClass?: string,\n   *\n   *   type?: \"AlloyButtonBar\"|\"AlloyLinkBar\",\n   *   action?: object\n   * }=} res\n   */\n  constructor(res = {}) {\n    // CardImageObject hydrates:\n    //   id, className, link,\n    //   header/body/footer (but we'll override below),\n    //   fields, logo, logoClass, textClass\n    super(res);\n\n    // We keep this.link exactly as super() set it:\n    // this.link = typeof res.link === \"string\" ? res.link : \"\"\n\n    // Normalize/override header/body/footer/fields into consistent TagObjects.\n    this.header =\n      res.header instanceof TagObject\n        ? res.header\n        : new TagObject(\n            res.header || {\n              className: \"card-header py-2 fw-semibold\",\n              name: \"\",\n            }\n          );\n\n    this.body =\n      res.body instanceof TagObject\n        ? res.body\n        : new TagObject(\n            res.body || {\n              className: \"card-body d-flex align-items-center\",\n              name: \"Card Body\",\n            }\n          );\n\n    const rawFields = Array.isArray(res.fields) ? res.fields : [];\n    this.fields = rawFields.map((f, idx) =>\n      f instanceof TagObject\n        ? f\n        : new TagObject({\n            id: f?.id || `field_${idx + 1}`,\n            className: f?.className ?? \"\",\n            name: f?.name ?? \"\",\n          })\n    );\n\n    this.footer =\n      res.footer instanceof TagObject\n        ? res.footer\n        : new TagObject(\n            res.footer || {\n              className:\n                \"card-footer d-flex align-items-center justify-content-between flex-wrap gap-2 py-2\",\n              name: \"Footer\",\n            }\n          );\n\n    // hydrate footer action bar\n    this.type = res.type ?? \"AlloyButtonBar\";\n    switch (this.type) {\n      case \"AlloyLinkBar\": {\n        this.action =\n          res.action instanceof LinkBarObject\n            ? res.action\n            : new LinkBarObject(\n                res.action || {\n                  className: \"nav gap-2\",\n                  linkClass: \"nav-item\",\n                  barName: { show: false },\n                  type: \"AlloyLink\",\n                  links: [],\n                }\n              );\n        break;\n      }\n\n      case \"AlloyButtonBar\":\n      default: {\n        this.type = \"AlloyButtonBar\";\n        this.action =\n          res.action instanceof ButtonBarObject\n            ? res.action\n            : new ButtonBarObject(\n                res.action || {\n                  className: \"nav gap-2\",\n                  buttonClass: \"nav-item\",\n                  barName: { show: false },\n                  type: \"AlloyButton\",\n                  buttons: [],\n                }\n              );\n        break;\n      }\n    }\n  }\n}\n\n/* ------------------------------------------------------------------\n * AlloyCardImageAction\n *\n * Props:\n *   - cardImageAction: CardImageActionObject (required)\n *   - output?: (payload:any) => void\n *\n * Layout / behavior:\n *   - Root is ALWAYS <div className=\"card ...\">.\n *   - Header is never wrapped in a link.\n *   - Footer is never wrapped in a link.\n *   - ONLY the body becomes clickable if `cardImageAction.link` is set.\n *\n * Footer actions emit:\n * {\n *   type: \"action\",\n *   action: {\n *     id, name, title, href, className, iconClass,\n *     active, disabled, ariaLabel, tabIndex\n *   },\n *   card: {\n *     id, bodyId\n *   }\n * }\n * ------------------------------------------------------------------ */\nexport function AlloyCardImageAction({ cardImageAction, output }) {\n  if (\n    !cardImageAction ||\n    !(cardImageAction instanceof CardImageActionObject)\n  ) {\n    throw new Error(\n      \"AlloyCardImageAction requires `cardImageAction` (CardImageActionObject instance).\"\n    );\n  }\n\n  // translate footer bar item click -> parent output payload\n  function emitActionWrapper() {\n    return (self, e) => {\n      output?.({\n        type: \"action\",\n        action: {\n          id: self?.id,\n          name: self?.name,\n          title: self?.title,\n          href: self?.href,\n          className: self?.className,\n          iconClass: self?.icon?.iconClass,\n          active: self?.active,\n          disabled: !!self?.disabled,\n          ariaLabel: self?.ariaLabel,\n          tabIndex: self?.tabIndex,\n        },\n        card: {\n          id: cardImageAction.id,\n          bodyId: cardImageAction.body?.id,\n        },\n      });\n    };\n  }\n\n  /* ----- header (optional) ----- */\n  const headerHasContent =\n    cardImageAction.header && cardImageAction.header.name?.trim();\n  const headerSection = headerHasContent ? (\n    <div\n      id={cardImageAction.header.id}\n      className={\n        cardImageAction.header.className ||\n        \"card-header py-2 fw-semibold\"\n      }\n      aria-label={cardImageAction.header.name}\n    >\n      {cardImageAction.header.name}\n    </div>\n  ) : null;\n\n  /* ----- bodyInner (visual layout only, no link wrapper yet) ----- */\n  const bodyInner = (\n    <div\n      id={cardImageAction.body.id}\n      className={\n        cardImageAction.body.className ||\n        \"card-body d-flex align-items-center\"\n      }\n      aria-label={cardImageAction.body.name}\n    >\n      <div className=\"row m-0\">\n        {/* left: product / logo image */}\n        <div className={cardImageAction.logoClass}>\n          <img\n            src={cardImageAction.logo?.imageUrl}\n            alt={cardImageAction.logo?.alt}\n            style={{\n              width: cardImageAction.logo?.width,\n              height: cardImageAction.logo?.height,\n              maxWidth: \"100%\",\n              objectFit: \"contain\",\n            }}\n          />\n        </div>\n\n        {/* right: text lines */}\n        <div className={cardImageAction.textClass}>\n          <div className=\"row p-1\">\n            {cardImageAction.fields.map((field) =>\n              field?.name ? (\n                <div\n                  key={field.id}\n                  id={field.id}\n                  className={field.className}\n                >\n                  {field.name}\n                </div>\n              ) : null\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  /* ----- bodySection (ONLY this becomes clickable via link) ----- */\n  const bodySection = cardImageAction.link ? (\n    <Link\n      to={cardImageAction.link}\n      className=\"text-decoration-none d-block\"\n      aria-label={cardImageAction.body?.name}\n    >\n      {bodyInner}\n    </Link>\n  ) : (\n    bodyInner\n  );\n\n  /* ----- footer (required-ish) ----- */\n  const footerSection = (\n    <div\n      id={cardImageAction.footer.id}\n      className={\n        cardImageAction.footer.className ||\n        \"card-footer d-flex align-items-center justify-content-between flex-wrap gap-2 py-2\"\n      }\n      aria-label={cardImageAction.footer.name}\n    >\n      {/* footer text on the left */}\n      <div className=\"flex-grow-1\">\n        {cardImageAction.footer.name}\n      </div>\n\n      {/* action bar on the right */}\n      <div role=\"group\">\n        {cardImageAction.type === \"AlloyLinkBar\" ? (\n          <AlloyLinkBar\n            linkBar={cardImageAction.action}\n            output={emitActionWrapper()}\n          />\n        ) : (\n          <AlloyButtonBar\n            buttonBar={cardImageAction.action}\n            output={emitActionWrapper()}\n          />\n        )}\n      </div>\n    </div>\n  );\n\n  /* ----- final shell ----- */\n  // EXACT SAME PATTERN AS THE REST:\n  // - Outer wrapper is always <div className=\"card ...\">\n  // - Only bodySection becomes link-wrapped\n  // - Footer is safe for interactive actions\n  return (\n    <div\n      id={cardImageAction.id}\n      className={cardImageAction.className}\n    >\n      {headerSection}\n      {bodySection}\n      {footerSection}\n    </div>\n  );\n}\n\nexport default AlloyCardImageAction;\n","import React, {\n  useMemo,\n  useState,\n  useRef,\n  useCallback\n} from \"react\";\n\nimport AlloyInput, { InputObject } from \"../cell/AlloyInput.jsx\";\nimport {\n  AlloyButtonSubmit,\n  ButtonSubmitObject\n} from \"../cell/AlloyButtonSubmit.jsx\";\n\nimport { generateId } from \"../../utils/idHelper.js\";\n\n/* ------------------------------------------------------------------\n * FormObject\n *\n * A normalized \"form model\" that AlloyForm consumes.\n *\n * Fields:\n *   - id          : unique form id. Auto via generateId(\"form\") if missing.\n *   - title       : heading shown above the form\n *   - className   : wrapper column classes (\"col m-2\" by default)\n *   - message     : alert text shown above fields (\"\" hides it)\n *   - action      : opaque string you get back on submit\n *   - type        : informational only (e.g. \"AlloyInputTextIcon\")\n *\n *   - submit      : ButtonSubmitObject config for the submit CTA\n *   - fields[]    : array of InputObject configs\n *\n *   - data        : last submitted snapshot (AlloyForm will mutate it)\n * ------------------------------------------------------------------ */\nexport class FormObject {\n  constructor(res = {}) {\n    const {\n      id,\n      title = \"AlloyMobile\",\n      className = \"col m-2\",\n      message = \"\",\n      action = \"\",\n      type = \"AlloyInputTextIcon\",\n      submit,\n      fields,\n      data\n    } = res;\n\n    // Consistent ID creation across the app.\n    // If caller didn't supply an id, we generate one with the shared helper.\n    this.id = id ?? generateId(\"form\");\n\n    this.title = title;\n    this.className = className;\n    this.message = message;\n    this.action = action;\n    this.type = type;\n\n    // hydrate submit into ButtonSubmitObject\n    this.submit =\n      submit instanceof ButtonSubmitObject\n        ? submit\n        : new ButtonSubmitObject(\n            submit || {\n              // sane defaults\n              name: \"Submit\",\n              icon: { iconClass: \"fa-solid fa-circle-notch fa-spin\" },\n              className: \"btn btn-primary w-100 mt-3\",\n              disabled: false,\n              loading: false,\n              ariaLabel: \"Submit\",\n              title: \"Submit\"\n            }\n          );\n\n    // hydrate fields into InputObject[]\n    const rawFields = Array.isArray(fields) ? fields : [];\n    this.fields = rawFields.map((fld) =>\n      fld instanceof InputObject ? fld : new InputObject(fld)\n    );\n\n    // remember last submit snapshot\n    this.data = data ?? {};\n  }\n}\n\n/* ------------------------------------------------------------------\n * validateField(fieldDef, value, allValues)\n *\n * Runs core validation for a single field:\n *   - required\n *   - minLength / maxLength\n *   - pattern\n *   - passwordStrength\n *   - matchWith (compare to some other field by name)\n *\n * Returns { valid, error, errors[] }\n * ------------------------------------------------------------------ */\nfunction validateField(fieldDef, value, allValues) {\n  let isValid = true;\n  const errs = [];\n\n  // required\n  if (fieldDef.required) {\n    if (fieldDef.type === \"checkbox\") {\n      const arrVal = Array.isArray(value) ? value : [];\n      if (arrVal.length === 0) {\n        isValid = false;\n        errs.push(\"This field is required.\");\n      }\n    } else {\n      const empty =\n        value === \"\" ||\n        value === false ||\n        value === undefined ||\n        value === null;\n      if (empty) {\n        isValid = false;\n        errs.push(\"This field is required.\");\n      }\n    }\n  }\n\n  // minLength\n  if (\n    isValid &&\n    typeof fieldDef.minLength === \"number\" &&\n    typeof value === \"string\" &&\n    value.length < fieldDef.minLength\n  ) {\n    isValid = false;\n    errs.push(`Minimum length is ${fieldDef.minLength}`);\n  }\n\n  // maxLength\n  if (\n    isValid &&\n    typeof fieldDef.maxLength === \"number\" &&\n    typeof value === \"string\" &&\n    value.length > fieldDef.maxLength\n  ) {\n    isValid = false;\n    errs.push(`Maximum length is ${fieldDef.maxLength}`);\n  }\n\n  // pattern\n  if (\n    isValid &&\n    fieldDef.pattern &&\n    typeof value === \"string\" &&\n    !(new RegExp(fieldDef.pattern).test(value))\n  ) {\n    isValid = false;\n    errs.push(\"Invalid format.\");\n  }\n\n  // passwordStrength\n  if (isValid && fieldDef.passwordStrength && typeof value === \"string\") {\n    // must contain:\n    // - lowercase\n    // - uppercase\n    // - digit\n    // - at least 8 chars\n    const strongRegex = /(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}/;\n    if (!strongRegex.test(value)) {\n      isValid = false;\n      errs.push(\"Password is too weak.\");\n    }\n  }\n\n  // matchWith\n  if (isValid && fieldDef.matchWith) {\n    const otherName = fieldDef.matchWith;\n    const otherVal = allValues[otherName];\n    if (otherVal !== value) {\n      isValid = false;\n      errs.push(\"Values do not match.\");\n    }\n  }\n\n  return {\n    valid: isValid,\n    error: !isValid,\n    errors: errs\n  };\n}\n\n/* ------------------------------------------------------------------\n * AlloyForm\n *\n * Props:\n *   - form: FormObject | plain JSON config\n *   - output?: (finalOut:any) => void\n *\n * Behavior:\n *   - Hydrates the model into a FormObject (so IDs/fields are normalized).\n *   - Tracks value+validation for every field in internal state.\n *   - Disables submit until all fields are valid.\n *   - On submit, emits { ...values, action: form.action } via `output`.\n *\n * Accessibility:\n *   - Each AlloyInput already handles aria-invalid and aria-live for errors.\n * ------------------------------------------------------------------ */\nexport function AlloyForm({ form, output }) {\n  //\n  // 1. Hydrate prop -> FormObject with consistent IDs.\n  //\n  const hydrated =\n    form instanceof FormObject ? form : new FormObject(form || {});\n\n  if (\n    !hydrated ||\n    !Array.isArray(hydrated.fields) ||\n    !(hydrated.submit instanceof ButtonSubmitObject)\n  ) {\n    throw new Error(\n      \"AlloyForm could not hydrate a valid FormObject (missing fields[] or submit).\"\n    );\n  }\n\n  //\n  // 2. Initialize per-field state.\n  //    We'll keep { value, valid, error, errors } for each field by name.\n  //\n  const [fieldState, setFieldState] = useState(() => {\n    const init = {};\n\n    // gather initial values so matchWith works on first pass\n    const initialValues = {};\n    hydrated.fields.forEach((fld) => {\n      initialValues[fld.name] = fld.value;\n    });\n\n    hydrated.fields.forEach((fld) => {\n      const val = fld.value;\n      const { valid, error, errors } = validateField(\n        fld,\n        val,\n        initialValues\n      );\n      init[fld.name] = {\n        value: val,\n        valid,\n        error,\n        errors\n      };\n    });\n\n    return init;\n  });\n\n  const submitRef = useRef(null);\n\n  //\n  // 3. recomputeAllValidity(draftFieldState)\n  //    Given a draft of { [fname]: {value,...} }, run validation on all fields,\n  //    including cross-field checks like matchWith.\n  //\n  const recomputeAllValidity = useCallback(\n    (draftFieldState) => {\n      const valuesMap = {};\n      Object.keys(draftFieldState).forEach((fname) => {\n        valuesMap[fname] = draftFieldState[fname].value;\n      });\n\n      const nextState = {};\n      hydrated.fields.forEach((fld) => {\n        const currentVal = valuesMap[fld.name];\n        const { valid, error, errors } = validateField(\n          fld,\n          currentVal,\n          valuesMap\n        );\n        nextState[fld.name] = {\n          value: currentVal,\n          valid,\n          error,\n          errors\n        };\n      });\n\n      return nextState;\n    },\n    [hydrated.fields]\n  );\n\n  //\n  // 4. When a field updates (AlloyInput.output),\n  //    update that one field's value, then fully revalidate.\n  //\n  function handleFieldOutput(fieldPayload) {\n    if (!fieldPayload || !fieldPayload.name) return;\n    const { name, value } = fieldPayload;\n\n    setFieldState((prev) => {\n      const draft = { ...prev };\n      draft[name] = {\n        ...prev[name],\n        value\n      };\n\n      return recomputeAllValidity(draft);\n    });\n  }\n\n  //\n  // 5. Build a flat { [fieldName]: value } map for submit.\n  //\n  const dataPayload = useMemo(() => {\n    const out = {};\n    Object.keys(fieldState).forEach((fname) => {\n      out[fname] = fieldState[fname].value;\n    });\n    return out;\n  }, [fieldState]);\n\n  //\n  // 6. Disable submit if ANY field invalid.\n  //\n  const isAnyInvalid = useMemo(() => {\n    return Object.values(fieldState).some(\n      (f) => f.error || !f.valid\n    );\n  }, [fieldState]);\n\n  //\n  // 7. Submit handler.\n  //\n  function handleSubmit(btnModel /* ButtonSubmitObject */, e) {\n    const finalOut = {\n      ...dataPayload,\n      action: hydrated.action\n    };\n\n    // snapshot on the hydrated form instance\n    hydrated.data = finalOut;\n    hydrated.message = \"\";\n\n    output?.(finalOut);\n  }\n\n  //\n  // 8. Keep submit button disabled/reactive.\n  //\n  hydrated.submit.disabled =\n    isAnyInvalid || !!hydrated.submit.loading;\n\n  //\n  // 9. Render the form block.\n  //\n  return (\n    <div className=\"row\">\n      <div className={hydrated.className}>\n        <div className=\"text-center\">\n          {/* Title */}\n          <h3>{hydrated.title}</h3>\n\n          {/* message / alert area */}\n          {hydrated.message !== \"\" && (\n            <div className=\"alert alert-text-danger m-0 p-0\">\n              {hydrated.message}\n            </div>\n          )}\n\n          {/* Fields */}\n          {hydrated.fields.map((fld) => (\n            <AlloyInput\n              key={fld.id}\n              input={fld}\n              output={handleFieldOutput}\n            />\n          ))}\n\n          {/* Submit */}\n          <AlloyButtonSubmit\n            ref={submitRef}\n            buttonSubmit={hydrated.submit}\n            output={handleSubmit}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AlloyForm;\n"],"names":["generateId","prefix","ts","rand","TagObject","tag","id","name","className","IconObject","icon","AlloyIcon","jsx","useActiveClass","active","hovered","setHovered","useState","pressed","setPressed","focused","setFocused","useMemo","LinkObject","link","AlloyLink","autoId","useRef","events","safeRel","useActiveClassIcon","LinkIconObject","linkIcon","normalizedIcon","AlloyLinkIcon","hasLabel","jsxs","useActiveClassLogo","LinkLogoObject","linkLogo","AlloyLinkLogo","ButtonObject","button","AlloyButton","forwardRef","output","ref","elRef","isDisabled","useImperativeHandle","_a","emitThen","handler","alsoCallInternal","e","mergedEvents","ButtonIconObject","buttonIcon","AlloyButtonIcon","ButtonSubmitObject","buttonSubmit","AlloyButtonSubmit","loading","setLoading","firedRef","useEffect","nextLoading","arm","emit","handleClick","handleMouseDown","handleKeyDown","key","showIcon","InputObject","config","type","label","value","layout","placeholder","required","minLength","maxLength","min","max","pattern","matchWith","passwordStrength","options","validators","rest","initialValue","AlloyInput","input","val","setVal","touched","setTouched","validate","candidate","errs","trimmed","isEmptyArray","isEmptyScalar","currentErrors","showError","errorBlock","msg","i","nextVal","handleChange","v","prev","idx","commonControlProps","withInvalid","base","renderTextarea","renderSelect","o","renderRadioGroup","renderCheckboxGroup","renderTextLike","renderControl","LinkBarObject","bar","rawLinks","item","cloneWithActiveAndClick","injectedActiveClass","isSelected","wrapClickFn","activeClass","AlloyLinkBar","linkBar","ulIdRef","selectedId","setSelectedId","Title","wrapClick","original","nextId","renderLinks","cloned","ButtonBarObject","rawButtons","b","cloneWithActiveAndWrapOutput","btnModel","parentOutput","passUp","self","AlloyButtonBar","buttonBar","renderAlloyButtonList","clonedBtn","onAnyEvent","renderAlloyButtonIconList","renderBody","NavBarObject","nav","fallbackLogoConfig","rawLinkBar","AlloyNavBar","navBar","navIdRef","collapseId","capitalize","s","TableObject","table","fallbackRowIcon","fallbackSortIcon","normalizedSortIcon","getHeaderKeys","rows","k","AlloyTable","tableIdRef","sort","setSort","headerKeys","handleHeaderClick","colName","nextDir","handleRowClick","rowId","isActive","isDesc","row","_extends","target","source","Action","invariant","message","warning","cond","createPath","_ref","pathname","search","hash","parsePath","path","parsedPath","hashIndex","searchIndex","ResultType","matchPath","matcher","compiledParams","compilePath","match","matchedPathname","pathnameBase","captureGroups","memo","index","paramName","isOptional","splatValue","caseSensitive","end","params","regexpSource","_","stripBasename","basename","startIndex","nextChar","resolvePath","to","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativePath","segments","segment","getInvalidPathError","char","field","dest","getPathContributingMatches","matches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","joinPaths","paths","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","React","DataRouterStateContext","AwaitContext","NavigationContext","LocationContext","RouteContext","RouteErrorContext","useHref","_temp","relative","useInRouterContext","UNSAFE_invariant","navigator","useResolvedPath","joinedPathname","useLocation","navigateEffectWarning","useIsomorphicLayoutEffect","cb","useNavigate","isDataRoute","useNavigateStable","useNavigateUnstable","dataRouterContext","future","routePathnamesJson","UNSAFE_getResolveToMatches","activeRef","UNSAFE_warning","_temp2","DataRouterHook","DataRouterStateHook","getDataRouterConsoleError","hookName","useDataRouterContext","ctx","useRouteContext","route","useCurrentRouteId","thisRoute","useRouteId","router","_objectWithoutPropertiesLoose","excluded","sourceKeys","defaultMethod","defaultEncType","isHtmlElement","object","isButtonElement","isFormElement","isInputElement","isModifiedEvent","event","shouldProcessLinkClick","_formDataSupportsSubmitter","isFormDataSubmitterSupported","supportedFormEncTypes","getFormEncType","encType","getFormSubmissionInfo","method","action","formData","body","attr","form","_excluded","_excluded2","_excluded3","REACT_ROUTER_VERSION","ViewTransitionContext","FetchersContext","isBrowser","ABSOLUTE_URL_REGEX","Link","_ref7","onClick","reloadDocument","replace","state","preventScrollReset","viewTransition","UNSAFE_NavigationContext","absoluteHref","isExternal","currentUrl","targetUrl","href","internalOnClick","useLinkClickHandler","NavLink","_ref8","ariaCurrentProp","classNameProp","styleProp","children","location","routerState","UNSAFE_DataRouterStateContext","isTransitioning","useViewTransitionState","nextLocationPathname","endSlashPosition","isPending","renderProps","ariaCurrent","style","Form","_ref9","forwardedRef","fetcherKey","navigate","onSubmit","props","submit","useSubmit","formAction","useFormAction","formMethod","submitHandler","submitter","submitMethod","UNSAFE_DataRouterContext","replaceProp","validateClientSideSubmission","fetcherId","getUniqueFetcherId","currentRouteId","UNSAFE_useRouteId","routeContext","UNSAFE_RouteContext","indexValues","qs","opts","vtContext","currentPath","nextPath","TableLinkObject","tableLink","AlloyTableLink","first","TableActionObject","cfg","defaultIcon","defaultSort","AlloyTableAction","tableAction","tblIdRef","makeRowActionEmitter","hasActionsBar","rowBar","cleanedBase","CardObject","card","tmp","rawFields","blk","AlloyCard","headerSection","bodyInner","bodySection","footerSection","CardIconObject","cardIcon","AlloyCardIcon","headerBlock","_b","bodyBlock","_c","footerBlock","_d","LogoObject","logo","CardImageObject","f","AlloyCardImage","cardImage","fieldObj","CardActionObject","cardAction","rawHeader","rawBody","rawFooter","rawAction","AlloyCardAction","handleBarOutput","CardIconActionObject","AlloyCardIconAction","cardIconAction","makeActionEmitter","footerBar","CardImageActionObject","res","AlloyCardImageAction","cardImageAction","emitActionWrapper","_e","_f","FormObject","title","fields","data","fld","validateField","fieldDef","allValues","isValid","otherName","AlloyForm","hydrated","fieldState","setFieldState","init","initialValues","valid","error","errors","submitRef","recomputeAllValidity","useCallback","draftFieldState","valuesMap","fname","nextState","currentVal","handleFieldOutput","fieldPayload","draft","dataPayload","out","isAnyInvalid","handleSubmit","finalOut"],"mappings":"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","x_google_ignoreList":[13,14,15]}