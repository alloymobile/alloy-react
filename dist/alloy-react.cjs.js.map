{"version":3,"file":"alloy-react.cjs.js","sources":["../src/components/cell/AlloyIcon.jsx","../src/components/cell/AlloyLink.jsx","../src/components/cell/AlloyLinkIcon.jsx","../src/components/cell/AlloyLinkLogo.jsx","../src/components/cell/AlloyButton.jsx","../src/components/cell/AlloyButtonIcon.jsx","../src/components/cell/AlloyButtonSubmit.jsx","../src/components/cell/AlloyInput.jsx","../src/components/tissue/AlloyLinkBar.jsx","../src/components/tissue/AlloyButtonBar.jsx","../src/components/tissue/AlloyNavBar.jsx","../src/components/tissue/AlloyTable.jsx","../node_modules/@remix-run/router/dist/router.js","../node_modules/react-router/dist/index.js","../node_modules/react-router-dom/dist/index.js","../src/components/tissue/AlloyTableLink.jsx","../src/components/tissue/AlloyTableAction.jsx"],"sourcesContent":["import React from \"react\";\n\n/** Incrementing ID: icon1, icon2, ... */\nlet __iconCounter = 0;\nfunction nextIconId() {\n  __iconCounter += 1;\n  return `alloyIcon${__iconCounter}`;\n}\n\n/**\n * Icon object with two properties:\n * - id?: string  (auto-generated if omitted)\n * - iconClass: string  (Font Awesome classes, e.g., \"fa-solid fa-user\")\n */\nexport class IconObject {\n  /**\n   * @param {{ id?: string, iconClass: string }} params\n   */\n  constructor({ id, iconClass }) {\n    if (!iconClass) throw new Error(\"Icon requires iconClass\");\n    this.id = id ?? nextIconId();\n    this.iconClass = iconClass;\n  }\n}\n\n/**\n * AlloyIcon: accepts ONLY an `icon` prop (instance of Icon).\n * Renders an <i> with the provided id and classes.\n */\nexport function AlloyIcon({ icon }) {\n  if (!icon) throw new Error(\"AlloyIcon requires `icon` prop (Icon instance).\");\n  return <i id={icon.id} className={icon.iconClass} aria-hidden=\"true\" />;\n}\n\nexport default AlloyIcon;\n","import React, { useMemo, useRef, useState } from \"react\";\n\nlet __linkCounter = 0;\nfunction nextLinkId() {\n  __linkCounter += 1;\n  return `alloyLink${__linkCounter}`;\n}\n\n// ---- Active class hook ----\nfunction useActiveClass(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => {\n        setHovered(false);\n        setPressed(false);\n      },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n// ---- Classes ----\nexport class LinkObject {\n  /**\n   * @param {{ id?: string, name?: string, link: string, className?: string, active?: string, target?: string, rel?: string, onClick?: (e: any)=>void, title?: string }} p\n   */\n  constructor({\n    id,\n    name,\n    href,\n    className,\n    active,\n    target,\n    rel,\n    onClick,\n    title,\n  }) {\n    if (!href) throw new Error(\"LinkObject requires `href`.\");\n    this.id = id ?? nextLinkId();\n    this.name = name; \n    this.href = href;\n    this.className = className ?? \"\";\n    this.active = active ?? \"\";\n    this.target = target;\n    this.rel = rel;\n    this.onClick = onClick;\n    this.title = title;\n  }\n}\n\n// ---- Component ----\n/**\n * AlloyLink â€” accepts ONLY a LinkObject instance via `link`.\n */\nexport function AlloyLink({ link }) {\n  if (!link || !(link instanceof LinkObject)) {\n    throw new Error(\"AlloyLink requires `link` (LinkObject instance).\");\n  }\n  if (!link.name) throw new Error(\"AlloyLink requires `link.name`.\");\n\n  const autoId = useRef(link.id);\n  const { className, events } = useActiveClass(link.className, link.active);\n  const rel =\n    link.target === \"_blank\"\n      ? link.rel\n        ? `${link.rel} noopener noreferrer`\n        : \"noopener noreferrer\"\n      : link.rel;\n\n  return (\n    <a\n      id={autoId.current}\n      href={link.href}\n      className={className}\n      target={link.target}\n      rel={rel}\n      onClick={link.onClick}\n      title={link.title}\n      {...events}\n    >\n      <span>{link.name}</span>\n    </a>\n  );\n}\nexport default AlloyLink;","import React, { useMemo, useRef, useState } from \"react\";\nimport { AlloyIcon,  IconObject } from \"./AlloyIcon\";\n\nlet __iconLinkCounter = 0;\nfunction nextLinkIconId() {\n  __iconLinkCounter += 1;\n  return `alloyLinkIcon${__iconLinkCounter}`;\n}\n\nfunction useActiveClassIcon(className = \"\", active = \"\") {\n  const [h, setH] = useState(false);\n  const [p, setP] = useState(false);\n  const [f, setF] = useState(false);\n  const merged = useMemo(\n    () => [className, (h || p || f) && active].filter(Boolean).join(\" \"),\n    [className, active, h, p, f]\n  );\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setH(true),\n      onMouseLeave: () => {\n        setH(false);\n        setP(false);\n      },\n      onMouseDown: () => setP(true),\n      onMouseUp: () => setP(false),\n      onFocus: () => setF(true),\n      onBlur: () => setF(false),\n    },\n  };\n}\n\nexport class LinkIconObject {\n  /**\n   * @param {{ id?: string, link: string, icon: Icon, name?: string, className?: string, active?: string, target?: string, rel?: string, onClick?: (e:any)=>void, title?: string }} p\n   */\n  constructor({\n    id,\n    href,\n    icon,\n    name,\n    className,\n    active,\n    target,\n    rel,\n    onClick,\n    title,\n  }) {\n    if (!href) throw new Error(\"LinkIconObject requires `href`.\");\n    if (!icon || !(icon instanceof IconObject))\n      throw new Error(\"LinkIconObject requires `icon` (Icon instance).\");\n    this.id = id ?? nextLinkIconId();\n    this.href = href;\n    this.icon = icon instanceof IconObject ? icon : new IconObject(icon);\n    this.name = name; \n    this.className = className ?? \"\";\n    this.active = active ?? \"\";\n    this.target = target;\n    this.rel = rel;\n    this.onClick = onClick;\n    this.title = title;\n  }\n}\n\nexport function AlloyLinkIcon({ linkIcon }) {\n  if (!linkIcon || !(linkIcon instanceof LinkIconObject)) {\n    throw new Error(\"AlloyLinkIcon requires `linkIcon` (LinkIconObject instance).\");\n  }\n  const autoId = useRef(linkIcon.id);\n  const { className, events } = useActiveClassIcon(linkIcon.className, linkIcon.active);\n  const rel =\n    linkIcon.target === \"_blank\"\n      ? linkIcon.rel\n        ? `${linkIcon.rel} noopener noreferrer`\n        : \"noopener noreferrer\"\n      : linkIcon.rel;\n  const hasLabel = Boolean(linkIcon.name);\n\n  return (\n    <a\n      id={autoId.current}\n      href={linkIcon.href}\n      className={className}\n      target={linkIcon.target}\n      rel={rel}\n      onClick={linkIcon.onClick}\n      title={linkIcon.title}\n      {...events}\n    >\n      <span>\n        <AlloyIcon icon={linkIcon.icon} />\n        {hasLabel && <span className=\"px-1\">{linkIcon.name}</span>}\n      </span>\n    </a>\n  );\n}\nexport default AlloyLinkIcon;","import React, { useMemo, useRef, useState } from \"react\";\n\nlet __logoLinkCounter = 0;\nfunction nextLogoLinkId() {\n  __logoLinkCounter += 1;\n  return `alloyLinkLogo${__logoLinkCounter}`;\n}\n\nfunction useActiveClassLogo(className = \"\", active = \"\") {\n  const [h, setH] = useState(false);\n  const [p, setP] = useState(false);\n  const [f, setF] = useState(false);\n  const merged = useMemo(\n    () => [className, (h || p || f) && active].filter(Boolean).join(\" \"),\n    [className, active, h, p, f]\n  );\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setH(true),\n      onMouseLeave: () => {\n        setH(false);\n        setP(false);\n      },\n      onMouseDown: () => setP(true),\n      onMouseUp: () => setP(false),\n      onFocus: () => setF(true),\n      onBlur: () => setF(false),\n    },\n  };\n}\n\nexport class LinkLogoObject {\n  /**\n   * @param {{ id?: string, name?: string, link: string, logo: string, width?: number|string, height?: number|string, logoAlt?: string, className?: string, active?: string, target?: string, rel?: string, onClick?: (e:any)=>void, title?: string }} p\n   */\n  constructor({\n    id,\n    name,\n    href,\n    logo,\n    width,\n    height,\n    logoAlt = \"\",\n    className,\n    active,\n    target,\n    rel,\n    onClick,\n    title,\n  }) {\n    if (!href) throw new Error(\"LinkLogoObject requires `href`.\");\n    if (!logo) throw new Error(\"LinkLogoObject requires `logo`.\");\n    this.id = id ?? nextLogoLinkId();\n    this.name = name; \n    this.href = href;\n    this.logo = logo;\n    this.width = width;\n    this.height = height;\n    this.logoAlt = logoAlt;\n    this.className = className ?? \"\";\n    this.active = active ?? \"\";\n    this.target = target;\n    this.rel = rel;\n    this.onClick = onClick;\n    this.title = title;\n  }\n}\n\nexport function AlloyLinkLogo({ linkLogo }) {\n  if (!linkLogo || !(linkLogo instanceof LinkLogoObject)) {\n    throw new Error(\"AlloyLinkLogo requires `linkLogo` (LinkLogoObject instance).\");\n  }\n  const autoId = useRef(linkLogo.id);\n  const { className, events } = useActiveClassLogo(linkLogo.className, linkLogo.active);\n  const rel =\n    linkLogo.target === \"_blank\"\n      ? linkLogo.rel\n        ? `${linkLogo.rel} noopener noreferrer`\n        : \"noopener noreferrer\"\n      : linkLogo.rel;\n      const hasLabel = Boolean(linkLogo.name);\n\n  return (\n    <a\n      id={autoId.current}\n      href={linkLogo.href}\n      className={className}\n      target={linkLogo.target}\n      rel={rel}\n      onClick={linkLogo.onClick}\n      title={linkLogo.title}\n      {...events}\n    >\n      <span>\n        <img\n          src={linkLogo.logo}\n          alt={linkLogo.logoAlt || linkLogo.name}\n          width={linkLogo.width}\n          height={linkLogo.height}\n          style={{ display: \"inline-block\" }}\n        />\n        {hasLabel && <span className=\"px-1\">{linkLogo.name}</span>}\n      </span>\n    </a>\n  );\n}\nexport default AlloyLinkLogo;","// AlloyButton.jsx\nimport React, {\n  useMemo,\n  useRef,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\n\n/* -------------------- id generator -------------------- */\nlet __btnCounter = 0;\nfunction nextButtonId() {\n  __btnCounter += 1;\n  return `alloyBtn${__btnCounter}`;\n}\n\n/* -------------------- hover/press/focus â†’ class merge -------------------- */\nfunction useActiveClass(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => {\n        setHovered(false);\n        setPressed(false);\n      },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n/* -------------------- ButtonObject (only `name` required) -------------------- */\n/**\n * Fields:\n *  - id?: string\n *  - name: string (required)\n *  - className?: string\n *  - active?: string        // class applied on hover/press/focus\n *  - disabled?: boolean\n *  - title?: string         // tooltip\n *  - ariaLabel?: string     // screen-reader label; defaults to `name`\n *  - tabIndex?: number\n *  - onClick? / onKeyDown? / onKeyUp? / onFocus? / onBlur? / onMouseEnter? / onMouseLeave?\n *      (each receives (event, self: ButtonObject))\n */\nexport class ButtonObject {\n  constructor(p) {\n    if (!p || !p.name) throw new Error(\"ButtonObject requires `name`.\");\n    this.id = p.id ?? nextButtonId();\n    this.name = p.name;\n\n    this.className = p.className ?? \"\";\n    this.active = p.active ?? \"\";\n    this.disabled = !!p.disabled;\n    this.title = p.title;\n    this.ariaLabel = p.ariaLabel;\n    this.tabIndex = p.tabIndex;\n\n    // optional per-event callbacks\n    this.onClick = p.onClick;\n    this.onKeyDown = p.onKeyDown;\n    this.onKeyUp = p.onKeyUp;\n    this.onFocus = p.onFocus;\n    this.onBlur = p.onBlur;\n    this.onMouseEnter = p.onMouseEnter;\n    this.onMouseLeave = p.onMouseLeave;\n  }\n}\n\n/* -------------------- AlloyButton (object-only input + separate output prop) -------------------- */\n/**\n * Props:\n *  - button: ButtonObject (required)\n *  - output?: (self: ButtonObject, e?: any) => void   // fires on ALL events\n *\n * Ref exposes:\n *   ref.current = {\n *     el,        // underlying <button> element\n *     model,     // the same ButtonObject instance you passed\n *     focus(),   // focus the button\n *     click(),   // click the button\n *   }\n */\nexport const AlloyButton = forwardRef(function AlloyButton({ button, output }, ref) {\n  if (!button || !(button instanceof ButtonObject)) {\n    throw new Error(\"AlloyButton requires `button` (ButtonObject instance).\");\n  }\n\n  const elRef = useRef(null);\n  const autoId = useRef(button.id);\n  const isDisabled = button.disabled;\n\n  const { className, events } = useActiveClass(button.className, button.active);\n\n  // Expose DOM + model + helpers via ref\n  useImperativeHandle(\n    ref,\n    () => ({\n      el: elRef.current,\n      model: button,\n      focus: () => elRef.current?.focus(),\n      click: () => elRef.current?.click(),\n    }),\n    [button]\n  );\n\n  // helper: fire output(self, event) first, then specific handler(self, event)\n  const emitThen = (handler, alsoCallInternal) => (e) => {\n    alsoCallInternal?.(e);      // keep internal hover/focus state\n    output?.(button, e);        // Angular-style, for ALL events\n    handler?.(e, button);       // optional per-event model handler\n  };\n\n  const mergedEvents = {\n    onClick: emitThen(button.onClick),\n    onKeyDown: emitThen(button.onKeyDown, events.onFocus),\n    onKeyUp: emitThen(button.onKeyUp),\n    onFocus: emitThen(button.onFocus, events.onFocus),\n    onBlur: emitThen(button.onBlur, events.onBlur),\n    onMouseEnter: emitThen(button.onMouseEnter, events.onMouseEnter),\n    onMouseLeave: emitThen(button.onMouseLeave, events.onMouseLeave),\n    onMouseDown: emitThen(undefined, events.onMouseDown),\n    onMouseUp: emitThen(undefined, events.onMouseUp),\n  };\n\n  return (\n    <button\n      id={autoId.current}\n      ref={elRef}\n      type=\"button\"  \n      className={className}\n      title={button.title}\n      aria-label={button.ariaLabel || button.name}\n      aria-disabled={isDisabled || undefined}\n      disabled={isDisabled}\n      tabIndex={button.tabIndex}\n      {...mergedEvents}\n    >\n      <span className=\"px-2 align-middle\">{button.name}</span>\n    </button>\n  );\n});\n\nexport default AlloyButton;\n","// AlloyButtonIcon.jsx\nimport React, {\n  useMemo,\n  useRef,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport AlloyIcon, { IconObject } from \"./AlloyIcon.jsx\";\n\n/* --------------- id generator --------------- */\nlet __btnIconCounter = 0;\nfunction nextButtonIconId() {\n  __btnIconCounter += 1;\n  return `alloyBtnicon${__btnIconCounter}`;\n}\n\n/* --------------- hover/press/focus â†’ class merge --------------- */\nfunction useActiveClass(className = \"\", active = \"\") {\n  const [hovered, setHovered] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [focused, setFocused] = useState(false);\n\n  const merged = useMemo(() => {\n    const on = hovered || pressed || focused;\n    return [className, on && active].filter(Boolean).join(\" \");\n  }, [className, active, hovered, pressed, focused]);\n\n  return {\n    className: merged,\n    events: {\n      onMouseEnter: () => setHovered(true),\n      onMouseLeave: () => { setHovered(false); setPressed(false); },\n      onMouseDown: () => setPressed(true),\n      onMouseUp: () => setPressed(false),\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n  };\n}\n\n/* --------------- ButtonIconObject (name optional) --------------- */\n/**\n * Fields:\n *  - id?: string\n *  - name?: string                   // OPTIONAL; if omitted -> icon-only button\n *  - icon: IconObject                // REQUIRED\n *  - className?: string\n *  - active?: string\n *  - disabled?: boolean\n *  - title?: string\n *  - ariaLabel?: string              // falls back to name or \"icon button\"\n *  - tabIndex?: number\n *  - onClick? / onKeyDown? / onKeyUp? / onFocus? / onBlur? / onMouseEnter? / onMouseLeave?\n *      (each receives (event, self: ButtonIconObject))\n */\nexport class ButtonIconObject {\n  constructor(p) {\n    if (!p || !p.icon) throw new Error(\"ButtonIconObject requires `icon` (IconObject).\");\n\n    this.id = p.id ?? nextButtonIconId();\n    this.name = p.name; // optional\n    this.icon = p.icon instanceof IconObject ? p.icon : new IconObject(p.icon);\n\n    this.className = p.className ?? \"\";\n    this.active = p.active ?? \"\";\n    this.disabled = !!p.disabled;\n    this.title = p.title;\n    this.ariaLabel = p.ariaLabel;\n    this.tabIndex = p.tabIndex;\n\n    // optional per-event callbacks\n    this.onClick = p.onClick;\n    this.onKeyDown = p.onKeyDown;\n    this.onKeyUp = p.onKeyUp;\n    this.onFocus = p.onFocus;\n    this.onBlur = p.onBlur;\n    this.onMouseEnter = p.onMouseEnter;\n    this.onMouseLeave = p.onMouseLeave;\n  }\n}\n\n/* --------------- AlloyButtonIcon --------------- */\n/**\n * Props:\n *  - buttonIcon: ButtonIconObject (required)\n *  - output?: (self: ButtonIconObject, e?: any) => void   // fires on ALL events\n *\n * Ref:\n *   ref.current = { el, model, focus(), click() }\n */\nexport const AlloyButtonIcon = forwardRef(function AlloyButtonIcon({ buttonIcon, output }, ref) {\n  if (!buttonIcon || !(buttonIcon instanceof ButtonIconObject)) {\n    throw new Error(\"AlloyButtonIcon requires `buttonIcon` (ButtonIconObject instance).\");\n  }\n\n  const elRef = useRef(null);\n  const autoId = useRef(buttonIcon.id);\n  const isDisabled = buttonIcon.disabled;\n\n  const { className, events } = useActiveClass(buttonIcon.className, buttonIcon.active);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      el: elRef.current,\n      model: buttonIcon,\n      focus: () => elRef.current?.focus(),\n      click: () => elRef.current?.click(),\n    }),\n    [buttonIcon]\n  );\n\n  // Emit output(self, event) first, then optional model handler\n  const emitThen = (handler, alsoCallInternal) => (e) => {\n    alsoCallInternal?.(e);\n    output?.(buttonIcon, e);\n    handler?.(e, buttonIcon);\n  };\n\n  const mergedEvents = {\n    onClick: emitThen(buttonIcon.onClick),\n    onKeyDown: emitThen(buttonIcon.onKeyDown, events.onFocus),\n    onKeyUp: emitThen(buttonIcon.onKeyUp),\n    onFocus: emitThen(buttonIcon.onFocus, events.onFocus),\n    onBlur: emitThen(buttonIcon.onBlur, events.onBlur),\n    onMouseEnter: emitThen(buttonIcon.onMouseEnter, events.onMouseEnter),\n    onMouseLeave: emitThen(buttonIcon.onMouseLeave, events.onMouseLeave),\n    onMouseDown: emitThen(undefined, events.onMouseDown),\n    onMouseUp: emitThen(undefined, events.onMouseUp),\n  };\n\n  const ariaLabel = buttonIcon.ariaLabel || buttonIcon.name || \"icon button\";\n\n  return (\n    <button\n      id={autoId.current}\n      ref={elRef}\n      type=\"button\"\n      className={className}\n      title={buttonIcon.title}\n      aria-label={ariaLabel}\n      aria-disabled={isDisabled || undefined}\n      disabled={isDisabled}\n      tabIndex={buttonIcon.tabIndex}\n      {...mergedEvents}\n    >\n      <span className=\"d-inline-flex align-middle\">\n        <AlloyIcon icon={buttonIcon.icon} />\n      </span>\n      {buttonIcon.name ? (\n        <span className=\"px-2 align-middle\">{buttonIcon.name}</span>\n      ) : null}\n    </button>\n  );\n});\n\nexport default AlloyButtonIcon;\n","// AlloyButtonSubmit.jsx\nimport React, {\n  useRef,\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport AlloyIcon, { IconObject } from \"./AlloyIcon.jsx\";\n\n/* id generator */\nlet __btnSubmitCounter = 0;\nfunction nextSubmitId() {\n  __btnSubmitCounter += 1;\n  return `alloyBtnsubmit${__btnSubmitCounter}`;\n}\n\n/**\n * REQUIRED:\n *  - name: string\n *  - icon: IconObject | { iconClass: string, ... }\n *\n * OPTIONAL:\n *  - id?: string\n *  - className?: string\n *  - disabled?: boolean\n *  - loading?: boolean\n *  - title?: string\n *  - ariaLabel?: string\n *  - tabIndex?: number\n *  - onClick? / onMouseDown? / onKeyDown?   (each receives (event, self))\n */\nexport class ButtonSubmitObject {\n  constructor(p) {\n    if (!p || !p.name) throw new Error(\"ButtonSubmitObject requires `name`.\");\n    if (!p.icon) throw new Error(\"ButtonSubmitObject requires `icon`.\");\n\n    this.id = p.id ?? nextSubmitId();\n    this.name = p.name;\n    this.icon = p.icon instanceof IconObject ? p.icon : new IconObject(p.icon);\n\n    this.className = p.className ?? \"\";\n    this.disabled = !!p.disabled;\n    this.loading = !!p.loading;\n    this.title = p.title;\n    this.ariaLabel = p.ariaLabel;\n    this.tabIndex = p.tabIndex;\n\n    // optional (only these three are honored)\n    this.onClick = p.onClick;\n    this.onMouseDown = p.onMouseDown;\n    this.onKeyDown = p.onKeyDown;\n  }\n}\n\n/**\n * Props:\n *  - buttonSubmit: ButtonSubmitObject (required)\n *  - output?: (self: ButtonSubmitObject, e?: any) => void\n *\n * Behavior:\n *  - Triggered by mousedown / keydown(Enter|Space) / click\n *  - On trigger â†’ loading=true, disabled=true, icon visible\n *  - While loading â†’ disabled, icon visible\n *  - When loading=false â†’ icon hidden, enabled again\n */\nexport const AlloyButtonSubmit = forwardRef(function AlloyButtonSubmit({ buttonSubmit, output }, ref) {\n  if (!buttonSubmit || !(buttonSubmit instanceof ButtonSubmitObject)) {\n    throw new Error(\"AlloyButtonSubmit requires `buttonSubmit` (ButtonSubmitObject instance).\");\n  }\n\n  const elRef = useRef(null);\n  const autoId = useRef(buttonSubmit.id);\n\n  const [loading, setLoading] = useState(!!buttonSubmit.loading);\n\n  useEffect(() => {\n    setLoading(!!buttonSubmit.loading);\n  }, [buttonSubmit.loading]);\n\n  const isDisabled = buttonSubmit.disabled || loading;\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      el: elRef.current,\n      model: buttonSubmit,\n      focus: () => elRef.current?.focus(),\n      click: () => elRef.current?.click(),\n    }),\n    [buttonSubmit]\n  );\n\n  const firedRef = useRef(false);\n  useEffect(() => {\n    if (!loading) firedRef.current = false;\n  }, [loading]);\n\n  const arm = () => {\n    if (firedRef.current || isDisabled) return false;\n    firedRef.current = true;\n\n    // Update model + internal\n    buttonSubmit.loading = true;\n    buttonSubmit.disabled = true;\n    setLoading(true);\n\n    return true;\n  };\n\n  const emit = (e, handler) => {\n    output?.(buttonSubmit, e);\n    handler?.(e, buttonSubmit);\n  };\n\n  const handleClick = (e) => {\n    if (arm()) emit(e, buttonSubmit.onClick);\n  };\n\n  const handleMouseDown = (e) => {\n    if (arm()) emit(e, buttonSubmit.onMouseDown);\n  };\n\n  const handleKeyDown = (e) => {\n    const key = e.key;\n    if (key === \"Enter\" || key === \" \") {\n      if (arm()) emit(e, buttonSubmit.onKeyDown);\n    }\n  };\n\n  const showIcon = loading;\n\n  return (\n    <button\n      id={autoId.current}\n      ref={elRef}\n      type=\"submit\"\n      className={buttonSubmit.className}\n      title={buttonSubmit.title}\n      aria-label={buttonSubmit.ariaLabel || buttonSubmit.name}\n      aria-busy={loading || undefined}\n      aria-disabled={isDisabled || undefined}\n      disabled={isDisabled}\n      tabIndex={buttonSubmit.tabIndex}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      onKeyDown={handleKeyDown}\n    >\n      {showIcon && (\n        <span className=\"d-inline-flex align-middle\">\n          <AlloyIcon icon={buttonSubmit.icon} />\n        </span>\n      )}\n      <span className={showIcon ? \"px-2 align-middle\" : \"align-middle\"}>\n        {buttonSubmit.name}\n      </span>\n\n      {loading ? (\n        <span className=\"ms-2 visually-hidden\" aria-live=\"polite\">\n          Loadingâ€¦\n        </span>\n      ) : null}\n    </button>\n  );\n});\n\nexport default AlloyButtonSubmit;\n","import React, { useState } from \"react\";\nimport { AlloyIcon, IconObject } from \"./AlloyIcon\";\n\n/** Auto-incrementing ID for input fields */\nlet __inputCounter = 0;\nfunction nextInputId() {\n  __inputCounter += 1;\n  return `alloyinput${__inputCounter}`;\n}\n\nexport class InputObject {\n  constructor(params) {\n    const {\n      id,\n      name,\n      type = \"text\",\n      label = \"\",\n      value = type === \"checkbox\" ? [] : \"\",\n      layout = \"text\",\n      icon,\n      placeholder = \"\",\n      required = false,\n      minLength,\n      maxLength,\n      min,\n      max,\n      pattern,\n      matchWith,\n      passwordStrength,\n      options = [],\n      validators = [],\n      ...rest\n    } = params || {};\n\n    if (!name) throw new Error(\"InputObject requires a 'name' field\");\n    if ([\"icon\", \"floating\"].includes(layout) && !icon)\n      throw new Error(\"Icon is required for icon and floating layouts\");\n\n    this.id = id ?? nextInputId();\n    this.name = name;\n    this.type = type;\n    this.label = label;\n    this.value = value;\n    this.layout = layout;\n    this.icon = icon instanceof IconObject ? icon : (icon ? new IconObject(icon) : undefined);\n    this.placeholder = placeholder;\n    this.required = required;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    this.min = min;\n    this.max = max;\n    this.pattern = pattern;\n    this.matchWith = matchWith;\n    this.passwordStrength = passwordStrength;\n    this.options = options;\n    this.validators = validators;\n    Object.assign(this, rest);\n  }\n}\n\nexport function AlloyInput({ input, output }) {\n  const [val, setVal] = useState(input.value);\n  const [touched, setTouched] = useState(false);\n\n  const validate = (v) => {\n    const errs = [];\n    const trimmed = typeof v === \"string\" ? v.trim() : v;\n    if (input.required) {\n      if (\n        (Array.isArray(trimmed) && trimmed.length === 0) ||\n        (!Array.isArray(trimmed) && (trimmed === \"\" || trimmed === false))\n      ) {\n        errs.push(\"This field is required.\");\n      }\n    }\n    if (input.minLength && typeof trimmed === \"string\" && trimmed.length < input.minLength)\n      errs.push(`Minimum length is ${input.minLength}`);\n    if (input.maxLength && typeof trimmed === \"string\" && trimmed.length > input.maxLength)\n      errs.push(`Maximum length is ${input.maxLength}`);\n    if (input.pattern && typeof trimmed === \"string\" && !(new RegExp(input.pattern).test(trimmed)))\n      errs.push(\"Invalid format.\");\n    if (input.passwordStrength && typeof trimmed === \"string\" && !/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}/.test(trimmed))\n      errs.push(\"Password is too weak.\");\n    return errs;\n  };\n\n  const emit = (v) => {\n    const errors = validate(v);\n    output?.({\n      id: input.id,\n      name: input.name,\n      value: v,\n      valid: errors.length === 0,\n      error: errors.length > 0,\n      errors,\n    });\n  };\n\n  const onBlur = () => setTouched(true);\n\n  const showError = touched && validate(val).length > 0;\n  const errorBlock = showError && (\n    <div className=\"mt-2\" aria-live=\"polite\">\n      {validate(val).map((msg, i) => (\n        <div key={i} className=\"alert alert-danger py-2 mb-2\" role=\"alert\">\n          {msg}\n        </div>\n      ))}\n    </div>\n  );\n\n  const common = {\n    name: input.name,\n    placeholder: input.placeholder,\n    onBlur,\n    \"aria-invalid\": showError || undefined,\n  };\n\n  const handleChange = (e) => {\n    const v = e.target.value;\n    if (input.type === \"checkbox\") {\n      const valueArr = Array.isArray(val) ? [...val] : [];\n      const idx = valueArr.indexOf(v);\n      if (idx > -1) {\n        valueArr.splice(idx, 1);\n      } else {\n        valueArr.push(v);\n      }\n      setVal(valueArr);\n      emit(valueArr);\n    } else {\n      setVal(v);\n      emit(v);\n    }\n  };\n\n  const renderInput = () => {\n    if (input.type === \"textarea\") {\n      return <textarea {...common} value={val} className={`form-control${showError ? \" is-invalid\" : \"\"}`} />;\n    }\n\n    if (input.type === \"select\") {\n      return (\n        <select {...common} value={val} className={`form-select${showError ? \" is-invalid\" : \"\"}`} onChange={handleChange}>\n          {input.options.map((o) => (\n            <option key={o.value} value={o.value}>{o.label}</option>\n          ))}\n        </select>\n      );\n    }\n\n    if (input.type === \"radio\") {\n      return (\n        <div>\n          <label className=\"form-label d-block mb-2\">{input.label}</label>\n          {input.options.map((o, i) => (\n            <div className=\"form-check\" key={i}>\n              <input\n                type=\"radio\"\n                id={`${input.id}_${i}`}\n                className={`form-check-input${showError ? \" is-invalid\" : \"\"}`}\n                name={input.name}\n                value={o.value}\n                checked={val === o.value}\n                onChange={(e) => {\n                  setVal(e.target.value);\n                  emit(e.target.value);\n                }}\n              />\n              <label className=\"form-check-label\" htmlFor={`${input.id}_${i}`}>\n                {o.label}\n              </label>\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    if (input.type === \"checkbox\") {\n      return (\n        <div>\n          <label className=\"form-label d-block mb-2\">{input.label}</label>\n          {input.options.map((o, i) => (\n            <div className=\"form-check\" key={i}>\n              <input\n                type=\"checkbox\"\n                id={`${input.id}_${i}`}\n                className={`form-check-input${showError ? \" is-invalid\" : \"\"}`}\n                name={input.name}\n                value={o.value}\n                checked={Array.isArray(val) && val.includes(o.value)}\n                onChange={handleChange}\n              />\n              <label className=\"form-check-label\" htmlFor={`${input.id}_${i}`}>\n                {o.label}\n              </label>\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    return <input {...common} type={input.type} value={val} onChange={handleChange} className={`form-control${showError ? \" is-invalid\" : \"\"}`} />;\n  };\n\n  if (input.layout === \"floating\") {\n    return (\n      <div className=\"mb-3\">\n        <div className=\"form-floating\">\n          {renderInput()}\n          <label htmlFor={input.id}>\n            {input.icon && <AlloyIcon icon={input.icon} />} {input.label}\n          </label>\n        </div>\n        {errorBlock}\n      </div>\n    );\n  }\n\n  if (input.layout === \"icon\") {\n    return (\n      <div className=\"mb-3\">\n        <label htmlFor={input.id} className=\"form-label\">\n          {input.label}\n        </label>\n        <div className=\"input-group\">\n          <span className=\"input-group-text\">\n            <AlloyIcon icon={input.icon} />\n          </span>\n          {renderInput()}\n        </div>\n        {errorBlock}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mb-3\">\n      {[\"text\", \"textarea\", \"number\", \"email\", \"password\", \"date\"].includes(input.type) && (\n        <label htmlFor={input.id} className=\"form-label\">{input.label}</label>\n      )}\n      {renderInput()}\n      {errorBlock}\n    </div>\n  );\n}\n\nexport default AlloyInput;\n","// src/components/tissue/AlloyLinkBar.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AlloyLink, { LinkObject } from \"../cell/AlloyLink\";\nimport AlloyLinkIcon, { LinkIconObject } from \"../cell/AlloyLinkIcon\";\nimport AlloyLinkLogo, { LinkLogoObject } from \"../cell/AlloyLinkLogo\";\n\n/* â”€â”€ ID generators â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */\nlet __barItemCounter = 0;\nfunction nextBarItemId() {\n  __barItemCounter += 1;\n  return `barItem${__barItemCounter}`;\n}\n\nlet __linkBarCounter = 0;\nfunction nextLinkBarId() {\n  __linkBarCounter += 1;\n  return `linkBar${__linkBarCounter}`;\n}\n\n/* â”€â”€ BarItem â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */\nexport class BarItem {\n  /**\n   * @param {{ id?: string, name?: string, className?: string, show?: boolean }} p\n   */\n  constructor({ id, name, className, show } = {}) {\n    this.id = id ?? nextBarItemId();\n    this.name = name ?? \"Bar Item\";\n    this.className = className ?? \"\";\n    this.show = typeof show === \"boolean\" ? show : false;\n  }\n}\n\n/* â”€â”€ LinkBarObject (hydrates `links` by `type`) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */\n/**\n * @param {{\n *   id?: string,\n *   className?: string,              // applied to <ul>\n *   barName?: BarItem|object,\n *   type?: \"AlloyLink\"|\"AlloyLinkIcon\"|\"AlloyLinkLogo\",\n *   linkClass?: string,              // applied to each <li>\n *   links?: any[],                   // plain JSON or instances â†’ hydrated here\n *   selected?: string                // class name applied to the selected item (e.g. \"active\")\n * }} p\n */\nexport class LinkBarObject {\n  constructor({ id, className, barName, type, linkClass, links, selected } = {}) {\n    this.id = id ?? nextLinkBarId();\n    this.className = className ?? \"d-flex justify-content-center\";\n    this.barName = barName instanceof BarItem ? barName : new BarItem(barName ?? {});\n    this.type = type ?? \"AlloyLink\";\n    this.linkClass = linkClass ?? \"nav-item\";\n    this.selected = selected ?? \"active\";\n\n    // ðŸ”½ Hydrate links to proper instances based on `type`\n    const src = Array.isArray(links) ? links : [];\n    switch (this.type) {\n      case \"AlloyLinkIcon\":\n        this.links = src.map((l) =>\n          l instanceof LinkIconObject\n            ? l\n            : new LinkIconObject({\n                id: l?.id,\n                href: l?.href,\n                icon: l?.icon, // LinkIconObject ctor will wrap plain icon into IconObject\n                name: l?.name,\n                className: l?.className,\n                active: l?.active,\n                target: l?.target,\n                rel: l?.rel,\n                onClick: l?.onClick,\n                title: l?.title,\n              })\n        );\n        break;\n\n      case \"AlloyLinkLogo\":\n        this.links = src.map((l) =>\n          l instanceof LinkLogoObject\n            ? l\n            : new LinkLogoObject({\n                id: l?.id,\n                name: l?.name,\n                href: l?.href,\n                logo: l?.logo,\n                width: l?.width,\n                height: l?.height,\n                logoAlt: l?.logoAlt,\n                className: l?.className,\n                active: l?.active,\n                target: l?.target,\n                rel: l?.rel,\n                onClick: l?.onClick,\n                title: l?.title,\n              })\n        );\n        break;\n\n      case \"AlloyLink\":\n      default:\n        this.links = src.map((l) =>\n          l instanceof LinkObject\n            ? l\n            : new LinkObject({\n                id: l?.id,\n                name: l?.name,\n                href: l?.href,\n                className: l?.className,\n                active: l?.active,\n                target: l?.target,\n                rel: l?.rel,\n                onClick: l?.onClick,\n                title: l?.title,\n              })\n        );\n        break;\n    }\n  }\n}\n\n/* â”€â”€ small helper: inject active + click without mutating original model â”€â”€â”€ */\nfunction cloneWithActiveAndClick(item, activeClass, isSelected, wrappedOnClick) {\n  const active = isSelected ? activeClass : \"\";\n\n  if (item instanceof LinkObject) {\n    return new LinkObject({\n      id: item.id,\n      name: item.name,\n      href: item.href,\n      className: item.className,\n      active,\n      target: item.target,\n      rel: item.rel,\n      onClick: wrappedOnClick,\n      title: item.title,\n    });\n  }\n\n  if (item instanceof LinkIconObject) {\n    return new LinkIconObject({\n      id: item.id,\n      href: item.href,\n      icon: item.icon,\n      name: item.name,\n      className: item.className,\n      active,\n      target: item.target,\n      rel: item.rel,\n      onClick: wrappedOnClick,\n      title: item.title,\n    });\n  }\n\n  if (item instanceof LinkLogoObject) {\n    return new LinkLogoObject({\n      id: item.id,\n      name: item.name,\n      href: item.href,\n      logo: item.logo,\n      width: item.width,\n      height: item.height,\n      logoAlt: item.logoAlt,\n      className: item.className,\n      active,\n      target: item.target,\n      rel: item.rel,\n      onClick: wrappedOnClick,\n      title: item.title,\n    });\n  }\n\n  return item;\n}\n\n/* â”€â”€ Component: AlloyLinkBar â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */\n/**\n * Accepts ONLY a hydrated LinkBarObject; ensures only ONE link has the selected class.\n */\nexport function AlloyLinkBar({ linkBar }) {\n  if (!linkBar || !(linkBar instanceof LinkBarObject)) {\n    throw new Error(\"AlloyLinkBar requires `linkBar` (LinkBarObject instance).\");\n  }\n\n  const ulIdRef = useRef(linkBar.id);\n  const [selectedId, setSelectedId] = useState(\"\");\n\n  // Reset selection when the bar instance changes (or on mount)\n  useEffect(() => {\n    setSelectedId(\"\");\n  }, [linkBar]);\n\n  const Title = () =>\n    linkBar.barName?.show ? (\n      <div id={linkBar.barName.id} className={linkBar.barName.className}>\n        {linkBar.barName.name}\n      </div>\n    ) : null;\n\n  // Wrap original onClick: set selection, then call original\n  function wrapOnClick(item) {\n    const original = item.onClick;\n    return (e) => {\n      const nextId = item.id || `${item.href || \"\"}-${item.name || \"\"}`;\n      setSelectedId(nextId);\n      original?.(e);\n    };\n  }\n\n  const renderAlloyLink = () => (\n    <>\n      <Title />\n      <ul id={ulIdRef.current} className={linkBar.className}>\n        {linkBar.links.map((item, idx) => {\n          if (!(item instanceof LinkObject)) {\n            throw new Error(\n              \"AlloyLinkBar (type='AlloyLink') requires each `links` item to be a LinkObject instance.\"\n            );\n          }\n          const isSelected = (item?.id ?? \"\") === selectedId;\n          const cloned = cloneWithActiveAndClick(\n            item,\n            linkBar.selected,\n            isSelected,\n            wrapOnClick(item)\n          );\n          return (\n            <li key={(item?.id ?? idx) + \"-li\"} className={linkBar.linkClass}>\n              <AlloyLink link={cloned} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n\n  const renderAlloyLinkIcon = () => (\n    <>\n      <Title />\n      <ul id={ulIdRef.current} className={linkBar.className}>\n        {linkBar.links.map((item, idx) => {\n          if (!(item instanceof LinkIconObject)) {\n            throw new Error(\n              \"AlloyLinkBar (type='AlloyLinkIcon') requires each `links` item to be a LinkIconObject instance.\"\n            );\n          }\n          const isSelected = (item?.id ?? \"\") === selectedId;\n          const cloned = cloneWithActiveAndClick(\n            item,\n            linkBar.selected,\n            isSelected,\n            wrapOnClick(item)\n          );\n          return (\n            <li key={(item?.id ?? idx) + \"-li\"} className={linkBar.linkClass}>\n              <AlloyLinkIcon linkIcon={cloned} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n\n  const renderAlloyLinkLogo = () => (\n    <>\n      <Title />\n      <ul id={ulIdRef.current} className={linkBar.className}>\n        {linkBar.links.map((item, idx) => {\n          if (!(item instanceof LinkLogoObject)) {\n            throw new Error(\n              \"AlloyLinkBar (type='AlloyLinkLogo') requires each `links` item to be a LinkLogoObject instance.\"\n            );\n          }\n          const isSelected = (item?.id ?? \"\") === selectedId;\n          const cloned = cloneWithActiveAndClick(\n            item,\n            linkBar.selected,\n            isSelected,\n            wrapOnClick(item)\n          );\n          return (\n            <li key={(item?.id ?? idx) + \"-li\"} className={linkBar.linkClass}>\n              <AlloyLinkLogo linkLogo={cloned} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n\n  switch (linkBar.type) {\n    case \"AlloyLink\":\n      return <nav data-type=\"AlloyLink\">{renderAlloyLink()}</nav>;\n    case \"AlloyLinkIcon\":\n      return <nav data-type=\"AlloyLinkIcon\">{renderAlloyLinkIcon()}</nav>;\n    case \"AlloyLinkLogo\":\n      return <nav data-type=\"AlloyLinkLogo\">{renderAlloyLinkLogo()}</nav>;\n    default:\n      return <nav data-type=\"AlloyLink\">{renderAlloyLink()}</nav>;\n  }\n}\n\nexport default AlloyLinkBar;\n","// src/components/tissue/AlloyButtonBar.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AlloyButton, { ButtonObject } from \"../cell/AlloyButton.jsx\";\nimport AlloyButtonIcon, { ButtonIconObject } from \"../cell/AlloyButtonIcon.jsx\";\n\n/* ids */\nlet __barItemCounter = 0;\nfunction nextBarItemId() { return `barItem${++__barItemCounter}`; }\nlet __buttonBarCounter = 0;\nfunction nextButtonBarId() { return `buttonBar${++__buttonBarCounter}`; }\n\n/* BarItem */\nexport class BarItem {\n  constructor({ id, name, className, show } = {}) {\n    this.id = id ?? nextBarItemId();\n    this.name = name ?? \"Bar\";\n    this.className = className ?? \"\";\n    this.show = typeof show === \"boolean\" ? show : false;\n  }\n}\n\n/* ButtonBarObject (hydrates `buttons` by `type`, includes `selected`) */\nexport class ButtonBarObject {\n  /**\n   * @param {{\n   *   id?: string,\n   *   className?: string,\n   *   barName?: BarItem|object,\n   *   type?: \"AlloyButton\"|\"AlloyButtonIcon\",\n   *   buttonClass?: string,\n   *   buttons?: any[],            // plain JSON or instances; hydrated here\n   *   selected?: string           // class name for selected item, e.g. \"active\"\n   * }} p\n   */\n  constructor({ id, className, barName, type, buttonClass, buttons, selected } = {}) {\n    this.id = id ?? nextButtonBarId();\n    this.className = className ?? \"d-flex justify-content-center\";\n    this.barName = barName instanceof BarItem ? barName : new BarItem(barName ?? {});\n    this.type = type ?? \"AlloyButton\";\n    this.buttonClass = buttonClass ?? \"nav-item\";\n    this.selected = selected ?? \"active\";\n\n    const src = Array.isArray(buttons) ? buttons : [];\n    if (this.type === \"AlloyButtonIcon\") {\n      this.buttons = src.map((b) =>\n        b instanceof ButtonIconObject\n          ? b\n          : new ButtonIconObject({\n              id: b?.id,\n              name: b?.name,\n              icon: b?.icon, // ButtonIconObject will wrap plain {iconClass} into IconObject\n              className: b?.className,\n              active: b?.active,\n              disabled: b?.disabled,\n              title: b?.title,\n              ariaLabel: b?.ariaLabel,\n              tabIndex: b?.tabIndex,\n              onClick: b?.onClick,\n              onKeyDown: b?.onKeyDown,\n              onKeyUp: b?.onKeyUp,\n              onFocus: b?.onFocus,\n              onBlur: b?.onBlur,\n              onMouseEnter: b?.onMouseEnter,\n              onMouseLeave: b?.onMouseLeave,\n            })\n      );\n    } else {\n      // default: AlloyButton\n      this.buttons = src.map((b) =>\n        b instanceof ButtonObject\n          ? b\n          : new ButtonObject({\n              id: b?.id,\n              name: b?.name,\n              className: b?.className,\n              active: b?.active,\n              disabled: b?.disabled,\n              title: b?.title,\n              ariaLabel: b?.ariaLabel,\n              tabIndex: b?.tabIndex,\n              onClick: b?.onClick,\n              onKeyDown: b?.onKeyDown,\n              onKeyUp: b?.onKeyUp,\n              onFocus: b?.onFocus,\n              onBlur: b?.onBlur,\n              onMouseEnter: b?.onMouseEnter,\n              onMouseLeave: b?.onMouseLeave,\n            })\n      );\n    }\n  }\n}\n\n/* Clone helper: return a NEW instance of the SAME CLASS with injected `active` */\nfunction cloneWithActive(item, activeClass, isSelected) {\n  const active = isSelected ? activeClass : \"\";\n\n  if (item instanceof ButtonObject) {\n    return new ButtonObject({\n      id: item.id,\n      name: item.name,\n      className: item.className,\n      active,\n      disabled: item.disabled,\n      title: item.title,\n      ariaLabel: item.ariaLabel,\n      tabIndex: item.tabIndex,\n      onClick: item.onClick,\n      onKeyDown: item.onKeyDown,\n      onKeyUp: item.onKeyUp,\n      onFocus: item.onFocus,\n      onBlur: item.onBlur,\n      onMouseEnter: item.onMouseEnter,\n      onMouseLeave: item.onMouseLeave,\n    });\n  }\n\n  if (item instanceof ButtonIconObject) {\n    return new ButtonIconObject({\n      id: item.id,\n      name: item.name,\n      icon: item.icon, // keep IconObject instance\n      className: item.className,\n      active,\n      disabled: item.disabled,\n      title: item.title,\n      ariaLabel: item.ariaLabel,\n      tabIndex: item.tabIndex,\n      onClick: item.onClick,\n      onKeyDown: item.onKeyDown,\n      onKeyUp: item.onKeyUp,\n      onFocus: item.onFocus,\n      onBlur: item.onBlur,\n      onMouseEnter: item.onMouseEnter,\n      onMouseLeave: item.onMouseLeave,\n    });\n  }\n\n  return item;\n}\n\n/**\n * Props:\n *  - buttonBar: ButtonBarObject (required)\n *  - output?: (self: ButtonObject|ButtonIconObject, e?: any) => void\n */\nexport function AlloyButtonBar({ buttonBar, output }) {\n  if (!buttonBar || !(buttonBar instanceof ButtonBarObject)) {\n    throw new Error(\"AlloyButtonBar requires `buttonBar` (ButtonBarObject instance).\");\n  }\n\n  const ulIdRef = useRef(buttonBar.id);\n  const [selectedId, setSelectedId] = useState(\"\");\n\n  // Reset selection when the bar instance changes (or on mount)\n  useEffect(() => {\n    setSelectedId(\"\");\n  }, [buttonBar]);\n\n  const Title = () =>\n    buttonBar.barName?.show ? (\n      <div id={buttonBar.barName.id} className={buttonBar.barName.className}>\n        {buttonBar.barName.name}\n      </div>\n    ) : null;\n\n  // Re-emit child's output AND set selection on click\n  const passUp = (self, e) => {\n    if (e?.type === \"click\") {\n      const nextId = self?.id ?? \"\";\n      setSelectedId(nextId);\n    }\n    output?.(self, e);\n  };\n\n  const renderAlloyButton = () => (\n    <>\n      <Title />\n      <ul id={ulIdRef.current} className={buttonBar.className}>\n        {buttonBar.buttons.map((item, idx) => {\n          if (!(item instanceof ButtonObject)) {\n            throw new Error(\"AlloyButtonBar (type='AlloyButton') requires ButtonObject items.\");\n          }\n          const isSelected = (item?.id ?? \"\") === selectedId;\n          const cloned = cloneWithActive(item, buttonBar.selected, isSelected);\n          return (\n            <li key={(item?.id ?? idx) + \"-li\"} className={buttonBar.buttonClass}>\n              <AlloyButton button={cloned} output={passUp} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n\n  const renderAlloyButtonIcon = () => (\n    <>\n      <Title />\n      <ul id={ulIdRef.current} className={buttonBar.className}>\n        {buttonBar.buttons.map((item, idx) => {\n          if (!(item instanceof ButtonIconObject)) {\n            throw new Error(\"AlloyButtonBar (type='AlloyButtonIcon') requires ButtonIconObject items.\");\n          }\n          const isSelected = (item?.id ?? \"\") === selectedId;\n          const cloned = cloneWithActive(item, buttonBar.selected, isSelected);\n          return (\n            <li key={(item?.id ?? idx) + \"-li\"} className={buttonBar.buttonClass}>\n              <AlloyButtonIcon buttonIcon={cloned} output={passUp} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n\n  switch (buttonBar.type) {\n    case \"AlloyButton\":\n      return <nav data-type=\"AlloyButton\">{renderAlloyButton()}</nav>;\n    case \"AlloyButtonIcon\":\n      return <nav data-type=\"AlloyButtonIcon\">{renderAlloyButtonIcon()}</nav>;\n    default:\n      return <nav data-type=\"AlloyButton\">{renderAlloyButton()}</nav>;\n  }\n}\n\nexport default AlloyButtonBar;\n","// src/components/tissue/AlloyNavBar.jsx\nimport React, { useRef } from \"react\";\nimport AlloyLinkLogo, { LinkLogoObject } from \"../cell/AlloyLinkLogo.jsx\";\nimport AlloyLinkBar, { LinkBarObject } from \"./AlloyLinkBar.jsx\";\n\n// NEW: import the item classes so we can hydrate plain JSON\nimport { LinkObject } from \"../cell/AlloyLink.jsx\";\nimport { LinkIconObject } from \"../cell/AlloyLinkIcon.jsx\";\nimport { IconObject } from \"../cell/AlloyIcon.jsx\";\n\n/* â”€â”€ ID generator â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */\nlet __navCounter = 0;\nfunction nextNavId() {\n  __navCounter += 1;\n  return `navbar${__navCounter}`;\n}\n\n/* â”€â”€ helper: map plain link JSON â†’ proper instances â”€â”€â”€â”€â”€â”€â”€â”€â”€ */\nfunction toLinkItems(type, arr) {\n  if (!Array.isArray(arr)) return [];\n  switch (type) {\n    case \"AlloyLinkIcon\":\n      return arr.map((l) =>\n        l instanceof LinkIconObject\n          ? l\n          : new LinkIconObject({\n              id: l?.id,\n              name: l?.name,\n              href: l?.href,\n              icon: l?.icon instanceof IconObject ? l.icon : new IconObject(l?.icon || {}),\n              className: l?.className,\n              // no per-item active; bar will inject selected class\n              target: l?.target,\n              rel: l?.rel,\n              onClick: l?.onClick,\n              title: l?.title,\n            })\n      );\n\n    case \"AlloyLinkLogo\":\n      return arr.map((l) =>\n        l instanceof LinkLogoObject\n          ? l\n          : new LinkLogoObject({\n              id: l?.id,\n              name: l?.name,\n              href: l?.href,\n              logo: l?.logo,\n              width: l?.width,\n              height: l?.height,\n              logoAlt: l?.logoAlt,\n              className: l?.className,\n              target: l?.target,\n              rel: l?.rel,\n              onClick: l?.onClick,\n              title: l?.title,\n            })\n      );\n\n    case \"AlloyLink\":\n    default:\n      return arr.map((l) =>\n        l instanceof LinkObject\n          ? l\n          : new LinkObject({\n              id: l?.id,\n              name: l?.name,\n              href: l?.href,\n              className: l?.className,\n              // no per-item active; bar will inject selected class\n              target: l?.target,\n              rel: l?.rel,\n              onClick: l?.onClick,\n              title: l?.title,\n            })\n      );\n  }\n}\n\n/* â”€â”€ NavBarObject (hydrates logo + link bar + links) â”€â”€â”€â”€â”€â”€â”€â”€ */\n/**\n * @param {{\n *   id?: string,\n *   className?: string,\n *   logo?: LinkLogoObject|object,\n *   linkBar?: LinkBarObject|{\n *     id?: string,\n *     className?: string,\n *     barName?: object,\n *     type?: \"AlloyLink\"|\"AlloyLinkIcon\"|\"AlloyLinkLogo\",\n *     linkClass?: string,\n *     links?: any[],\n *     selected?: string\n *   }\n * }} p\n */\nexport class NavBarObject {\n  constructor({ id, className, logo, linkBar } = {}) {\n    this.id = id ?? nextNavId();\n    this.className = className ?? \"navbar navbar-expand-lg navbar-light bg-light\";\n\n    // logo â†’ ensure LinkLogoObject instance\n    this.logo =\n      logo instanceof LinkLogoObject\n        ? logo\n        : new LinkLogoObject(\n            logo || {\n              href: \"/\",\n              logo: \"/logos/alloy.svg\",\n              name: \"Alloy\",\n              width: 110,\n              height: 28,\n              logoAlt: \"Alloy\",\n              className: \"navbar-brand d-flex align-items-center gap-2\",\n            }\n          );\n\n    // linkBar â†’ ensure LinkBarObject instance and hydrate its links\n    if (linkBar instanceof LinkBarObject) {\n      this.linkBar = linkBar;\n    } else {\n      const type = linkBar?.type ?? \"AlloyLink\";\n      const links = toLinkItems(type, linkBar?.links || []);\n      this.linkBar = new LinkBarObject({\n        id: linkBar?.id,\n        className: linkBar?.className ?? \"navbar-nav ms-auto mb-2 mb-lg-0 gap-2\",\n        barName: linkBar?.barName ?? { show: false },\n        type,\n        linkClass: linkBar?.linkClass ?? \"nav-item\",\n        links,\n        selected: linkBar?.selected ?? \"active\", // navbar demos want 'active'\n      });\n    }\n  }\n}\n\n/* â”€â”€ Component (requires NavBarObject) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */\nexport function AlloyNavBar({ navBar }) {\n  if (!navBar || !(navBar instanceof NavBarObject)) {\n    throw new Error(\"AlloyNavBar requires `navBar` (NavBarObject instance).\");\n  }\n\n  const navIdRef = useRef(navBar.id);\n  const collapseId = `${navIdRef.current}-collapse`;\n\n  return (\n    <nav id={navIdRef.current} className={navBar.className}>\n      <div className=\"container-fluid\">\n        {/* Logo */}\n        <AlloyLinkLogo linkLogo={navBar.logo} />\n\n        {/* Toggler */}\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target={`#${collapseId}`}\n          aria-controls={collapseId}\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\" />\n        </button>\n\n        {/* Collapsible area */}\n        <div className=\"position-relative navbar-collapse collapse justify-content-end\" id={collapseId}>\n          <AlloyLinkBar linkBar={navBar.linkBar} />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default AlloyNavBar;\n","// src/components/tissue/AlloyTable.jsx\nimport React, { useMemo, useRef, useState } from \"react\";\nimport AlloyIcon, { IconObject } from \"../cell/AlloyIcon.jsx\";\n\n/* utils */\nfunction capitalize(s) {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/* id generator */\nlet __tableCounter = 0;\nfunction nextTableId() {\n  __tableCounter += 1;\n  return `table${__tableCounter}`;\n}\n\n/* Model */\nexport class TableObject {\n  constructor(p = {}) {\n    this.id = p.id ?? nextTableId();\n    this.className = p.className ?? \"table\";\n    this.name = p.name ?? \"table\";\n    this.rows = Array.isArray(p.rows) ? p.rows.slice() : [];\n\n    // defaults\n    const defaultIcon = new IconObject({ iconClass: \"fa-solid fa-user\" });\n    const defaultSort = new IconObject({ iconClass: \"fa-solid fa-arrow-down\" });\n\n    this.icon = p.icon instanceof IconObject ? p.icon : new IconObject(p.icon || defaultIcon);\n    this.sort = p.sort instanceof IconObject ? p.sort : new IconObject(p.sort || defaultSort);\n  }\n}\n\n/* helpers */\nfunction getHeaderKeys(rows) {\n  if (!rows || rows.length === 0) return [];\n  return Object.keys(rows[0]).filter((k) => k !== \"id\"); // preserve first-row order; skip id\n}\n\n/* Component\n   Props:\n   - table: TableObject\n   - output?: ({ type: \"column\", name, dir } | { type: \"row\", id }) => void\n*/\nexport function AlloyTable({ table, output }) {\n  if (!table || !(table instanceof TableObject)) {\n    throw new Error(\"AlloyTable requires `table` (TableObject instance).\");\n  }\n\n  const tableIdRef = useRef(table.id);\n\n  // Local icon-only state (like Angular's `sort`)\n  const [sort, setSort] = useState({ col: \"\", dir: \"asc\" });\n\n  const headerKeys = useMemo(() => getHeaderKeys(table.rows), [table.rows]);\n\n  const handleHeaderClick = (name) => {\n    if (!name) return;\n    const nextDir = sort.col === name && sort.dir === \"asc\" ? \"desc\" : \"asc\";\n    setSort({ col: name, dir: nextDir });                 // just UI indicator\n    output?.({ type: \"column\", name, dir: nextDir });     // tell parent/server to fetch\n  };\n\n  const handleRowClick = (rowId) => {\n    output?.({ type: \"row\", id: rowId });\n  };\n\n  return (\n    <table id={tableIdRef.current} className={table.className}>\n      <caption className=\"caption-top text-center\">{table.name}</caption>\n\n      <thead>\n        <tr>\n          <th scope=\"col\">Type</th>\n          {headerKeys.map((key) => {\n            const isActive = sort.col === key;\n            const isDesc = isActive && sort.dir === \"desc\";\n            return (\n              <th key={key} scope=\"col\">\n                <span\n                  onClick={() => handleHeaderClick(key)}\n                  style={{ userSelect: \"none\" }}\n                >\n                  {capitalize(key)}\n                  {isActive && (\n                    <span\n                      className=\"ms-1 d-inline-flex align-middle\"\n                      aria-hidden=\"true\"\n                      title={isDesc ? \"Sorted descending\" : \"Sorted ascending\"}\n                      style={{\n                        transform: isDesc ? \"rotate(180deg)\" : \"none\",\n                        transition: \"transform 120ms\",\n                      }}\n                    >\n                      <AlloyIcon icon={table.sort} />\n                    </span>\n                  )}\n                </span>\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n\n      <tbody>\n        {(table.rows ?? []).length > 0 ? (\n          (table.rows ?? []).map((row, idx) => (\n            <tr key={row?.id ?? idx} onClick={() => handleRowClick(row?.id)}>\n              <td>\n                <AlloyIcon icon={table.icon} />\n              </td>\n              {headerKeys.map((key) => (\n                <td key={`${row?.id ?? idx}-${key}`} className=\"cursor\">\n                  <span>{row?.[key]}</span>\n                </td>\n              ))}\n            </tr>\n          ))\n        ) : (\n          <tr>\n            <td colSpan={Math.max(1, headerKeys.length) + 1} className=\"text-center text-secondary\">\n              No rows\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport default AlloyTable;\n","/**\n * @remix-run/router v1.23.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/v6/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/v6/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/v6/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/v6/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n *\n * @deprecated The `json` method is deprecated in favor of returning raw objects.\n * This method will be removed in v7.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n/**\n * @deprecated The `defer` method is deprecated in favor of returning raw\n * objects. This method will be removed in v7.\n */\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialMatchesIsFOW = false;\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatchesIsFOW = true;\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Remove any lingering deleted fetchers that have already been removed\n    // from state.fetchers\n    deletedFetchers.forEach(key => {\n      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {\n        deletedFetchersKeys.push(key);\n      }\n    });\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    } else {\n      // We already called deleteFetcher() on these, can remove them from this\n      // Set now that we've handed the keys off to the data layer\n      deletedFetchersKeys.forEach(key => deletedFetchers.delete(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ?\n    // `matchRoutes()` has already been called if we're in here via `router.initialize()`\n    state.matches : matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (matches && state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n    // If this fetcher was previously marked for deletion, unmark it since we\n    // have a new instance\n    if (deletedFetchers.has(key)) {\n      deletedFetchers.delete(key);\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    // If we opted into the flag we can clear this now since we're calling\n    // deleteFetcher() at the end of updateState() and we've already handed the\n    // deleted fetcher keys off to the data layer.\n    // If not, we're eagerly calling deleteFetcher() and we need to keep this\n    // Set populated until the next updateState call, and we'll clear\n    // `deletedFetchers` then\n    if (future.v7_fetcherPersist) {\n      deletedFetchers.delete(key);\n    }\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    let count = (activeFetchers.get(key) || 0) - 1;\n    if (count <= 0) {\n      activeFetchers.delete(key);\n      deletedFetchers.add(key);\n      if (!future.v7_fetcherPersist) {\n        deleteFetcher(key);\n      }\n    } else {\n      activeFetchers.set(key, count);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal, fetcherKey) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          signal,\n          path: pathname,\n          matches: partialMatches,\n          fetcherKey,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init3, _result$init4;\n      if (result.data instanceof Error) {\n        var _result$init, _result$init2;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),\n        statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined\n      };\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init7, _result$init8;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,\n      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * React Router v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_invariant, joinPaths, matchPath, UNSAFE_decodePath, UNSAFE_getResolveToMatches, UNSAFE_warning, resolveTo, parsePath, matchRoutes, Action, UNSAFE_convertRouteMatchToUiMatch, stripBasename, IDLE_BLOCKER, isRouteErrorResponse, createMemoryHistory, AbortedDeferredError, createRouter } from '@remix-run/router';\nexport { AbortedDeferredError, Action as NavigationType, createPath, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, replace, resolvePath } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nconst DataRouterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterContext.displayName = \"DataRouter\";\n}\nconst DataRouterStateContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\nconst AwaitContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  AwaitContext.displayName = \"Await\";\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/React.createContext({\n  outlet: null,\n  matches: [],\n  isDataRoute: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n}\nconst RouteErrorContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/v6/hooks/use-href\n */\nfunction useHref(to, _temp) {\n  let {\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to, {\n    relative\n  });\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname = pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-in-router-context\n */\nfunction useInRouterContext() {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/v6/hooks/use-location\n */\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigation-type\n */\nfunction useNavigationType() {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/v6/hooks/use-match\n */\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    pathname\n  } = useLocation();\n  return React.useMemo(() => matchPath(pattern, UNSAFE_decodePath(pathname)), [pathname, pattern]);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\nconst navigateEffectWarning = \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\";\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(cb) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/v6/hooks/use-navigate\n */\nfunction useNavigate() {\n  let {\n    isDataRoute\n  } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\nfunction useNavigateUnstable() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let {\n    basename,\n    future,\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our history listener yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === \"path\");\n\n    // If we're operating within a basename, prepend it to the pathname prior\n    // to handing off to history (but only if we're not in a data router,\n    // otherwise it'll prepend the basename inside of the router).\n    // If this is a root navigation, then we navigate to the raw basename\n    // which allows the basename to have full control over the presence of a\n    // trailing slash on root links\n    if (dataRouterContext == null && basename !== \"/\") {\n      path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);\n  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);\n  return navigate;\n}\nconst OutletContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/v6/hooks/use-outlet-context\n */\nfunction useOutletContext() {\n  return React.useContext(OutletContext);\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/v6/hooks/use-outlet\n */\nfunction useOutlet(context) {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return /*#__PURE__*/React.createElement(OutletContext.Provider, {\n      value: context\n    }, outlet);\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/v6/hooks/use-params\n */\nfunction useParams() {\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/v6/hooks/use-resolved-path\n */\nfunction useResolvedPath(to, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    future\n  } = React.useContext(NavigationContext);\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));\n  return React.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === \"path\"), [to, routePathnamesJson, locationPathname, relative]);\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/v6/hooks/use-routes\n */\nfunction useRoutes(routes, locationArg) {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nfunction useRoutesImpl(routes, locationArg, dataRouterState, future) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    navigator\n  } = React.useContext(NavigationContext);\n  let {\n    matches: parentMatches\n  } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + (parentPath === \"/\" ? \"*\" : parentPath + \"/*\") + \"\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : UNSAFE_invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== undefined || matches[matches.length - 1].route.Component !== undefined || matches[matches.length - 1].route.lazy !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \" + \"does not have an element or Component. This means it will render an <Outlet /> with a \" + \"null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  let renderedMatches = _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase,\n    // Re-encode pathnames that were decoded inside matchRoutes\n    navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase])\n  })), parentMatches, dataRouterState, future);\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return /*#__PURE__*/React.createElement(LocationContext.Provider, {\n      value: {\n        location: _extends({\n          pathname: \"/\",\n          search: \"\",\n          hash: \"\",\n          state: null,\n          key: \"default\"\n        }, location),\n        navigationType: Action.Pop\n      }\n    }, renderedMatches);\n  }\n  return renderedMatches;\n}\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error) ? error.status + \" \" + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = {\n    padding: \"0.5rem\",\n    backgroundColor: lightgrey\n  };\n  let codeStyles = {\n    padding: \"2px 4px\",\n    backgroundColor: lightgrey\n  };\n  let devInfo = null;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(\"Error handled by React Router default ErrorBoundary:\", error);\n    devInfo = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, \"\\uD83D\\uDCBF Hey developer \\uD83D\\uDC4B\"), /*#__PURE__*/React.createElement(\"p\", null, \"You can provide a way better UX than this when your app throws errors by providing your own \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"ErrorBoundary\"), \" or\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      style: codeStyles\n    }, \"errorElement\"), \" prop on your route.\"));\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Unexpected Application Error!\"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      fontStyle: \"italic\"\n    }\n  }, message), stack ? /*#__PURE__*/React.createElement(\"pre\", {\n    style: preStyles\n  }, stack) : null, devInfo);\n}\nconst defaultErrorElement = /*#__PURE__*/React.createElement(DefaultErrorComponent, null);\nclass RenderErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error: error\n    };\n  }\n  static getDerivedStateFromProps(props, state) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location || state.revalidation !== \"idle\" && props.revalidation === \"idle\") {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"React Router caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    return this.state.error !== undefined ? /*#__PURE__*/React.createElement(RouteContext.Provider, {\n      value: this.props.routeContext\n    }, /*#__PURE__*/React.createElement(RouteErrorContext.Provider, {\n      value: this.state.error,\n      children: this.props.component\n    })) : this.props.children;\n  }\n}\nfunction RenderedRoute(_ref) {\n  let {\n    routeContext,\n    match,\n    children\n  } = _ref;\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n  return /*#__PURE__*/React.createElement(RouteContext.Provider, {\n    value: routeContext\n  }, children);\n}\nfunction _renderMatches(matches, parentMatches, dataRouterState, future) {\n  var _dataRouterState;\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (dataRouterState === void 0) {\n    dataRouterState = null;\n  }\n  if (future === void 0) {\n    future = null;\n  }\n  if (matches == null) {\n    var _future;\n    if (!dataRouterState) {\n      return null;\n    }\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches;\n    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches;\n    } else {\n      return null;\n    }\n  }\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(m => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);\n    !(errorIndex >= 0) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"Could not find a matching route for errors on route IDs: \" + Object.keys(errors).join(\",\")) : UNSAFE_invariant(false) : void 0;\n    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n      if (match.route.id) {\n        let {\n          loaderData,\n          errors\n        } = dataRouterState;\n        let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error;\n    let shouldRenderHydrateFallback = false;\n    let errorElement = null;\n    let hydrateFallbackElement = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\"route-fallback\", false, \"No `HydrateFallback` element provided to render during initial hydration\");\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = /*#__PURE__*/React.createElement(match.route.Component, null);\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return /*#__PURE__*/React.createElement(RenderedRoute, {\n        match: match,\n        routeContext: {\n          outlet,\n          matches,\n          isDataRoute: dataRouterState != null\n        },\n        children: children\n      });\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/React.createElement(RenderErrorBoundary, {\n      location: dataRouterState.location,\n      revalidation: dataRouterState.revalidation,\n      component: errorElement,\n      error: error,\n      children: getChildren(),\n      routeContext: {\n        outlet: null,\n        matches,\n        isDataRoute: true\n      }\n    }) : getChildren();\n  }, null);\n}\nvar DataRouterHook = /*#__PURE__*/function (DataRouterHook) {\n  DataRouterHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterHook[\"UseNavigateStable\"] = \"useNavigate\";\n  return DataRouterHook;\n}(DataRouterHook || {});\nvar DataRouterStateHook = /*#__PURE__*/function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseBlocker\"] = \"useBlocker\";\n  DataRouterStateHook[\"UseLoaderData\"] = \"useLoaderData\";\n  DataRouterStateHook[\"UseActionData\"] = \"useActionData\";\n  DataRouterStateHook[\"UseRouteError\"] = \"useRouteError\";\n  DataRouterStateHook[\"UseNavigation\"] = \"useNavigation\";\n  DataRouterStateHook[\"UseRouteLoaderData\"] = \"useRouteLoaderData\";\n  DataRouterStateHook[\"UseMatches\"] = \"useMatches\";\n  DataRouterStateHook[\"UseRevalidator\"] = \"useRevalidator\";\n  DataRouterStateHook[\"UseNavigateStable\"] = \"useNavigate\";\n  DataRouterStateHook[\"UseRouteId\"] = \"useRouteId\";\n  return DataRouterStateHook;\n}(DataRouterStateHook || {});\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\nfunction useRouteContext(hookName) {\n  let route = React.useContext(RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  !thisRoute.route.id ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, hookName + \" can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nfunction useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nfunction useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nfunction useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(() => ({\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation\n  }), [dataRouterContext.router.revalidate, state.revalidation]);\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nfunction useMatches() {\n  let {\n    matches,\n    loaderData\n  } = useDataRouterState(DataRouterStateHook.UseMatches);\n  return React.useMemo(() => matches.map(m => UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nfunction useLoaderData() {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\"You cannot `useLoaderData` in an errorElement (routeId: \" + routeId + \")\");\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nfunction useRouteLoaderData(routeId) {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nfunction useActionData() {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nfunction useRouteError() {\n  var _state$errors;\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nfunction useAsyncValue() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nfunction useAsyncError() {\n  let value = React.useContext(AwaitContext);\n  return value == null ? void 0 : value._error;\n}\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nfunction useBlocker(shouldBlock) {\n  let {\n    router,\n    basename\n  } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback(arg => {\n    if (typeof shouldBlock !== \"function\") {\n      return !!shouldBlock;\n    }\n    if (basename === \"/\") {\n      return shouldBlock(arg);\n    }\n\n    // If they provided us a function and we've got an active basename, strip\n    // it from the locations we expose to the user to match the behavior of\n    // useLocation\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = arg;\n    return shouldBlock({\n      currentLocation: _extends({}, currentLocation, {\n        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname\n      }),\n      nextLocation: _extends({}, nextLocation, {\n        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname\n      }),\n      historyAction\n    });\n  }, [basename, shouldBlock]);\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = React.useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(activeRef.current, navigateEffectWarning) : void 0;\n\n    // Short circuit here since if this happens on first render the navigate\n    // is useless because we haven't wired up our router subscriber yet\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      router.navigate(to);\n    } else {\n      router.navigate(to, _extends({\n        fromRouteId: id\n      }, options));\n    }\n  }, [router, id]);\n  return navigate;\n}\nconst alreadyWarned$1 = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned$1[key]) {\n    alreadyWarned$1[key] = true;\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, message) : void 0;\n  }\n}\n\nconst alreadyWarned = {};\nfunction warnOnce(key, message) {\n  if (process.env.NODE_ENV !== \"production\" && !alreadyWarned[message]) {\n    alreadyWarned[message] = true;\n    console.warn(message);\n  }\n}\nconst logDeprecation = (flag, msg, link) => warnOnce(flag, \"\\u26A0\\uFE0F React Router Future Flag Warning: \" + msg + \". \" + (\"You can use the `\" + flag + \"` future flag to opt-in early. \") + (\"For more information, see \" + link + \".\"));\nfunction logV6DeprecationWarnings(renderFuture, routerFuture) {\n  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) {\n    logDeprecation(\"v7_startTransition\", \"React Router will begin wrapping state updates in `React.startTransition` in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_starttransition\");\n  }\n  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) {\n    logDeprecation(\"v7_relativeSplatPath\", \"Relative route resolution within Splat routes is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath\");\n  }\n  if (routerFuture) {\n    if (routerFuture.v7_fetcherPersist === undefined) {\n      logDeprecation(\"v7_fetcherPersist\", \"The persistence behavior of fetchers is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist\");\n    }\n    if (routerFuture.v7_normalizeFormMethod === undefined) {\n      logDeprecation(\"v7_normalizeFormMethod\", \"Casing of `formMethod` fields is being normalized to uppercase in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod\");\n    }\n    if (routerFuture.v7_partialHydration === undefined) {\n      logDeprecation(\"v7_partialHydration\", \"`RouterProvider` hydration behavior is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_partialhydration\");\n    }\n    if (routerFuture.v7_skipActionErrorRevalidation === undefined) {\n      logDeprecation(\"v7_skipActionErrorRevalidation\", \"The revalidation behavior after 4xx/5xx `action` responses is changing in v7\", \"https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation\");\n    }\n  }\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    if (v7_startTransition && startTransitionImpl) {\n      startTransitionImpl(() => setStateImpl(newState));\n    } else {\n      setStateImpl(newState);\n    }\n  }, [setStateImpl, v7_startTransition]);\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  React.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: {\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath\n    }\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(DataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))), null);\n}\nfunction DataRoutes(_ref2) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref2;\n  return useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/v6/router-components/memory-router\n */\nfunction MemoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex,\n    future\n  } = _ref3;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/v6/components/navigate\n */\nfunction Navigate(_ref4) {\n  let {\n    to,\n    replace,\n    state,\n    relative\n  } = _ref4;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : UNSAFE_invariant(false) : void 0;\n  let {\n    future,\n    static: isStatic\n  } = React.useContext(NavigationContext);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(!isStatic, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let {\n    matches\n  } = React.useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(to, UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === \"path\");\n  let jsonPath = JSON.stringify(path);\n  React.useEffect(() => navigate(JSON.parse(jsonPath), {\n    replace,\n    state,\n    relative\n  }), [navigate, jsonPath, relative, replace, state]);\n  return null;\n}\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/v6/components/outlet\n */\nfunction Outlet(props) {\n  return useOutlet(props.context);\n}\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/v6/components/route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : UNSAFE_invariant(false) ;\n}\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/v6/router-components/router\n */\nfunction Router(_ref5) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false,\n    future\n  } = _ref5;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : UNSAFE_invariant(false) : void 0;\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp,\n    future: _extends({\n      v7_relativeSplatPath: false\n    }, future)\n  }), [basename, future, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key\n      },\n      navigationType\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(locationContext != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (locationContext == null) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/React.createElement(LocationContext.Provider, {\n    children: children,\n    value: locationContext\n  }));\n}\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/v6/components/routes\n */\nfunction Routes(_ref6) {\n  let {\n    children,\n    location\n  } = _ref6;\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nfunction Await(_ref7) {\n  let {\n    children,\n    errorElement,\n    resolve\n  } = _ref7;\n  return /*#__PURE__*/React.createElement(AwaitErrorBoundary, {\n    resolve: resolve,\n    errorElement: errorElement\n  }, /*#__PURE__*/React.createElement(ResolveAwait, null, children));\n}\nvar AwaitRenderStatus = /*#__PURE__*/function (AwaitRenderStatus) {\n  AwaitRenderStatus[AwaitRenderStatus[\"pending\"] = 0] = \"pending\";\n  AwaitRenderStatus[AwaitRenderStatus[\"success\"] = 1] = \"success\";\n  AwaitRenderStatus[AwaitRenderStatus[\"error\"] = 2] = \"error\";\n  return AwaitRenderStatus;\n}(AwaitRenderStatus || {});\nconst neverSettledPromise = new Promise(() => {});\nclass AwaitErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"<Await> caught the following error during render\", error, errorInfo);\n  }\n  render() {\n    let {\n      children,\n      errorElement,\n      resolve\n    } = this.props;\n    let promise = null;\n    let status = AwaitRenderStatus.pending;\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_data\", {\n        get: () => resolve\n      });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", {\n        get: () => true\n      });\n      Object.defineProperty(promise, \"_error\", {\n        get: () => renderError\n      });\n    } else if (resolve._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status = \"_error\" in promise ? AwaitRenderStatus.error : \"_data\" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", {\n        get: () => true\n      });\n      promise = resolve.then(data => Object.defineProperty(resolve, \"_data\", {\n        get: () => data\n      }), error => Object.defineProperty(resolve, \"_error\", {\n        get: () => error\n      }));\n    }\n    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: errorElement\n      });\n    }\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return /*#__PURE__*/React.createElement(AwaitContext.Provider, {\n        value: promise,\n        children: children\n      });\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait(_ref8) {\n  let {\n    children\n  } = _ref8;\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, toRender);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/v6/utils/create-routes-from-children\n */\nfunction createRoutesFromChildren(children, parentPath) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  let routes = [];\n  React.Children.forEach(children, (element, index) => {\n    if (! /*#__PURE__*/React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    let treePath = [...parentPath, index];\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : UNSAFE_invariant(false) : void 0;\n    !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"An index route cannot have child routes.\") : UNSAFE_invariant(false) : void 0;\n    let route = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children, treePath);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\n\nfunction mapRouteProperties(route) {\n  let updates = {\n    // Note: this check also occurs in createRoutesFromChildren so update\n    // there if you change this -- please and thank you!\n    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null\n  };\n  if (route.Component) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.element) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `Component` and `element` on your route - \" + \"`Component` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      element: /*#__PURE__*/React.createElement(route.Component),\n      Component: undefined\n    });\n  }\n  if (route.HydrateFallback) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.hydrateFallbackElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - \" + \"`HydrateFallback` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      hydrateFallbackElement: /*#__PURE__*/React.createElement(route.HydrateFallback),\n      HydrateFallback: undefined\n    });\n  }\n  if (route.ErrorBoundary) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (route.errorElement) {\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"You should not include both `ErrorBoundary` and `errorElement` on your route - \" + \"`ErrorBoundary` will be used.\") : void 0;\n      }\n    }\n    Object.assign(updates, {\n      errorElement: /*#__PURE__*/React.createElement(route.ErrorBoundary),\n      ErrorBoundary: undefined\n    });\n  }\n  return updates;\n}\nfunction createMemoryRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createMemoryHistory({\n      initialEntries: opts == null ? void 0 : opts.initialEntries,\n      initialIndex: opts == null ? void 0 : opts.initialIndex\n    }),\n    hydrationData: opts == null ? void 0 : opts.hydrationData,\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation\n  }).initialize();\n}\n\nexport { Await, MemoryRouter, Navigate, Outlet, Route, Router, RouterProvider, Routes, DataRouterContext as UNSAFE_DataRouterContext, DataRouterStateContext as UNSAFE_DataRouterStateContext, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, logV6DeprecationWarnings as UNSAFE_logV6DeprecationWarnings, mapRouteProperties as UNSAFE_mapRouteProperties, useRouteId as UNSAFE_useRouteId, useRoutesImpl as UNSAFE_useRoutesImpl, createMemoryRouter, createRoutesFromChildren, createRoutesFromChildren as createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes };\n//# sourceMappingURL=index.js.map\n","/**\n * React Router DOM v6.30.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { UNSAFE_mapRouteProperties, UNSAFE_logV6DeprecationWarnings, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Router, UNSAFE_useRoutesImpl, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, useBlocker } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, replace, resolvePath, useActionData, useAsyncError, useAsyncValue, useBlocker, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_ErrorResponseImpl, UNSAFE_invariant, joinPaths, IDLE_FETCHER, matchPath } from '@remix-run/router';\nexport { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\", \"viewTransition\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"viewTransition\", \"children\"],\n  _excluded3 = [\"fetcherKey\", \"navigate\", \"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"relative\", \"preventScrollReset\", \"viewTransition\"];\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"6\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties,\n    dataStrategy: opts == null ? void 0 : opts.dataStrategy,\n    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,\n    window: opts == null ? void 0 : opts.window\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\nconst ViewTransitionContext = /*#__PURE__*/React.createContext({\n  isTransitioning: false\n});\nif (process.env.NODE_ENV !== \"production\") {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\nconst FetchersContext = /*#__PURE__*/React.createContext(new Map());\nif (process.env.NODE_ENV !== \"production\") {\n  FetchersContext.displayName = \"Fetchers\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\nfunction startTransitionSafe(cb) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\nfunction flushSyncSafe(cb) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\nclass Deferred {\n  constructor() {\n    this.status = \"pending\";\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = value => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = reason => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nfunction RouterProvider(_ref) {\n  let {\n    fallbackElement,\n    router,\n    future\n  } = _ref;\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState();\n  let [vtContext, setVtContext] = React.useState({\n    isTransitioning: false\n  });\n  let [renderDfd, setRenderDfd] = React.useState();\n  let [transition, setTransition] = React.useState();\n  let [interruption, setInterruption] = React.useState();\n  let fetcherData = React.useRef(new Map());\n  let {\n    v7_startTransition\n  } = future || {};\n  let optInStartTransition = React.useCallback(cb => {\n    if (v7_startTransition) {\n      startTransitionSafe(cb);\n    } else {\n      cb();\n    }\n  }, [v7_startTransition]);\n  let setState = React.useCallback((newState, _ref2) => {\n    let {\n      deletedFetchers,\n      flushSync: flushSync,\n      viewTransitionOpts: viewTransitionOpts\n    } = _ref2;\n    newState.fetchers.forEach((fetcher, key) => {\n      if (fetcher.data !== undefined) {\n        fetcherData.current.set(key, fetcher.data);\n      }\n    });\n    deletedFetchers.forEach(key => fetcherData.current.delete(key));\n    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== \"function\";\n    // If this isn't a view transition or it's not available in this browser,\n    // just update and be done with it\n    if (!viewTransitionOpts || isViewTransitionUnavailable) {\n      if (flushSync) {\n        flushSyncSafe(() => setStateImpl(newState));\n      } else {\n        optInStartTransition(() => setStateImpl(newState));\n      }\n      return;\n    }\n    // flushSync + startViewTransition\n    if (flushSync) {\n      // Flush through the context to mark DOM elements as transition=ing\n      flushSyncSafe(() => {\n        // Cancel any pending transitions\n        if (transition) {\n          renderDfd && renderDfd.resolve();\n          transition.skipTransition();\n        }\n        setVtContext({\n          isTransitioning: true,\n          flushSync: true,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation\n        });\n      });\n      // Update the DOM\n      let t = router.window.document.startViewTransition(() => {\n        flushSyncSafe(() => setStateImpl(newState));\n      });\n      // Clean up after the animation completes\n      t.finished.finally(() => {\n        flushSyncSafe(() => {\n          setRenderDfd(undefined);\n          setTransition(undefined);\n          setPendingState(undefined);\n          setVtContext({\n            isTransitioning: false\n          });\n        });\n      });\n      flushSyncSafe(() => setTransition(t));\n      return;\n    }\n    // startTransition + startViewTransition\n    if (transition) {\n      // Interrupting an in-progress transition, cancel and let everything flush\n      // out, and then kick off a new transition from the interruption state\n      renderDfd && renderDfd.resolve();\n      transition.skipTransition();\n      setInterruption({\n        state: newState,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    } else {\n      // Completed navigation update with opted-in view transitions, let 'er rip\n      setPendingState(newState);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: viewTransitionOpts.currentLocation,\n        nextLocation: viewTransitionOpts.nextLocation\n      });\n    }\n  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred());\n    }\n  }, [vtContext]);\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({\n          isTransitioning: false\n        });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n  React.useEffect(() => {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(fallbackElement == null || !router.future.v7_partialHydration, \"`<RouterProvider fallbackElement>` is deprecated when using \" + \"`v7_partialHydration`, use a `HydrateFallback` component instead\") : void 0;\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let navigator = React.useMemo(() => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: n => router.navigate(n),\n      push: (to, state, opts) => router.navigate(to, {\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      }),\n      replace: (to, state, opts) => router.navigate(to, {\n        replace: true,\n        state,\n        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset\n      })\n    };\n  }, [router]);\n  let basename = router.basename || \"/\";\n  let dataRouterContext = React.useMemo(() => ({\n    router,\n    navigator,\n    static: false,\n    basename\n  }), [router, navigator, basename]);\n  let routerFuture = React.useMemo(() => ({\n    v7_relativeSplatPath: router.future.v7_relativeSplatPath\n  }), [router.future.v7_relativeSplatPath]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future, router.future), [future, router.future]);\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UNSAFE_DataRouterContext.Provider, {\n    value: dataRouterContext\n  }, /*#__PURE__*/React.createElement(UNSAFE_DataRouterStateContext.Provider, {\n    value: state\n  }, /*#__PURE__*/React.createElement(FetchersContext.Provider, {\n    value: fetcherData.current\n  }, /*#__PURE__*/React.createElement(ViewTransitionContext.Provider, {\n    value: vtContext\n  }, /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    location: state.location,\n    navigationType: state.historyAction,\n    navigator: navigator,\n    future: routerFuture\n  }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/React.createElement(MemoizedDataRoutes, {\n    routes: router.routes,\n    future: router.future,\n    state: state\n  }) : fallbackElement))))), null);\n}\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = /*#__PURE__*/React.memo(DataRoutes);\nfunction DataRoutes(_ref3) {\n  let {\n    routes,\n    future,\n    state\n  } = _ref3;\n  return UNSAFE_useRoutesImpl(routes, undefined, state, future);\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref4) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref4;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref5) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref5;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref6) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref6;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  React.useEffect(() => UNSAFE_logV6DeprecationWarnings(future), [future]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history,\n    future: future\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref7, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition\n    } = _ref7,\n    rest = _objectWithoutPropertiesLoose(_ref7, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative,\n    viewTransition\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref8, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children\n    } = _ref8,\n    rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator,\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let isTransitioning = routerState != null &&\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useViewTransitionState(path) && viewTransition === true;\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  if (nextLocationPathname && basename) {\n    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n  }\n  // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n  // we're looking for a slash _after_ what's in `to`.  For example:\n  //\n  // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n  // both want to look for a / at index 6 to match URL `/users/matt`\n  const endSlashPosition = toPathname !== \"/\" && toPathname.endsWith(\"/\") ? toPathname.length - 1 : toPathname.length;\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let renderProps = {\n    isActive,\n    isPending,\n    isTransitioning\n  };\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp(renderProps);\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null, isTransitioning ? \"transitioning\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to,\n    viewTransition: viewTransition\n  }), typeof children === \"function\" ? children(renderProps) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((_ref9, forwardedRef) => {\n  let {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition\n    } = _ref9,\n    props = _objectWithoutPropertiesLoose(_ref9, _excluded3);\n  let submit = useSubmit();\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      fetcherKey,\n      method: submitMethod,\n      navigate,\n      replace,\n      state,\n      relative,\n      preventScrollReset,\n      viewTransition\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref10) {\n  let {\n    getKey,\n    storageKey\n  } = _ref10;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterHook[\"useViewTransitionState\"] = \"useViewTransitionState\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetcher\"] = \"useFetcher\";\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n// Internal hooks\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n// External hooks\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative,\n        viewTransition\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => \"__\" + String(++fetcherId) + \"__\";\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    if (options.navigate === false) {\n      let key = options.fetcherKey || getUniqueFetcherId();\n      router.fetch(key, currentRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        flushSync: options.flushSync\n      });\n    } else {\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || method,\n        formEncType: options.encType || encType,\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n        flushSync: options.flushSync,\n        viewTransition: options.viewTransition\n      });\n    }\n  }, [router, basename, currentRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some(v => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher(_temp3) {\n  var _route$matches;\n  let {\n    key\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(UNSAFE_RouteContext);\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !fetcherData ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a FetchersContext\") : UNSAFE_invariant(false) : void 0;\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  // Fetcher additions\n  let load = React.useCallback((href, opts) => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href, opts);\n  }, [fetcherKey, routeId, router]);\n  let submitImpl = useSubmit();\n  let submit = React.useCallback((target, opts) => {\n    submitImpl(target, _extends({}, opts, {\n      navigate: false,\n      fetcherKey\n    }));\n  }, [fetcherKey, submitImpl]);\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n      return /*#__PURE__*/React.createElement(Form, _extends({}, props, {\n        navigate: false,\n        fetcherKey: fetcherKey,\n        ref: ref\n      }));\n    });\n    if (process.env.NODE_ENV !== \"production\") {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form: FetcherForm,\n    submit,\n    load\n  }, fetcher, {\n    data\n  }), [FetcherForm, submit, load, fetcher, data]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(_ref11 => {\n    let [key, fetcher] = _ref11;\n    return _extends({}, fetcher, {\n      key\n    });\n  });\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp4) {\n  let {\n    getKey,\n    storageKey\n  } = _temp4 === void 0 ? {} : _temp4;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    try {\n      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    } catch (error) {\n      process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (\" + error + \").\") : void 0;\n    }\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref12) {\n  let {\n    when,\n    message\n  } = _ref12;\n  let blocker = useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(to, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let vtContext = React.useContext(ViewTransitionContext);\n  !(vtContext != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" + \"Did you accidentally import `RouterProvider` from `react-router`?\") : UNSAFE_invariant(false) : void 0;\n  let {\n    basename\n  } = useDataRouterContext(DataRouterHook.useViewTransitionState);\n  let path = useResolvedPath(to, {\n    relative: opts.relative\n  });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;\n  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, RouterProvider, ScrollRestoration, FetchersContext as UNSAFE_FetchersContext, ViewTransitionContext as UNSAFE_ViewTransitionContext, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit, useViewTransitionState };\n//# sourceMappingURL=index.js.map\n","// src/components/tissue/AlloyTableLink.jsx\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AlloyIcon, { IconObject } from \"../cell/AlloyIcon.jsx\";\n\n/* -------------------- utils --------------------------- */\nfunction capitalize(s) {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n/* -------------------- id generator -------------------- */\nlet __tableLinkCounter = 0;\nfunction nextTableLinkId() {\n  __tableLinkCounter += 1;\n  return `tablelink${__tableLinkCounter}`;\n}\n\n/* -------------------- Model --------------------------- */\n/**\n * TableLinkObject\n *  - id?: string\n *  - className?: string               // e.g. \"table table-hover\"\n *  - name?: string                    // caption\n *  - rows?: Array<object>             // each row should include unique `id`\n *  - icon?: IconObject|object         // first \"Type\" column icon\n *  - sort?: IconObject|object         // header sort indicator icon\n *  - link: string                     // REQUIRED; base route (e.g., \"/users\")\n */\nexport class TableLinkObject {\n  constructor(p = {}) {\n    if (!p.link) throw new Error(\"TableLinkObject requires `link` (base route).\");\n\n    this.id = p.id ?? nextTableLinkId();\n    this.className = p.className ?? \"table\";\n    this.name = p.name ?? \"table\";\n    this.rows = Array.isArray(p.rows) ? p.rows.slice() : [];\n    this.link = p.link; // base route\n\n    // Defaults\n    const defaultIcon = new IconObject({ iconClass: \"fa-solid fa-user\" });\n    const defaultSort = new IconObject({ iconClass: \"fa-solid fa-arrow-down\" });\n\n    this.icon =\n      p.icon instanceof IconObject ? p.icon : new IconObject(p.icon || defaultIcon);\n    this.sort =\n      p.sort instanceof IconObject ? p.sort : new IconObject(p.sort || defaultSort);\n  }\n}\n\n/* -------------------- helpers ------------------------- */\nfunction getHeaderKeys(rows) {\n  if (!rows || rows.length === 0) return [];\n  // Canonical order from first row; exclude special \"id\"\n  return Object.keys(rows[0]).filter((k) => k !== \"id\");\n}\n\n/* -------------------- Component ----------------------- */\n/**\n * Props:\n *  - table: TableLinkObject (required)\n *  - output?: (payload:\n *        { type: \"column\", name: string, dir: \"asc\"|\"desc\" } |\n *        { type: \"navigate\", to: string, id: string|number }\n *    ) => void\n *\n * Notes:\n *  - No client sorting; header click only toggles local icon + emits column intent.\n *  - Each data cell (except icon column) navigates to `${table.link}/${row.id}`.\n */\nexport function AlloyTableLink({ table, output }) {\n  if (!table || !(table instanceof TableLinkObject)) {\n    throw new Error(\"AlloyTableLink requires `table` (TableLinkObject instance).\");\n  }\n\n  const tableIdRef = useRef(table.id);\n  const [sort, setSort] = useState({ col: \"\", dir: \"asc\" }); // icon-only\n\n  const headerKeys = useMemo(() => getHeaderKeys(table.rows), [table.rows]);\n\n  const handleHeaderClick = (name) => {\n    if (!name) return;\n    const nextDir = sort.col === name && sort.dir === \"asc\" ? \"desc\" : \"asc\";\n    setSort({ col: name, dir: nextDir });\n    output?.({ type: \"column\", name, dir: nextDir });\n  };\n\n  return (\n    <table id={tableIdRef.current} className={table.className}>\n      <caption className=\"caption-top text-center\">{table.name}</caption>\n\n      <thead>\n        <tr>\n          <th scope=\"col\">Type</th>\n          {headerKeys.map((key) => {\n            const isActive = sort.col === key;\n            const isDesc = isActive && sort.dir === \"desc\";\n            return (\n              <th key={key} scope=\"col\">\n                <span\n                  className=\"cursor\"\n                  onClick={() => handleHeaderClick(key)}\n                  style={{ userSelect: \"none\" }}\n                >\n                  {capitalize(key)}\n                  {isActive && (\n                    <span\n                      className=\"ms-1 d-inline-flex align-middle\"\n                      aria-hidden=\"true\"\n                      title={isDesc ? \"Sorted descending\" : \"Sorted ascending\"}\n                      style={{\n                        transform: isDesc ? \"rotate(180deg)\" : \"none\",\n                        transition: \"transform 120ms\",\n                      }}\n                    >\n                      <AlloyIcon icon={table.sort} />\n                    </span>\n                  )}\n                </span>\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n\n      <tbody>\n        {(table.rows ?? []).length > 0 ? (\n          (table.rows ?? []).map((row, idx) => {\n            const rowId = row?.id ?? idx;\n            const toBase = table.link.endsWith(\"/\")\n              ? table.link.slice(0, -1)\n              : table.link;\n            const to = `${toBase}/${rowId}`;\n\n            return (\n              <tr key={rowId}>\n                <td>\n                  <AlloyIcon icon={table.icon} />\n                </td>\n\n                {/* Each cell is a <Link> to `${link}/${id}` (id column excluded) */}\n                {headerKeys.map((key) => (\n                  <td key={`${rowId}-${key}`}>\n                    <Link\n                      to={to}\n                      onClick={() => output?.({ type: \"navigate\", to, id: rowId })}\n                      className=\"text-decoration-none\"\n                    >\n                      <span>{row?.[key]}</span>\n                    </Link>\n                  </td>\n                ))}\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td colSpan={Math.max(1, headerKeys.length) + 1} className=\"text-center text-secondary\">\n              No rows\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n}\n\nexport default AlloyTableLink;\n","// src/components/tissue/AlloyTableAction.jsx\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AlloyIcon, { IconObject } from \"../cell/AlloyIcon.jsx\";\nimport AlloyButtonBar, { ButtonBarObject } from \"./AlloyButtonBar.jsx\";\n\n/* ---------------------- id generator ---------------------- */\nlet __tblActionCounter = 0;\nfunction nextTableActionId() {\n  __tblActionCounter += 1;\n  return `tableaction${__tblActionCounter}`;\n}\n\n/* ---------------------- helpers ---------------------- */\nfunction capitalize(s) {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\n// Preserve original object-key order from the first row,\n// but always exclude \"id\" from headers and cells.\nfunction getHeaderKeys(rows) {\n  if (!Array.isArray(rows) || rows.length === 0) return [];\n  const first = rows[0] ?? {};\n  return Object.keys(first).filter((k) => k !== \"id\");\n}\n\n/* ---------------------- Model ---------------------- */\nexport class TableActionObject {\n  /**\n   * @param {{\n   *   id?: string,\n   *   className?: string,\n   *   name?: string,\n   *   rows?: Array<Record<string, any>>,\n   *   icon?: IconObject|object,\n   *   sort?: IconObject|object,\n   *   actions: ButtonBarObject|object,  // REQUIRED\n   *   link?: string                     // OPTIONAL, base route for row links; e.g. \"/users\"\n   * }} p\n   */\n  constructor(p = {}) {\n    if (!p.actions) throw new Error(\"TableActionObject requires `actions`.\");\n\n    this.id = p.id ?? nextTableActionId();\n    this.className = p.className ?? \"table\";\n    this.name = p.name ?? \"table\";\n    this.rows = Array.isArray(p.rows) ? p.rows.slice() : [];\n    this.link = typeof p.link === \"string\" ? p.link : \"\"; // if provided, cells become Links\n\n    const defaultIcon = new IconObject({ iconClass: \"fa-solid fa-user\" });\n    const defaultSort = new IconObject({ iconClass: \"fa-solid fa-arrow-down\" });\n\n    // icon/sort can be raw or instances\n    this.icon = p.icon instanceof IconObject ? p.icon : new IconObject(p.icon || defaultIcon);\n    this.sort = p.sort instanceof IconObject ? p.sort : new IconObject(p.sort || defaultSort);\n\n    // Ensure actions is a ButtonBarObject; it hydrates its own internal buttons.\n    this.actions = p.actions instanceof ButtonBarObject ? p.actions : new ButtonBarObject(p.actions || {});\n  }\n}\n\n/* ---------------------- Component ---------------------- */\n/**\n * Props:\n *  - table: TableActionObject (required)\n *  - output?: (payload: any) => void\n *      Emits:\n *        â€¢ { type: \"column\", name, dir } on header click (you sort on server)\n *        â€¢ { type: \"action\", action, row } when an action button is clicked\n *        â€¢ { type: \"navigate\", to, id, row } when a row cell link is clicked\n */\nexport function AlloyTableAction({ table, output }) {\n  if (!table || !(table instanceof TableActionObject)) {\n    throw new Error(\"AlloyTableAction requires `table` (TableActionObject instance).\");\n  }\n\n  const tblIdRef = useRef(table.id);\n  const headerKeys = useMemo(() => getHeaderKeys(table.rows), [table.rows]);\n\n  // Local sort indicator (UI only; server actually sorts)\n  const [sort, setSort] = useState({ col: \"\", dir: \"asc\" });\n\n  function onHeaderClick(colName) {\n    const nextDir = sort.col === colName && sort.dir === \"asc\" ? \"desc\" : \"asc\";\n    setSort({ col: colName, dir: nextDir });\n    output?.({ type: \"column\", name: colName, dir: nextDir });\n  }\n\n  // Pass action events up with the row data\n  function makeRowActionEmitter(row) {\n    return (self, e) => {\n      output?.({\n        type: \"action\",\n        action: {\n          id: self?.id,\n          name: self?.name,\n          className: self?.className,\n          active: self?.active,\n          disabled: !!self?.disabled,\n          title: self?.title,\n          ariaLabel: self?.ariaLabel,\n          tabIndex: self?.tabIndex,\n          iconClass: self?.icon?.iconClass,\n        },\n        row,\n      });\n    };\n  }\n\n  return (\n    <table id={tblIdRef.current} className={table.className}>\n      <caption className=\"caption-top text-center\">{table.name}</caption>\n      <thead>\n        <tr>\n          <th scope=\"col\">Type</th>\n          {headerKeys.map((key) => {\n            const isActive = sort.col === key;\n            const rotateClass = isActive && sort.dir === \"desc\" ? \"rotate-180\" : \"\";\n            return (\n              <th key={`h-${key}`} scope=\"col\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-link p-0 text-decoration-none\"\n                  onClick={() => onHeaderClick(key)}\n                >\n                  {capitalize(key)}\n                  {isActive && (\n                    <span className={`ms-1 align-middle ${rotateClass}`} aria-hidden=\"true\">\n                      <AlloyIcon icon={table.sort} />\n                    </span>\n                  )}\n                </button>\n              </th>\n            );\n          })}\n          <th scope=\"col\" className=\"text-end\">\n            Actions\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {table.rows.map((row, idx) => {\n          const rowId = row?.id ?? idx;\n\n          // Reuse the SAME actions bar instance for each row (no cloning)\n          const rowBar = table.actions;\n\n          return (\n            <tr key={rowId}>\n              <td>\n                <AlloyIcon icon={table.icon} />\n              </td>\n\n              {/* Cells â€” optionally wrapped in <Link> if table.link is provided */}\n              {headerKeys.map((key) => {\n                const to = table.link ? `${table.link}/${rowId}` : \"\";\n                return (\n                  <td key={`${rowId}-${key}`}>\n                    {table.link ? (\n                      <Link\n                        to={to}\n                        onClick={() => output?.({ type: \"navigate\", to, id: rowId, row })}\n                        className=\"text-decoration-none\"\n                      >\n                        <span>{row?.[key]}</span>\n                      </Link>\n                    ) : (\n                      <span>{row?.[key]}</span>\n                    )}\n                  </td>\n                );\n              })}\n\n              {/* Actions column */}\n              <td className=\"text-end\">\n                <AlloyButtonBar buttonBar={rowBar} output={makeRowActionEmitter(row)} />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default AlloyTableAction;\n"],"names":["__iconCounter","nextIconId","IconObject","id","iconClass","AlloyIcon","icon","jsx","__linkCounter","nextLinkId","useActiveClass","className","active","hovered","setHovered","useState","pressed","setPressed","focused","setFocused","useMemo","LinkObject","name","href","target","rel","onClick","title","AlloyLink","link","autoId","useRef","events","__iconLinkCounter","nextLinkIconId","useActiveClassIcon","h","setH","p","setP","f","setF","LinkIconObject","AlloyLinkIcon","linkIcon","hasLabel","__logoLinkCounter","nextLogoLinkId","useActiveClassLogo","LinkLogoObject","logo","width","height","logoAlt","AlloyLinkLogo","linkLogo","__btnCounter","nextButtonId","ButtonObject","AlloyButton","forwardRef","button","output","ref","elRef","isDisabled","useImperativeHandle","_a","emitThen","handler","alsoCallInternal","e","mergedEvents","__btnIconCounter","nextButtonIconId","ButtonIconObject","AlloyButtonIcon","buttonIcon","ariaLabel","jsxs","__btnSubmitCounter","nextSubmitId","ButtonSubmitObject","AlloyButtonSubmit","buttonSubmit","loading","setLoading","useEffect","firedRef","arm","emit","handleClick","handleMouseDown","handleKeyDown","key","showIcon","__inputCounter","nextInputId","InputObject","params","type","label","value","layout","placeholder","required","minLength","maxLength","min","max","pattern","matchWith","passwordStrength","options","validators","rest","AlloyInput","input","val","setVal","touched","setTouched","validate","v","errs","trimmed","errors","onBlur","showError","errorBlock","msg","i","common","handleChange","valueArr","idx","renderInput","o","__barItemCounter","nextBarItemId","__linkBarCounter","nextLinkBarId","BarItem$1","show","LinkBarObject","barName","linkClass","links","selected","BarItem","src","l","cloneWithActiveAndClick","item","activeClass","isSelected","wrappedOnClick","AlloyLinkBar","linkBar","ulIdRef","selectedId","setSelectedId","Title","wrapOnClick","original","nextId","renderAlloyLink","Fragment","cloned","renderAlloyLinkIcon","renderAlloyLinkLogo","__buttonBarCounter","nextButtonBarId","ButtonBarObject","buttonClass","buttons","b","cloneWithActive","AlloyButtonBar","buttonBar","passUp","self","renderAlloyButton","renderAlloyButtonIcon","__navCounter","nextNavId","toLinkItems","arr","NavBarObject","AlloyNavBar","navBar","navIdRef","collapseId","capitalize","s","__tableCounter","nextTableId","TableObject","defaultIcon","defaultSort","getHeaderKeys","rows","k","AlloyTable","table","tableIdRef","sort","setSort","headerKeys","handleHeaderClick","nextDir","handleRowClick","rowId","isActive","isDesc","row","_extends","source","Action","invariant","message","warning","cond","createPath","_ref","pathname","search","hash","parsePath","path","parsedPath","hashIndex","searchIndex","ResultType","matchPath","matcher","compiledParams","compilePath","match","matchedPathname","pathnameBase","captureGroups","memo","index","paramName","isOptional","splatValue","caseSensitive","end","regexpSource","_","stripBasename","basename","startIndex","nextChar","resolvePath","to","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativePath","segments","segment","getInvalidPathError","char","field","dest","getPathContributingMatches","matches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","joinPaths","paths","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","React","DataRouterStateContext","AwaitContext","NavigationContext","LocationContext","RouteContext","RouteErrorContext","useHref","_temp","relative","useInRouterContext","UNSAFE_invariant","navigator","useResolvedPath","joinedPathname","useLocation","navigateEffectWarning","useIsomorphicLayoutEffect","cb","useNavigate","isDataRoute","useNavigateStable","useNavigateUnstable","dataRouterContext","future","routePathnamesJson","UNSAFE_getResolveToMatches","activeRef","UNSAFE_warning","_temp2","DataRouterHook","DataRouterStateHook","getDataRouterConsoleError","hookName","useDataRouterContext","ctx","useRouteContext","route","useCurrentRouteId","thisRoute","useRouteId","router","_objectWithoutPropertiesLoose","excluded","sourceKeys","defaultMethod","defaultEncType","isHtmlElement","object","isButtonElement","isFormElement","isInputElement","isModifiedEvent","event","shouldProcessLinkClick","_formDataSupportsSubmitter","isFormDataSubmitterSupported","supportedFormEncTypes","getFormEncType","encType","getFormSubmissionInfo","method","action","formData","body","attr","form","prefix","_excluded","_excluded2","_excluded3","REACT_ROUTER_VERSION","ViewTransitionContext","FetchersContext","isBrowser","ABSOLUTE_URL_REGEX","Link","_ref7","reloadDocument","replace","state","preventScrollReset","viewTransition","UNSAFE_NavigationContext","absoluteHref","isExternal","currentUrl","targetUrl","internalOnClick","useLinkClickHandler","NavLink","_ref8","ariaCurrentProp","classNameProp","styleProp","children","location","routerState","UNSAFE_DataRouterStateContext","isTransitioning","useViewTransitionState","nextLocationPathname","endSlashPosition","isPending","renderProps","ariaCurrent","style","Form","_ref9","forwardedRef","fetcherKey","navigate","onSubmit","props","submit","useSubmit","formAction","useFormAction","formMethod","submitHandler","submitter","submitMethod","UNSAFE_DataRouterContext","replaceProp","validateClientSideSubmission","fetcherId","getUniqueFetcherId","currentRouteId","UNSAFE_useRouteId","routeContext","UNSAFE_RouteContext","indexValues","qs","opts","vtContext","currentPath","nextPath","__tableLinkCounter","nextTableLinkId","TableLinkObject","AlloyTableLink","__tblActionCounter","nextTableActionId","first","TableActionObject","AlloyTableAction","tblIdRef","onHeaderClick","colName","makeRowActionEmitter","rotateClass","rowBar"],"mappings":"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","x_google_ignoreList":[12,13,14]}